
/*********************************************************************
*  Filepath: /base/static/tests/test_ir_model_fields_translation.js  *
*  Lines: 52                                                         *
*********************************************************************/
odoo.define('@base/../tests/test_ir_model_fields_translation', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

"use strict";

const tour = require("web_tour.tour");

function checkLoginColumn(translation) {
    return [
        tour.stepUtils.showAppsMenuItem(), {
            content: "Settings",
            trigger: 'a[data-menu-xmlid="base.menu_administration"]',
            run: 'click',
        }, {
            content: "Open Users & Companies",
            trigger: '[data-menu-xmlid="base.menu_users"]',
            run: "click",
        }, {
            content: "Open Users",
            trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
            run: "click",
        }, {
            content: `Login column should be ${translation}`,
            trigger: `[data-name="login"] span:contains("${translation}")`,
        }
    ]
}

tour.register('ir_model_fields_translation_en_tour', {
    test: true,
    url: '/web',
}, checkLoginColumn('Login'));

tour.register('ir_model_fields_translation_en_tour2', {
    test: true,
    url: '/web',
}, checkLoginColumn('Login2'));

tour.register('ir_model_fields_translation_fr_tour', {
    test: true,
    url: '/web',
}, checkLoginColumn('Identifiant'));

tour.register('ir_model_fields_translation_fr_tour2', {
    test: true,
    url: '/web',
}, checkLoginColumn('Identifiant2'));

return __exports;
});
;

/******************************************************************
*  Filepath: /web/static/tests/legacy/helpers/test_utils_file.js  *
*  Lines: 158                                                     *
******************************************************************/
odoo.define('web.test_utils_file', function () {
"use strict";

/**
 * FILE Test Utils
 *
 * This module defines various utility functions to help simulate events with
 * files, such as drag-and-drop.
 *
 * Note that all methods defined in this module are exported in the main
 * testUtils file.
 */


//------------------------------------------------------------------------------
// Private functions
//------------------------------------------------------------------------------

/**
 * Create a fake object 'dataTransfer', linked to some files, which is passed to
 * drag and drop events.
 *
 * @param {Object[]} files
 * @returns {Object}
 */
function _createFakeDataTransfer(files) {
    return {
        dropEffect: 'all',
        effectAllowed: 'all',
        files,
        getData: function () {
            return files;
        },
        items: [],
        types: ['Files'],
    };
}

//------------------------------------------------------------------------------
// Public functions
//------------------------------------------------------------------------------

/**
 * Create a file object, which can be used for drag-and-drop.
 *
 * @param {Object} data
 * @param {string} data.name
 * @param {string} data.content
 * @param {string} data.contentType
 * @returns {Promise<Object>} resolved with file created
 */
function createFile(data) {
    // Note: this is only supported by Chrome, and does not work in Incognito mode
    return new Promise(function (resolve, reject) {
        var requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
        if (!requestFileSystem) {
            throw new Error('FileSystem API is not supported');
        }
        requestFileSystem(window.TEMPORARY, 1024 * 1024, function (fileSystem) {
            fileSystem.root.getFile(data.name, { create: true }, function (fileEntry) {
                fileEntry.createWriter(function (fileWriter) {
                    fileWriter.onwriteend = function (e) {
                        fileSystem.root.getFile(data.name, {}, function (fileEntry) {
                            fileEntry.file(function (file) {
                                resolve(file);
                            });
                        });
                    };
                    fileWriter.write(new Blob([ data.content ], { type: data.contentType }));
                });
            });
        });
    });
}

/**
 * Drag a file over a DOM element
 *
 * @param {$.Element} $el
 * @param {Object} file must have been created beforehand (@see createFile)
 */
function dragoverFile($el, file) {
    var ev = new Event('dragover', { bubbles: true });
    Object.defineProperty(ev, 'dataTransfer', {
        value: _createFakeDataTransfer(file),
    });
    $el[0].dispatchEvent(ev);
}

/**
 * Drop a file on a DOM element.
 *
 * @param {$.Element} $el
 * @param {Object} file must have been created beforehand (@see createFile)
 */
function dropFile($el, file) {
    var ev = new Event('drop', { bubbles: true, });
    Object.defineProperty(ev, 'dataTransfer', {
        value: _createFakeDataTransfer([file]),
    });
    $el[0].dispatchEvent(ev);
}

/**
 * Drop some files on a DOM element.
 *
 * @param {$.Element} $el
 * @param {Object[]} files must have been created beforehand (@see createFile)
 */
function dropFiles($el, files) {
    var ev = new Event('drop', { bubbles: true, });
    Object.defineProperty(ev, 'dataTransfer', {
        value: _createFakeDataTransfer(files),
    });
    $el[0].dispatchEvent(ev);
}

/**
 * Set files in a file input
 *
 * @param {DOM.Element} el
 * @param {Object[]} files must have been created beforehand
 *   @see testUtils.file.createFile
 */
function inputFiles(el, files) {
    // could not use _createFakeDataTransfer as el.files assignation will only
    // work with a real FileList object.
    const dataTransfer = new window.DataTransfer();
    for (const file of files) {
        dataTransfer.items.add(file);
    }
    el.files = dataTransfer.files;
    /**
     * Changing files programatically is not supposed to trigger the event but
     * it does in Chrome versions before 73 (which is on runbot), so in that
     * case there is no need to make a manual dispatch, because it would lead to
     * the files being added twice.
     */
    const versionRaw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
    const chromeVersion = versionRaw ? parseInt(versionRaw[2], 10) : false;
    if (!chromeVersion || chromeVersion >= 73) {
        el.dispatchEvent(new Event('change'));
    }
}

//------------------------------------------------------------------------------
// Exposed API
//------------------------------------------------------------------------------

return {
    createFile: createFile,
    dragoverFile: dragoverFile,
    dropFile: dropFile,
    dropFiles,
    inputFiles,
};

});
;

/***************************************************
*  Filepath: /web/static/tests/helpers/cleanup.js  *
*  Lines: 129                                      *
***************************************************/
odoo.define('@web/../tests/helpers/cleanup', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

// -----------------------------------------------------------------------------
// Cleanup
// -----------------------------------------------------------------------------

const cleanups = [];

/**
 * Register a cleanup callback that will be executed whenever the current test
 * is done.
 *
 * - the cleanups will be executed in reverse order
 * - they will be executed even if the test fails/crashes
 *
 * @param {Function} callback
 */
__exports.registerCleanup = registerCleanup; function registerCleanup(callback) {
    cleanups.push(callback);
}

if (window.QUnit) {
    QUnit.on("OdooAfterTestHook", (info) => {
        if (QUnit.config.debug) {
            return;
        }
        let cleanup;
        // note that this calls the cleanup callbacks in reverse order!
        while ((cleanup = cleanups.pop())) {
            try {
                cleanup(info);
            } catch (error) {
                console.error(error);
            }
        }
    });

    // -----------------------------------------------------------------------------
    // Check leftovers
    // -----------------------------------------------------------------------------

    /**
     * List of elements tolerated in the body after a test. The property "keep"
     * prevents the element from being removed (typically: qunit suite elements).
     */
    const validElements = [
        // always in the body:
        { tagName: "DIV", attr: "id", value: "qunit", keep: true },
        { tagName: "DIV", attr: "id", value: "qunit-fixture", keep: true },
        // shouldn't be in the body after a test but are tolerated:
        { tagName: "SCRIPT", attr: "id", value: "" },
        { tagName: "DIV", attr: "class", value: "o_notification_manager" },
        { tagName: "DIV", attr: "class", value: "tooltip fade bs-tooltip-auto" },
        {
            tagName: "DIV",
            attr: "class",
            value: "tooltip fade bs-tooltip-auto show",
        },
        {
            tagName: "DIV",
            attr: "class",
            value: "tooltip tooltip-field-info fade bs-tooltip-auto",
        },
        {
            tagName: "DIV",
            attr: "class",
            value: "tooltip tooltip-field-info fade bs-tooltip-auto show",
        },
        { tagName: "SPAN", attr: "class", value: "select2-hidden-accessible" },

        // Due to a Document Kanban bug (already present in 12.0)
        { tagName: "DIV", attr: "class", value: "ui-helper-hidden-accessible" },
        {
            tagName: "UL",
            attr: "class",
            value: "ui-menu ui-widget ui-widget-content ui-autocomplete ui-front",
        },
        {
            tagName: "UL",
            attr: "class",
            value: "ui-menu ui-widget ui-widget-content ui-autocomplete dropdown-menu ui-front", // many2ones
        },
    ];

    /**
     * After each test, we check that there is no leftover in the DOM.
     *
     * Note: this event is not QUnit standard, we added it for this specific use case.
     * As a payload, an object with keys 'moduleName' and 'testName' is provided. It
     * is used to indicate the test that left elements in the DOM, when it happens.
     */
    QUnit.on("OdooAfterTestHook", function (info) {
        if (QUnit.config.debug) {
            return;
        }
        const failed = info.testReport.getStatus() === "failed";
        const toRemove = [];
        // check for leftover elements in the body
        for (const bodyChild of document.body.children) {
            const tolerated = validElements.find(
                (e) => e.tagName === bodyChild.tagName && bodyChild.getAttribute(e.attr) === e.value
            );
            if (!failed && !tolerated) {
                QUnit.pushFailure(
                    `Body still contains undesirable elements:\n${bodyChild.outerHTML}`
                );
            }
            if (!tolerated || !tolerated.keep) {
                toRemove.push(bodyChild);
            }
        }
        // cleanup leftovers in #qunit-fixture
        const qunitFixture = document.getElementById("qunit-fixture");
        if (qunitFixture.children.length) {
            toRemove.push(...qunitFixture.children);
        }
        // remove unwanted elements if not in debug
        for (const el of toRemove) {
            el.remove();
        }
        document.body.classList.remove("modal-open");
    });
}

return __exports;
});
;

/*************************************************
*  Filepath: /web/static/tests/helpers/utils.js  *
*  Lines: 915                                    *
*************************************************/
odoo.define('@web/../tests/helpers/utils', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { browser } = require("@web/core/browser/browser");
const { isMacOS } = require("@web/core/browser/feature_detection");
const { download } = require("@web/core/network/download");
const { Deferred } = require("@web/core/utils/concurrency");
const { patch, unpatch } = require("@web/core/utils/patch");
const { isVisible } = require("@web/core/utils/ui");
const { registerCleanup } = require("@web/../tests/helpers/cleanup");
const { templates } = require("@web/core/assets");

const { App, onMounted, onPatched, useComponent } = require("@odoo/owl");

/**
 * Patch the native Date object
 *
 * Note that it will be automatically unpatched at the end of the test
 *
 * @param {number} [year]
 * @param {number} [month]
 * @param {number} [day]
 * @param {number} [hours]
 * @param {number} [minutes]
 * @param {number} [seconds]
 */
__exports.patchDate = patchDate; function patchDate(year, month, day, hours, minutes, seconds) {
    var RealDate = window.Date;
    var actualDate = new RealDate();

    // By default, RealDate uses the browser offset, so we must replace it with the offset fixed in luxon.
    var fakeDate = new RealDate(year, month, day, hours, minutes, seconds);
    if (!(luxon.Settings.defaultZone instanceof luxon.FixedOffsetZone)) {
        throw new Error("luxon.Settings.defaultZone must be a FixedOffsetZone");
    }
    const browserOffset = -fakeDate.getTimezoneOffset();
    const patchedOffset = luxon.Settings.defaultZone.offset();
    const offsetDiff = patchedOffset - browserOffset;
    const correctedMinutes = fakeDate.getMinutes() - offsetDiff;
    fakeDate.setMinutes(correctedMinutes);

    var timeInterval = actualDate.getTime() - fakeDate.getTime();

    // eslint-disable-next-line no-global-assign
    window.Date = (function (NativeDate) {
        function Date(Y, M, D, h, m, s, ms) {
            var length = arguments.length;
            let date;
            if (arguments.length > 0) {
                date =
                    length == 1 && String(Y) === Y // isString(Y)
                        ? // We explicitly pass it through parse:
                          new NativeDate(Date.parse(Y))
                        : // We have to manually make calls depending on argument
                        // length here
                        length >= 7
                        ? new NativeDate(Y, M, D, h, m, s, ms)
                        : length >= 6
                        ? new NativeDate(Y, M, D, h, m, s)
                        : length >= 5
                        ? new NativeDate(Y, M, D, h, m)
                        : length >= 4
                        ? new NativeDate(Y, M, D, h)
                        : length >= 3
                        ? new NativeDate(Y, M, D)
                        : length >= 2
                        ? new NativeDate(Y, M)
                        : length >= 1
                        ? new NativeDate(Y)
                        : new NativeDate();
                // Prevent mixups with unfixed Date object
                date.constructor = Date;
                return date;
            } else {
                date = new NativeDate();
                var time = date.getTime();
                time -= timeInterval;
                date.setTime(time);
                return date;
            }
        }

        // Copy any custom methods a 3rd party library may have added
        for (var key in NativeDate) {
            Date[key] = NativeDate[key];
        }

        // Copy "native" methods explicitly; they may be non-enumerable
        // exception: 'now' uses fake date as reference
        Date.now = function () {
            var date = new NativeDate();
            var time = date.getTime();
            time -= timeInterval;
            return time;
        };
        Date.UTC = NativeDate.UTC;
        Date.prototype = NativeDate.prototype;
        Date.prototype.constructor = Date;

        // Upgrade Date.parse to handle simplified ISO 8601 strings
        Date.parse = NativeDate.parse;
        return Date;
    })(Date);

    registerCleanup(() => {
        window.Date = RealDate;
    });
}

/**
 * Applies a fixed time zone to luxon based on an offset to the UTC time zone.
 *
 * @param {number} offset the number of minutes ahead or behind the UTC time zone
 *                          +120 => UTC+2
 *                          -120 => UTC-2
 */
__exports.patchTimeZone = patchTimeZone; function patchTimeZone(offset) {
    const originalZone = luxon.Settings.defaultZone;
    luxon.Settings.defaultZone = new luxon.FixedOffsetZone.instance(offset);
    registerCleanup(() => {
        luxon.Settings.defaultZone = originalZone;
    });
}

let nextId = 1;

/**
 *
 * @param {Object} obj object to patch
 * @param {Object} patchValue the actual patch description
 * @param {{pure?: boolean}} [options]
 */
__exports.patchWithCleanup = patchWithCleanup; function patchWithCleanup(obj, patchValue, options) {
    const patchName = `__test_patch_${nextId++}__`;
    patch(obj, patchName, patchValue, options);
    registerCleanup(() => {
        unpatch(obj, patchName);
    });
}

/**
 * @returns {HTMLElement}
 */
__exports.getFixture = getFixture; function getFixture() {
    if (!window.QUnit) {
        return document;
    }
    if (QUnit.config.debug) {
        return document.body;
    } else {
        return document.querySelector("#qunit-fixture");
    }
}

__exports.nextTick = nextTick; async function nextTick() {
    await new Promise((resolve) => window.requestAnimationFrame(resolve));
    await new Promise((resolve) => setTimeout(resolve));
}

__exports.makeDeferred = makeDeferred; function makeDeferred() {
    return new Deferred();
}

__exports.findElement = findElement; function findElement(el, selector) {
    let target = el;
    if (selector) {
        const els = el.querySelectorAll(selector);
        if (els.length === 0) {
            throw new Error(`No element found (selector: ${selector})`);
        }
        if (els.length > 1) {
            throw new Error(`Found ${els.length} elements, instead of 1 (selector: ${selector})`);
        }
        target = els[0];
    }
    return target;
}

function keyboardEventBubble(args) {
    return Object.assign({}, args, {
        bubbles: true,
        keyCode: args.which,
        cancelable: true,
    });
}

function mouseEventMapping(args) {
    return {
        clientX: args ? args.pageX : undefined,
        clientY: args ? args.pageY : undefined,
        ...args,
        bubbles: true,
        cancelable: true,
        view: window,
    };
}

function mouseEventNoBubble(args) {
    return {
        clientX: args ? args.pageX : undefined,
        clientY: args ? args.pageY : undefined,
        ...args,
        bubbles: false,
        cancelable: false,
        view: window,
    };
}

function touchEventMapping(args) {
    return {
        ...args,
        cancelable: true,
        bubbles: true,
        composed: true,
        view: window,
        rotation: 0.0,
        zoom: 1.0,
        touches: args.touches ? [...args.touches.map((e) => new Touch(e))] : undefined,
    };
}

function touchEventCancelMapping(args) {
    return {
        ...touchEventMapping(args),
        cancelable: false,
    };
}

function noBubble(args) {
    return Object.assign({}, args, { bubbles: false });
}

function onlyBubble(args) {
    return Object.assign({}, args, { bubbles: true });
}

// TriggerEvent constructor/args processor mapping
const EVENT_TYPES = {
    auxclick: { constructor: MouseEvent, processParameters: mouseEventMapping },
    click: { constructor: MouseEvent, processParameters: mouseEventMapping },
    contextmenu: {
        constructor: MouseEvent,
        processParameters: mouseEventMapping,
    },
    dblclick: { constructor: MouseEvent, processParameters: mouseEventMapping },
    mousedown: { constructor: MouseEvent, processParameters: mouseEventMapping },
    mouseup: { constructor: MouseEvent, processParameters: mouseEventMapping },
    mousemove: { constructor: MouseEvent, processParameters: mouseEventMapping },
    mouseenter: {
        constructor: MouseEvent,
        processParameters: mouseEventNoBubble,
    },
    mouseleave: {
        constructor: MouseEvent,
        processParameters: mouseEventNoBubble,
    },
    mouseover: { constructor: MouseEvent, processParameters: mouseEventMapping },
    mouseout: { constructor: MouseEvent, processParameters: mouseEventMapping },
    focus: { constructor: FocusEvent, processParameters: noBubble },
    focusin: { constructor: FocusEvent, processParameters: onlyBubble },
    blur: { constructor: FocusEvent, processParameters: noBubble },
    cut: { constructor: ClipboardEvent, processParameters: onlyBubble },
    copy: { constructor: ClipboardEvent, processParameters: onlyBubble },
    paste: { constructor: ClipboardEvent, processParameters: onlyBubble },
    keydown: {
        constructor: KeyboardEvent,
        processParameters: keyboardEventBubble,
    },
    keypress: {
        constructor: KeyboardEvent,
        processParameters: keyboardEventBubble,
    },
    keyup: { constructor: KeyboardEvent, processParameters: keyboardEventBubble },
    drag: { constructor: DragEvent, processParameters: onlyBubble },
    dragend: { constructor: DragEvent, processParameters: onlyBubble },
    dragenter: { constructor: DragEvent, processParameters: onlyBubble },
    dragstart: { constructor: DragEvent, processParameters: onlyBubble },
    dragleave: { constructor: DragEvent, processParameters: onlyBubble },
    dragover: { constructor: DragEvent, processParameters: onlyBubble },
    drop: { constructor: DragEvent, processParameters: onlyBubble },
    input: { constructor: InputEvent, processParameters: onlyBubble },
    compositionstart: {
        constructor: CompositionEvent,
        processParameters: onlyBubble,
    },
    compositionend: {
        constructor: CompositionEvent,
        processParameters: onlyBubble,
    },
};

if (typeof TouchEvent === "function") {
    Object.assign(EVENT_TYPES, {
        touchstart: {
            constructor: TouchEvent,
            processParameters: touchEventMapping,
        },
        touchend: { constructor: TouchEvent, processParameters: touchEventMapping },
        touchmove: {
            constructor: TouchEvent,
            processParameters: touchEventMapping,
        },
        touchcancel: {
            constructor: TouchEvent,
            processParameters: touchEventCancelMapping,
        },
    });
}

function _makeEvent(eventType, eventAttrs) {
    let event;
    if (eventType in EVENT_TYPES) {
        const { constructor, processParameters } = EVENT_TYPES[eventType];
        event = new constructor(eventType, processParameters(eventAttrs));
    } else {
        event = new Event(eventType, Object.assign({}, eventAttrs, { bubbles: true }));
    }
    return event;
}

__exports.triggerEvent = triggerEvent; function triggerEvent(el, selector, eventType, eventAttrs = {}, options = {}) {
    const event = _makeEvent(eventType, eventAttrs);
    const target = findElement(el, selector);
    if (!target) {
        throw new Error(`Can't find a target to trigger ${eventType} event`);
    }
    if (!options.skipVisibilityCheck) {
        if (!isVisible(target)) {
            throw new Error(`Called triggerEvent ${eventType} on invisible target`);
        }
    }
    target.dispatchEvent(event);
    if (!options.fast) {
        return nextTick().then(() => event);
    }
    return event;
}

__exports.triggerEvents = triggerEvents; async function triggerEvents(el, querySelector, events, options) {
    for (let e = 0; e < events.length; e++) {
        if (Array.isArray(events[e])) {
            triggerEvent(el, querySelector, events[e][0], events[e][1], options);
        } else {
            triggerEvent(el, querySelector, events[e], {}, options);
        }
    }
    await nextTick();
}

/**
 * Triggers a scroll event on the given target
 *
 * If the target cannot be scrolled or an axis has reached
 * the end of the scrollable area, the event can be transmitted
 * to its nearest parent until it can be triggered
 *
 * @param {HTMLElement} target target of the scroll event
 * @param {Object} coordinates
 * @param {Number} coordinates[left] coordinates to scroll horizontally
 * @param {Number} coordinates[top] coordinates to scroll vertically
 * @param {Boolean} canPropagate states if the scroll can propagate to a scrollable parent
 */
__exports.triggerScroll = triggerScroll; async function triggerScroll(
    target,
    coordinates = { left: null, top: null },
    canPropagate = true
) {
    const isScrollable =
        (target.scrollHeight > target.clientHeight && target.clientHeight > 0) ||
        (target.scrollWidth > target.clientWidth && target.clientWidth > 0);
    if (!isScrollable && !canPropagate) {
        return;
    }
    if (isScrollable) {
        const canScrollFrom = {
            left:
                coordinates.left > target.scrollLeft
                    ? target.scrollLeft + target.clientWidth < target.scrollWidth
                    : target.scrollLeft > 0,
            top:
                coordinates.top > target.scrollTop
                    ? target.scrollTop + target.clientHeight < target.scrollHeight
                    : target.scrollTop > 0,
        };
        const scrollCoordinates = {};
        Object.entries(coordinates).forEach(([key, value]) => {
            if (value !== null && canScrollFrom[key]) {
                scrollCoordinates[key] = value;
                delete coordinates[key];
            }
        });
        target.scrollTo(scrollCoordinates);
        target.dispatchEvent(new UIEvent("scroll"));
        await nextTick();
        if (!canPropagate || !Object.entries(coordinates).length) {
            return;
        }
    }
    target.parentElement
        ? triggerScroll(target.parentElement, coordinates)
        : window.dispatchEvent(new UIEvent("scroll"));
    await nextTick();
}

__exports.click = click; function click(el, selector, skipVisibilityCheck = false) {
    return triggerEvent(
        el,
        selector,
        "click",
        { bubbles: true, cancelable: true },
        { skipVisibilityCheck }
    );
}

__exports.clickCreate = clickCreate; function clickCreate(htmlElement) {
    if (htmlElement.querySelectorAll(".o_form_button_create").length) {
        return click(htmlElement, ".o_form_button_create");
    } else if (htmlElement.querySelectorAll(".o_list_button_create").length) {
        return click(htmlElement, ".o_list_button_create");
    } else {
        throw new Error("No edit button found to be clicked.");
    }
}

__exports.clickEdit = clickEdit; function clickEdit(htmlElement) {
    if (htmlElement.querySelectorAll(".o_list_button_edit").length) {
        return click(htmlElement, ".o_list_button_edit");
    } else {
        throw new Error("No edit button found to be clicked.");
    }
}

__exports.clickSave = clickSave; async function clickSave(htmlElement) {
    if (htmlElement.querySelectorAll(".o_form_status_indicator").length) {
        await mouseEnter(htmlElement, ".o_form_status_indicator");
    }
    if (htmlElement.querySelectorAll(".o_form_button_save").length) {
        return click(htmlElement, ".o_form_button_save");
    } else if (htmlElement.querySelectorAll(".o_list_button_save").length) {
        return click(htmlElement, ".o_list_button_save");
    } else {
        throw new Error("No save button found to be clicked.");
    }
}

__exports.clickDiscard = clickDiscard; async function clickDiscard(htmlElement) {
    if (htmlElement.querySelectorAll(".o_form_status_indicator").length) {
        await mouseEnter(htmlElement, ".o_form_status_indicator");
    }
    if (htmlElement.querySelectorAll(".o_form_button_cancel").length) {
        return click(htmlElement, ".o_form_button_cancel");
    } else if (htmlElement.querySelectorAll(".o_list_button_discard").length) {
        return click(htmlElement, ".o_list_button_discard");
    } else {
        throw new Error("No discard button found to be clicked.");
    }
}

/**
 * Triggers a mouseenter event on the given target. If no
 * coordinates are given, the event is located by default
 * in the middle of the target to simplify the test process
 *
 * @param {HTMLElement} el
 * @param {string} selector
 * @param {Object} coordinates position of the mouseenter event
 */
__exports.mouseEnter = mouseEnter; async function mouseEnter(el, selector, coordinates) {
    const target = el.querySelector(selector) || el;
    const atPos = coordinates || {
        clientX: target.getBoundingClientRect().left + target.getBoundingClientRect().width / 2,
        clientY: target.getBoundingClientRect().top + target.getBoundingClientRect().height / 2,
    };
    return triggerEvent(target, null, "mouseenter", atPos);
}

__exports.editInput = editInput; async function editInput(el, selector, value) {
    const input = findElement(el, selector);
    if (!(input instanceof HTMLInputElement || input instanceof HTMLTextAreaElement)) {
        throw new Error("Only 'input' and 'textarea' elements can be edited with 'editInput'.");
    }
    if (
        !["text", "textarea", "email", "search", "color", "number", "file", "tel"].includes(
            input.type
        )
    ) {
        throw new Error(`Type "${input.type}" not supported by 'editInput'.`);
    }

    const eventOpts = {};
    if (input.type === "file") {
        const files = Array.isArray(value) ? value : [value];
        const dataTransfer = new DataTransfer();
        for (const file of files) {
            if (!(file instanceof File)) {
                throw new Error(`File input value should be one or several File objects.`);
            }
            dataTransfer.items.add(file);
        }
        input.files = dataTransfer.files;
        eventOpts.skipVisibilityCheck = true;
    } else {
        input.value = value;
    }

    await triggerEvents(input, null, ["input", "change"], eventOpts);

    if (input.type === "file") {
        // Need to wait for the file to be loaded by the input
        await nextTick();
        await nextTick();
    }
}

__exports.editSelect = editSelect; function editSelect(el, selector, value) {
    const select = findElement(el, selector);
    if (select.tagName !== "SELECT") {
        throw new Error("Only select tag can be edited with selectInput.");
    }
    select.value = value;
    return triggerEvent(select, null, "change");
}

/**
 * Triggers an hotkey properly disregarding the operating system.
 *
 * @param {string} hotkey
 * @param {boolean} addOverlayModParts
 * @param {KeyboardEventInit} eventAttrs
 * @returns {{ keydownEvent: KeyboardEvent, keyupEvent: KeyboardEvent }}
 */
__exports.triggerHotkey = triggerHotkey; function triggerHotkey(hotkey, addOverlayModParts = false, eventAttrs = {}) {
    eventAttrs.key = hotkey.split("+").pop();

    if (/shift/i.test(hotkey)) {
        eventAttrs.shiftKey = true;
    }

    if (/control/i.test(hotkey)) {
        if (isMacOS()) {
            eventAttrs.metaKey = true;
        } else {
            eventAttrs.ctrlKey = true;
        }
    }

    if (/alt/i.test(hotkey) || addOverlayModParts) {
        if (isMacOS()) {
            eventAttrs.ctrlKey = true;
        } else {
            eventAttrs.altKey = true;
        }
    }

    if (!("bubbles" in eventAttrs)) {
        eventAttrs.bubbles = true;
    }

    const keydownEvent = new KeyboardEvent("keydown", eventAttrs);
    const keyupEvent = new KeyboardEvent("keyup", eventAttrs);
    document.activeElement.dispatchEvent(keydownEvent);
    document.activeElement.dispatchEvent(keyupEvent);
    return { keydownEvent, keyupEvent };
}

__exports.legacyExtraNextTick = legacyExtraNextTick; async function legacyExtraNextTick() {
    return nextTick();
}

__exports.mockDownload = mockDownload; function mockDownload(cb) {
    patchWithCleanup(download, { _download: cb });
}

const hushConsole = __exports.hushConsole = Object.create(null);
for (const propName of Object.keys(window.console)) {
    hushConsole[propName] = () => {};
}

__exports.mockSendBeacon = mockSendBeacon; function mockSendBeacon(mock) {
    patchWithCleanup(navigator, {
        sendBeacon: (url, blob) => {
            return mock(url, blob) !== false;
        },
    });
}

__exports.mockTimeout = mockTimeout; function mockTimeout() {
    const timeouts = new Map();
    let currentTime = 0;
    let id = 1;
    patchWithCleanup(browser, {
        setTimeout(fn, delay = 0) {
            timeouts.set(id, { fn, scheduledFor: delay + currentTime, id });
            return id++;
        },
        clearTimeout(id) {
            timeouts.delete(id);
        },
    });
    return {
        execRegisteredTimeouts() {
            for (const { fn } of timeouts.values()) {
                fn();
            }
            timeouts.clear();
        },
        async advanceTime(duration) {
            // wait here so all microtasktick scheduled in this frame can be
            // executed and possibly register their own timeout
            await nextTick();
            currentTime += duration;
            for (const { fn, scheduledFor, id } of timeouts.values()) {
                if (scheduledFor <= currentTime) {
                    fn();
                    timeouts.delete(id);
                }
            }
            // wait here to make sure owl can update the UI
            await nextTick();
        },
    };
}

__exports.mockAnimationFrame = mockAnimationFrame; function mockAnimationFrame() {
    const callbacks = new Map();
    let id = 1;
    patchWithCleanup(browser, {
        requestAnimationFrame(fn) {
            callbacks.set(id, fn);
            return id++;
        },
        cancelAnimationFrame(id) {
            callbacks.delete(id);
        },
    });
    return function execRegisteredCallbacks() {
        for (const fn of callbacks.values()) {
            fn();
        }
        callbacks.clear();
    };
}

__exports.mount = mount; async function mount(Comp, target, config = {}) {
    let { props, env } = config;
    env = env || {};
    const configuration = {
        env,
        templates,
        test: true,
        props,
    };
    if (env.services && "localization" in env.services) {
        configuration.translateFn = env._t;
    }
    const app = new App(Comp, configuration);
    registerCleanup(() => app.destroy());
    return app.mount(target);
}

__exports.destroy = destroy; function destroy(comp) {
    comp.__owl__.app.destroy();
}

__exports.findChildren = findChildren; function findChildren(comp, predicate = (e) => e) {
    const queue = [];
    [].unshift.apply(queue, Object.values(comp.__owl__.children));

    while (queue.length > 0) {
        const curNode = queue.pop();
        if (predicate(curNode)) {
            return curNode;
        }
        [].unshift.apply(queue, Object.values(curNode.component.__owl__.children));
    }
}

// partial replacement of t-ref on component
__exports.useChild = useChild; function useChild() {
    const node = useComponent().__owl__;
    const setChild = () => {
        const componentNode = Object.values(node.children)[0];
        node.component.child = componentNode.component;
    };
    onMounted(setChild);
    onPatched(setChild);
}

const lifeCycleHooks = [
    "onError",
    "onMounted",
    "onPatched",
    "onRendered",
    "onWillDestroy",
    "onWillPatch",
    "onWillRender",
    "onWillStart",
    "onWillUnmount",
    "onWillUpdateProps",
];
__exports.useLogLifeCycle = useLogLifeCycle; function useLogLifeCycle(logFn, name = "") {
    const component = owl.useComponent();
    let loggedName = `${component.constructor.name}`;
    if (name) {
        loggedName = `${component.constructor.name} ${name}`;
    }
    for (const hook of lifeCycleHooks) {
        owl[hook](() => {
            logFn(`${hook} ${loggedName}`);
        });
    }
}

/**
 * Returns the list of nodes containing n2 (included) that do not contain n1.
 *
 * @param {Node} n1
 * @param {Node} n2
 * @returns {Node[]}
 */
function getDifferentParents(n1, n2) {
    const parents = [n2];
    while (parents[0].parentNode) {
        const parent = parents[0].parentNode;
        if (parent.contains(n1)) {
            break;
        }
        parents.unshift(parent);
    }
    return parents;
}

/**
 * Helper performing a drag and drop sequence.
 *
 * - the 'fromSelector' is used to determine the element on which the drag will
 *  start;
 * - the 'toSelector' will determine the element on which the first one will be
 * dropped.
 *
 * The first element will be dragged by its center, and will be dropped on the
 * bottom-right inner pixel of the target element. This behavior covers both
 * cases of appending the first element to the end of a list (toSelector =
 * target list) or moving it at the position of another element, effectively
 * placing the first element before the second (toSelector = other element).
 *
 * A position can be given to drop the first element above, below, or on the
 * side of the second (default is inside, as specified above).
 *
 * Note that only the last event is awaited, since all the others are
 * considered to be synchronous.
 *
 * @param {Element|string} from
 * @param {Element|string} to
 * @param {string} [position] "top" | "bottom" | "left" | "right"
 * @returns {Promise<void>}
 */
__exports.dragAndDrop = dragAndDrop; async function dragAndDrop(from, to, position) {
    const dropFunction = drag(from, to, position);
    await dropFunction();
}

/**
 * Helper performing a drag.
 *
 * - the 'from' selector is used to determine the element on which the drag will
 *  start;
 * - the 'to' selector will determine the element on which the dragged element will be
 * moved.
 *
 * Returns a drop function
 * @param {Element|string} from
 * @param {Element|string} to
 * @param {string} [position] "top" | "bottom" | "left" | "right"
 * @returns {function: Promise<void>}
 */
__exports.drag = drag; function drag(from, to, position) {
    const fixture = getFixture();
    from = from instanceof Element ? from : fixture.querySelector(from);
    to = to instanceof Element ? to : fixture.querySelector(to);

    // Mouse down on main target
    const fromRect = from.getBoundingClientRect();
    const toRect = to.getBoundingClientRect();
    triggerEvent(from, null, "mousedown", {
        clientX: fromRect.x + fromRect.width / 2,
        clientY: fromRect.y + fromRect.height / 2,
    });

    // Find target position
    const toPos = {
        clientX: toRect.x + toRect.width / 2,
        clientY: toRect.y + toRect.height / 2,
    };
    if (position && typeof position === "object") {
        // x and y coordinates start from the element's initial coordinates
        toPos.clientX += position.x || 0;
        toPos.clientY += position.y || 0;
    } else {
        switch (position) {
            case "top": {
                toPos.clientY = toRect.y - 1;
                break;
            }
            case "bottom": {
                toPos.clientY = toRect.y + toRect.height + 1;
                break;
            }
            case "left": {
                toPos.clientX = toRect.x - 1;
                break;
            }
            case "right": {
                toPos.clientX = toRect.x + toRect.width + 1;
                break;
            }
        }
    }

    // Move, enter and drop the element on the target
    triggerEvent(window, null, "mousemove", toPos);
    // "mouseenter" is fired on every parent of `to` that do not contain
    // `from` (typically: different parent lists).
    for (const target of getDifferentParents(from, to)) {
        triggerEvent(target, null, "mouseenter", toPos);
    }

    return function () {
        return drop(from, toPos);
    };
}

function drop(from, toPos) {
    return triggerEvent(from, null, "mouseup", toPos);
}

__exports.clickDropdown = clickDropdown; async function clickDropdown(target, fieldName) {
    const dropdownInput = target.querySelector(`[name='${fieldName}'] .dropdown input`);
    dropdownInput.focus();
    await nextTick();
    await click(dropdownInput);
}

__exports.clickOpenedDropdownItem = clickOpenedDropdownItem; async function clickOpenedDropdownItem(target, fieldName, itemContent) {
    const dropdowns = target.querySelectorAll(`[name='${fieldName}'] .dropdown .dropdown-menu`);
    if (dropdowns.length === 0) {
        throw new Error(`No dropdown found for field ${fieldName}`);
    } else if (dropdowns.length > 1) {
        throw new Error(`Found ${dropdowns.length} dropdowns for field ${fieldName}`);
    }
    const dropdownItems = dropdowns[0].querySelectorAll("li");
    const indexToClick = Array.from(dropdownItems)
        .map((html) => html.textContent)
        .indexOf(itemContent);
    if (indexToClick === -1) {
        throw new Error(`The element '${itemContent}' does not exist in the dropdown`);
    }
    await click(dropdownItems[indexToClick], null, "click");
}

__exports.selectDropdownItem = selectDropdownItem; async function selectDropdownItem(target, fieldName, itemContent) {
    await clickDropdown(target, fieldName);
    await clickOpenedDropdownItem(target, fieldName, itemContent);
}

__exports.getNodesTextContent = getNodesTextContent; function getNodesTextContent(nodes) {
    return Array.from(nodes).map((n) => n.textContent);
}

/**
 * Click to open the dropdown on a many2one
 */
__exports.clickOpenM2ODropdown = clickOpenM2ODropdown; async function clickOpenM2ODropdown(el, fieldName, selector) {
    const m2oSelector = `${selector || ""} .o_field_many2one[name=${fieldName}] input`;
    const matches = el.querySelectorAll(m2oSelector);
    if (matches.length !== 1) {
        throw new Error(
            `cannot open m2o: selector ${selector} has been found ${matches.length} instead of 1`
        );
    }

    await click(matches[0]);
    return matches[0];
}

/**
 * Click on the active (highlighted) selection in a m2o dropdown.
 */
// TO FIX
__exports.clickM2OHighlightedItem = clickM2OHighlightedItem; async function clickM2OHighlightedItem(el, fieldName, selector) {
    const m2oSelector = `${selector || ""} .o_field_many2one[name=${fieldName}] input`;
    // const $dropdown = $(m2oSelector).autocomplete('widget');
    const matches = el.querySelectorAll(m2oSelector);
    if (matches.length !== 1) {
        throw new Error(
            `cannot open m2o: selector ${selector} has been found ${matches.length} instead of 1`
        );
    }
    // clicking on an li (no matter which one), will select the focussed one
    return click(matches[0].parentElement.querySelector("li"));
}

// X2Many
__exports.addRow = addRow; async function addRow(target, selector) {
    await click(target.querySelector(`${selector ? selector : ""} .o_field_x2many_list_row_add a`));
}

__exports.removeRow = removeRow; async function removeRow(target, index) {
    await click(target.querySelectorAll(".o_list_record_remove")[index]);
}

return __exports;
});
;

/*****************************************
*  Filepath: /web/static/tests/utils.js  *
*  Lines: 662                            *
*****************************************/
odoo.define('@web/../tests/utils', async function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { isVisible } = require("@web/core/utils/ui");
const { registerCleanup } = require("@web/../tests/helpers/cleanup");
const {
    click: webClick,
    getFixture,
    makeDeferred,
    triggerEvents: webTriggerEvents,
} = require("@web/../tests/helpers/utils");

/**
 * Create a file object, which can be used for drag-and-drop.
 *
 * @param {Object} data
 * @param {string} data.name
 * @param {string} data.content
 * @param {string} data.contentType
 * @returns {Promise<Object>} resolved with file created
 */
__exports.createFile = createFile; function createFile(data) {
    // Note: this is only supported by Chrome, and does not work in Incognito mode
    return new Promise(function (resolve, reject) {
        var requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
        if (!requestFileSystem) {
            throw new Error("FileSystem API is not supported");
        }
        requestFileSystem(window.TEMPORARY, 1024 * 1024, function (fileSystem) {
            fileSystem.root.getFile(data.name, { create: true }, function (fileEntry) {
                fileEntry.createWriter(function (fileWriter) {
                    fileWriter.onwriteend = function (e) {
                        fileSystem.root.getFile(data.name, {}, function (fileEntry) {
                            fileEntry.file(function (file) {
                                resolve(file);
                            });
                        });
                    };
                    fileWriter.write(new Blob([data.content], { type: data.contentType }));
                });
            });
        });
    });
}

/**
 * Create a fake object 'dataTransfer', linked to some files,
 * which is passed to drag and drop events.
 *
 * @param {Object[]} files
 * @returns {Object}
 */
function createFakeDataTransfer(files) {
    return {
        dropEffect: "all",
        effectAllowed: "all",
        files,
        items: [],
        types: ["Files"],
    };
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then clicks on it.
 *
 * @param {string} selector
 * @param {ContainsOptions} [options] forwarded to `contains`
 * @param {boolean} [options.shiftKey]
 */
__exports.click = click; async function click(selector, options = {}) {
    const { shiftKey } = options;
    delete options.shiftKey;
    await contains(selector, { click: { shiftKey }, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then dragenters `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.dragenterFiles = dragenterFiles; async function dragenterFiles(selector, files, options) {
    await contains(selector, { dragenterFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then dragovers `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.dragoverFiles = dragoverFiles; async function dragoverFiles(selector, files, options) {
    await contains(selector, { dragoverFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then drops `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.dropFiles = dropFiles; async function dropFiles(selector, files, options) {
    await contains(selector, { dropFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then inputs `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.inputFiles = inputFiles; async function inputFiles(selector, files, options) {
    await contains(selector, { inputFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then pastes `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.pasteFiles = pasteFiles; async function pasteFiles(selector, files, options) {
    await contains(selector, { pasteFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then focuses on it.
 *
 * @param {string} selector
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.focus = focus; async function focus(selector, options) {
    await contains(selector, { setFocus: true, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then inserts the given `content`.
 *
 * @param {string} selector
 * @param {string} content
 * @param {ContainsOptions} [options] forwarded to `contains`
 * @param {boolean} [options.replace=false]
 */
__exports.insertText = insertText; async function insertText(selector, content, options = {}) {
    const { replace = false } = options;
    delete options.replace;
    await contains(selector, { ...options, insertText: { content, replace } });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then sets its `scrollTop` to the given value.
 *
 * @param {string} selector
 * @param {number|"bottom"} scrollTop
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.scroll = scroll; async function scroll(selector, scrollTop, options) {
    await contains(selector, { setScroll: scrollTop, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then triggers `event` on it.
 *
 * @param {string} selector
 * @param {(import("@web/../tests/helpers/utils").EventType|[import("@web/../tests/helpers/utils").EventType, EventInit])[]} events
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.triggerEvents = triggerEvents; async function triggerEvents(selector, events, options) {
    await contains(selector, { triggerEvents: events, ...options });
}

function log(ok, message) {
    if (window.QUnit) {
        QUnit.assert.ok(ok, message);
    } else {
        if (ok) {
            console.log(message);
        } else {
            console.error(message);
        }
    }
}

let hasUsedContainsPositively = false;
if (window.QUnit) {
    QUnit.testStart(() => (hasUsedContainsPositively = false));
}
/**
 * @typedef {[string, ContainsOptions]} ContainsTuple tuple representing params of the contains
 *  function, where the first element is the selector, and the second element is the options param.
 * @typedef {Object} ContainsOptions
 * @property {ContainsTuple} [after] if provided, the found element(s) must be after the element
 *  matched by this param.
 * @property {ContainsTuple} [before] if provided, the found element(s) must be before the element
 *  matched by this param.
 * @property {Object} [click] if provided, clicks on the first found element
 * @property {ContainsTuple|ContainsTuple[]} [contains] if provided, the found element(s) must
 *  contain the provided sub-elements.
 * @property {number} [count=1] numbers of elements to be found to declare the contains check
 *  as successful. Elements are counted after applying all other filters.
 * @property {Object[]} [dragenterFiles] if provided, dragenters the given files on the found element
 * @property {Object[]} [dragoverFiles] if provided, dragovers the given files on the found element
 * @property {Object[]} [dropFiles] if provided, drops the given files on the found element
 * @property {Object[]} [inputFiles] if provided, inputs the given files on the found element
 * @property {{content:string, replace:boolean}} [insertText] if provided, adds to (or replace) the
 *  value of the first found element by the given content.
 * @property {ContainsTuple} [parent] if provided, the found element(s) must have as
 *  parent the node matching the parent parameter.
 * @property {Object[]} [pasteFiles] if provided, pastes the given files on the found element
 * @property {number|"bottom"} [scroll] if provided, the scrollTop of the found element(s)
 *  must match.
 *  Note: when using one of the scrollTop options, it is advised to ensure the height is not going
 *  to change soon, by checking with a preceding contains that all the expected elements are in DOM.
 * @property {boolean} [setFocus] if provided, focuses the first found element.
 * @property {number|"bottom"} [setScroll] if provided, sets the scrollTop on the first found
 *  element.
 * @property {HTMLElement} [target=getFixture()]
 * @property {string[]} [triggerEvents] if provided, triggers the given events on the found element
 * @property {string} [text] if provided, the textContent of the found element(s) or one of their
 *  descendants must match. Use `textContent` option for a match on the found element(s) only.
 * @property {string} [textContent] if provided, the textContent of the found element(s) must match.
 *  Prefer `text` option for a match on the found element(s) or any of their descendants, usually
 *  allowing for a simpler and less specific selector.
 * @property {string} [value] if provided, the input value of the found element(s) must match.
 *  Note: value changes are not observed directly, another mutation must happen to catch them.
 * @property {boolean} [visible] if provided, the found element(s) must be (in)visible
 */
class Contains {
    /**
     * @param {string} selector
     * @param {ContainsOptions} [options={}]
     */
    constructor(selector, options = {}) {
        this.selector = selector;
        this.options = options;
        this.options.count = this.options.count === undefined ? 1 : this.options.count;
        this.options.targetParam = this.options.target;
        this.options.target =
            this.options.target === undefined ? getFixture() : this.options.target;
        let selectorMessage = `${this.options.count} of "${this.selector}"`;
        if (this.options.visible !== undefined) {
            selectorMessage = `${selectorMessage} ${
                this.options.visible ? "visible" : "invisible"
            }`;
        }
        if (this.options.targetParam) {
            selectorMessage = `${selectorMessage} inside a specific target`;
        }
        if (this.options.parent) {
            selectorMessage = `${selectorMessage} inside a specific parent`;
        }
        if (this.options.contains) {
            selectorMessage = `${selectorMessage} with a specified sub-contains`;
        }
        if (this.options.text !== undefined) {
            selectorMessage = `${selectorMessage} with text "${this.options.text}"`;
        }
        if (this.options.textContent !== undefined) {
            selectorMessage = `${selectorMessage} with textContent "${this.options.textContent}"`;
        }
        if (this.options.value !== undefined) {
            selectorMessage = `${selectorMessage} with value "${this.options.value}"`;
        }
        if (this.options.scroll !== undefined) {
            selectorMessage = `${selectorMessage} with scroll "${this.options.scroll}"`;
        }
        if (this.options.after !== undefined) {
            selectorMessage = `${selectorMessage} after a specified element`;
        }
        if (this.options.before !== undefined) {
            selectorMessage = `${selectorMessage} before a specified element`;
        }
        this.selectorMessage = selectorMessage;
        if (this.options.contains && !Array.isArray(this.options.contains[0])) {
            this.options.contains = [this.options.contains];
        }
        if (this.options.count) {
            hasUsedContainsPositively = true;
        } else if (!hasUsedContainsPositively) {
            throw new Error(
                `Starting a test with "contains" of count 0 for selector "${this.selector}" is useless because it might immediately resolve. Start the test by checking that an expected element actually exists.`
            );
        }
        /** @type {string} */
        this.successMessage = undefined;
        /** @type {function} */
        this.executeError = undefined;
    }

    /**
     * Starts this contains check, either immediately resolving if there is a
     * match, or registering appropriate listeners and waiting until there is a
     * match or a timeout (resolving or rejecting respectively).
     *
     * Success or failure messages will be logged with QUnit as well.
     *
     * @returns {Promise}
     */
    run() {
        this.done = false;
        this.def = makeDeferred();
        this.scrollListeners = new Set();
        this.onScroll = () => this.runOnce("after scroll");
        if (!this.runOnce("immediately")) {
            this.timer = setTimeout(
                () => this.runOnce("Timeout of 5 seconds", { crashOnFail: true }),
                5000
            );
            this.observer = new MutationObserver((mutations) => {
                try {
                    this.runOnce("after mutations");
                } catch (e) {
                    this.def.reject(e); // prevents infinite loop in case of programming error
                }
            });
            this.observer.observe(document.body, {
                attributes: true,
                childList: true,
                subtree: true,
            });
            registerCleanup(() => {
                if (!this.done) {
                    this.runOnce("Test ended", { crashOnFail: true });
                }
            });
        }
        return this.def;
    }

    /**
     * Runs this contains check once, immediately returning the result (or
     * undefined), and possibly resolving or rejecting the main promise
     * (and printing QUnit log) depending on options.
     * If undefined is returned it means the check was not successful.
     *
     * @param {string} whenMessage
     * @param {Object} [options={}]
     * @param {boolean} [options.crashOnFail=false]
     * @param {boolean} [options.executeOnSuccess=true]
     * @returns {HTMLElement[]|undefined}
     */
    runOnce(whenMessage, { crashOnFail = false, executeOnSuccess = true } = {}) {
        const res = this.select();
        if ((res && res.length === this.options.count) || crashOnFail) {
            // clean before doing anything else to avoid infinite loop due to side effects
            if (this.observer) {
                this.observer.disconnect();
            }
            clearTimeout(this.timer);
            for (const el of this.scrollListeners || []) {
                el.removeEventListener("scroll", this.onScroll);
            }
            this.done = true;
        }
        if (res && res.length === this.options.count) {
            this.successMessage = `Found ${this.selectorMessage} (${whenMessage})`;
            if (executeOnSuccess) {
                this.executeAction(res[0]);
            }
            return res;
        } else {
            this.executeError = () => {
                let message = `Failed to find ${this.selectorMessage} (${whenMessage}).`;
                message = res
                    ? `${message} Found ${res.length} instead.`
                    : `${message} Parent not found.`;
                if (this.parentContains) {
                    if (this.parentContains.successMessage) {
                        log(true, this.parentContains.successMessage);
                    } else {
                        this.parentContains.executeError();
                    }
                }
                log(false, message);
                if (this.def) {
                    this.def.reject(new Error(message));
                }
                for (const childContains of this.childrenContains || []) {
                    if (childContains.successMessage) {
                        log(true, childContains.successMessage);
                    } else {
                        childContains.executeError();
                    }
                }
            };
            if (crashOnFail) {
                this.executeError();
            }
        }
    }

    /**
         * Executes the action(s) given to this constructor on the found element,
         * prints the success messages, and resolves the main deferred.
         
         * @param {HTMLElement} el
         */
    executeAction(el) {
        let message = this.successMessage;
        if (this.options.click) {
            message = `${message} and clicked it`;
            webClick(el, undefined, {
                mouseEventInit: this.options.click,
                skipDisabledCheck: true,
                skipVisibilityCheck: true,
            });
        }
        if (this.options.dragenterFiles) {
            message = `${message} and dragentered ${this.options.dragenterFiles.length} file(s)`;
            const ev = new Event("dragenter", { bubbles: true });
            Object.defineProperty(ev, "dataTransfer", {
                value: createFakeDataTransfer(this.options.dragenterFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.dragoverFiles) {
            message = `${message} and dragovered ${this.options.dragoverFiles.length} file(s)`;
            const ev = new Event("dragover", { bubbles: true });
            Object.defineProperty(ev, "dataTransfer", {
                value: createFakeDataTransfer(this.options.dragoverFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.dropFiles) {
            message = `${message} and dropped ${this.options.dropFiles.length} file(s)`;
            const ev = new Event("drop", { bubbles: true });
            Object.defineProperty(ev, "dataTransfer", {
                value: createFakeDataTransfer(this.options.dropFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.inputFiles) {
            message = `${message} and inputted ${this.options.inputFiles.length} file(s)`;
            // could not use _createFakeDataTransfer as el.files assignation will only
            // work with a real FileList object.
            const dataTransfer = new window.DataTransfer();
            for (const file of this.options.inputFiles) {
                dataTransfer.items.add(file);
            }
            el.files = dataTransfer.files;
            /**
             * Changing files programatically is not supposed to trigger the event but
             * it does in Chrome versions before 73 (which is on runbot), so in that
             * case there is no need to make a manual dispatch, because it would lead to
             * the files being added twice.
             */
            const versionRaw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
            const chromeVersion = versionRaw ? parseInt(versionRaw[2], 10) : false;
            if (!chromeVersion || chromeVersion >= 73) {
                el.dispatchEvent(new Event("change"));
            }
        }
        if (this.options.insertText !== undefined) {
            message = `${message} and inserted text "${this.options.insertText.content}" (replace: ${this.options.insertText.replace})`;
            el.focus();
            if (this.options.insertText.replace) {
                el.value = "";
                el.dispatchEvent(new window.KeyboardEvent("keydown", { key: "Backspace" }));
                el.dispatchEvent(new window.KeyboardEvent("keyup", { key: "Backspace" }));
                el.dispatchEvent(new window.InputEvent("input"));
            }
            for (const char of this.options.insertText.content) {
                el.value += char;
                el.dispatchEvent(new window.KeyboardEvent("keydown", { key: char }));
                el.dispatchEvent(new window.KeyboardEvent("keyup", { key: char }));
                el.dispatchEvent(new window.InputEvent("input"));
            }
        }
        if (this.options.pasteFiles) {
            message = `${message} and pasted ${this.options.pasteFiles.length} file(s)`;
            const ev = new Event("paste", { bubbles: true });
            Object.defineProperty(ev, "clipboardData", {
                value: createFakeDataTransfer(this.options.pasteFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.setFocus) {
            message = `${message} and focused it`;
            el.focus();
        }
        if (this.options.setScroll !== undefined) {
            message = `${message} and set scroll to "${this.options.setScroll}"`;
            el.scrollTop =
                this.options.setScroll === "bottom" ? el.scrollHeight : this.options.setScroll;
        }
        if (this.options.triggerEvents) {
            message = `${message} and triggered "${this.options.triggerEvents.join(", ")}" events`;
            webTriggerEvents(el, null, this.options.triggerEvents, {
                skipVisibilityCheck: true,
            });
        }
        if (this.parentContains) {
            log(true, this.parentContains.successMessage);
        }
        log(true, message);
        for (const childContains of this.childrenContains) {
            log(true, childContains.successMessage);
        }
        if (this.def) {
            this.def.resolve();
        }
    }

    /**
     * Returns the found element(s) according to this constructor setup.
     * If undefined is returned it means the parent cannot be found
     *
     * @returns {HTMLElement[]|undefined}
     */
    select() {
        const target = this.selectParent();
        if (!target) {
            return;
        }
        const baseRes = [...target.querySelectorAll(this.selector)];
        /** @type {Contains[]} */
        this.childrenContains = [];
        const res = baseRes.filter((el, currentIndex) => {
            let condition =
                (this.options.textContent === undefined ||
                    el.textContent.trim() === this.options.textContent) &&
                (this.options.value === undefined || el.value === this.options.value) &&
                (this.options.scroll === undefined ||
                    (this.options.scroll === "bottom"
                        ? Math.abs(el.scrollHeight - el.clientHeight - el.scrollTop) <= 1
                        : Math.abs(el.scrollTop - this.options.scroll) <= 1));
            if (condition && this.options.text !== undefined) {
                if (
                    el.textContent.trim() !== this.options.text &&
                    [...el.querySelectorAll("*")].every(
                        (el) => el.textContent.trim() !== this.options.text
                    )
                ) {
                    condition = false;
                }
            }
            if (condition && this.options.contains) {
                for (const param of this.options.contains) {
                    const childContains = new Contains(param[0], {
                        ...param[1],
                        target: el,
                    });
                    if (
                        !childContains.runOnce(`as child of el ${currentIndex + 1})`, {
                            executeOnSuccess: false,
                        })
                    ) {
                        condition = false;
                    }
                    this.childrenContains.push(childContains);
                }
            }
            if (condition && this.options.visible !== undefined) {
                if (isVisible(el) !== this.options.visible) {
                    condition = false;
                }
            }
            if (condition && this.options.after) {
                const afterContains = new Contains(this.options.after[0], {
                    ...this.options.after[1],
                    target,
                });
                const afterEl = afterContains.runOnce(`as "after"`, {
                    executeOnSuccess: false,
                });
                if (
                    !afterEl ||
                    !afterEl[0] ||
                    !(el.compareDocumentPosition(afterEl[0]) & Node.DOCUMENT_POSITION_PRECEDING)
                ) {
                    condition = false;
                }
                this.childrenContains.push(afterContains);
            }
            if (condition && this.options.before) {
                const beforeContains = new Contains(this.options.before[0], {
                    ...this.options.before[1],
                    target,
                });
                const beforeEl = beforeContains.runOnce(`as "before"`, {
                    executeOnSuccess: false,
                });
                if (
                    !beforeEl ||
                    !beforeEl[0] ||
                    !(el.compareDocumentPosition(beforeEl[0]) & Node.DOCUMENT_POSITION_FOLLOWING)
                ) {
                    condition = false;
                }
                this.childrenContains.push(beforeContains);
            }
            return condition;
        });
        if (
            this.options.scroll !== undefined &&
            this.scrollListeners &&
            baseRes.length === this.options.count &&
            res.length !== this.options.count
        ) {
            for (const el of baseRes) {
                if (!this.scrollListeners.has(el)) {
                    this.scrollListeners.add(el);
                    el.addEventListener("scroll", this.onScroll);
                }
            }
        }
        return res;
    }

    /**
     * Returns the found element that should act as the target (parent) for the
     * main selector.
     * If undefined is returned it means the parent cannot be found.
     *
     * @returns {HTMLElement|undefined}
     */
    selectParent() {
        if (this.options.parent) {
            this.parentContains = new Contains(this.options.parent[0], {
                ...this.options.parent[1],
                target: this.options.target,
            });
            const res = this.parentContains.runOnce(`as parent`, {
                executeOnSuccess: false,
            });
            return res && res[0];
        }
        return this.options.target;
    }
}

/**
 * Waits until `count` elements matching the given `selector` are present in
 * `options.target`.
 *
 * @param {string} selector
 * @param {ContainsOptions} [options]
 * @returns {Promise}
 */
__exports.contains = contains; async function contains(selector, options) {
    await new Contains(selector, options).run();
}

return __exports;
});
;

/**************************************************************
*  Filepath: /mail/static/tests/tours/discuss_public_tour.js  *
*  Lines: 36                                                  *
**************************************************************/
odoo.define('@mail/../tests/tours/discuss_public_tour', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

tour.register('mail/static/tests/tours/discuss_public_tour.js', {
    test: true,
}, [{
    trigger: '.o_DiscussPublicView',
    extraTrigger: '.o_ThreadView',
}, {
    content: "Check that we are on channel page",
    trigger: '.o_ThreadView',
    run() {
        if (!window.location.pathname.startsWith('/discuss/channel')) {
            console.error('Did not automatically redirect to channel page');
        }
        // Wait for modules to be loaded or failed for the next step
        odoo.__DEBUG__.didLogInfo.then(() => {
            const { missing, failed, unloaded } = odoo.__DEBUG__.jsModules;
            if ([missing, failed, unloaded].some(arr => arr.length)) {
                console.error("Couldn't load all JS modules.", JSON.stringify({ missing, failed, unloaded }));
            }
            document.body.classList.add('o_mail_channel_public_modules_loaded');
        });
    },
    extraTrigger: '.o_mail_channel_public_modules_loaded',
}, {
    content: "Wait for all modules loaded check in previous step",
    trigger: '.o_mail_channel_public_modules_loaded',
}]);

return __exports;
});
;

/*********************************************************************
*  Filepath: /mail/static/tests/tours/mail_channel_as_guest_tour.js  *
*  Lines: 37                                                         *
*********************************************************************/
odoo.define('@mail/../tests/tours/mail_channel_as_guest_tour', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

tour.register('mail/static/tests/tours/mail_channel_as_guest_tour.js', {
    test: true,
}, [{
    content: "Click join",
    trigger: '.o_WelcomeView_joinButton',
    extraTrigger: '.o_ThreadView',
}, {
    content: "Check that we are on channel page",
    trigger: '.o_ThreadView',
    run() {
        if (!window.location.pathname.startsWith('/discuss/channel')) {
            console.error('Clicking on join button did not redirect to channel page');
        }
        // Wait for modules to be loaded or failed for the next step
        odoo.__DEBUG__.didLogInfo.then(() => {
            const { missing, failed, unloaded } = odoo.__DEBUG__.jsModules;
            if ([missing, failed, unloaded].some(arr => arr.length)) {
                console.error("Couldn't load all JS modules.", JSON.stringify({ missing, failed, unloaded }));
            }
            document.body.classList.add('o_mail_channel_as_guest_tour_modules_loaded');
        });
    },
    extraTrigger: '.o_mail_channel_as_guest_tour_modules_loaded',
}, {
    content: "Wait for all modules loaded check in previous step",
    trigger: '.o_mail_channel_as_guest_tour_modules_loaded',
}]);

return __exports;
});
;

/***********************************************************************
*  Filepath: /mail/static/tests/tours/mail_full_composer_test_tour.js  *
*  Lines: 103                                                          *
***********************************************************************/
odoo.define('@mail/../tests/tours/mail_full_composer_test_tour', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const {
    createFile,
    inputFiles,
} = require('web.test_utils_file');
const { contains } = require('@web/../tests/utils');

const tour = require('web_tour.tour');

/**
 * This tour depends on data created by python test in charge of launching it.
 * It is not intended to work when launched from interface. It is needed to test
 * an action (action manager) which is not possible to test with QUnit.
 * @see mail/tests/test_mail_full_composer.py
 */
tour.register('mail/static/tests/tours/mail_full_composer_test_tour.js', {
    test: true,
}, [{
    content: "Wait for the chatter to be fully loaded",
    trigger: ".o_Chatter",
    async run() {
        await contains(".o_Message", { count: 1 });
        document.body.setAttribute("data-found-message", 1);
    },
}, {
    content: "Click on Send Message",
    trigger: '.o_ChatterTopbar_buttonSendMessage',
    extra_trigger: 'body[data-found-message=1]',
}, {
    content: "Write something in composer",
    trigger: '.o_ComposerTextInput_textarea',
    run: 'text blahblah',
}, {
    content: "Add one file in composer",
    trigger: '.o_Composer_buttonAttachment',
    async run() {
        const file = await createFile({
            content: 'hello, world',
            contentType: 'text/plain',
            name: 'text.txt',
        });
        const messaging = await odoo.__DEBUG__.messaging;
        const uploader = messaging.models['ComposerView'].all()[0].fileUploader;
        inputFiles(
            uploader.fileInput,
            [file]
        );
    },
}, {
    content: "Open full composer",
    trigger: '.o_Composer_buttonFullComposer',
    extra_trigger: '.o_AttachmentCard:not(.o-isUploading)' // waiting the attachment to be uploaded
}, {
    content: "Check the earlier provided attachment is listed",
    trigger: '.o_AttachmentCard[title="text.txt"]',
    run() {},
}, {
    content: "Check subject is autofilled",
    trigger: '[name="subject"] input',
    run() {
        const subjectValue = document.querySelector('[name="subject"] input').value;
        if (subjectValue !== "Re: Jane") {
            console.error(
                `Full composer should have "Re: Jane" in subject input (actual: ${subjectValue})`
            );
        }
    },
}, {
    content: "Check composer content is kept",
    trigger: '.o_field_html[name="body"]',
    run() {
        const bodyContent = document.querySelector('.o_field_html[name="body"]').textContent;
        if (!bodyContent.includes("blahblah")) {
            console.error(
                `Full composer should contain text from small composer ("blahblah") in body input (actual: ${bodyContent})`
            );
        }
    },
}, {
    content: "Open templates",
    trigger: '.o_field_widget[name="template_id"] input',
}, {
    content: "Check a template is listed",
    in_modal: false,
    trigger: '.ui-autocomplete .ui-menu-item a:contains("Test template")',
    run() {},
}, {
    content: "Send message",
    trigger: '.o_mail_send',
}, {
    content: "Check message is shown",
    trigger: '.o_Message:contains("blahblah")',
}, {
    content: "Check message contains the attachment",
    trigger: '.o_Message .o_AttachmentCard_filename:contains("text.txt")',
}]);

return __exports;
});
;

/***********************************************************************
*  Filepath: /mail/static/tests/tours/user_modify_own_profile_tour.js  *
*  Lines: 32                                                           *
***********************************************************************/
odoo.define('@mail/../tests/tours/user_modify_own_profile_tour', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

/**
 * Verify that a user can modify their own profile information.
 */
tour.register('mail/static/tests/tours/user_modify_own_profile_tour.js', {
    test: true,
}, [{
    content: 'Open user account menu',
    trigger: '.o_user_menu button',
}, {
    content: "Open preferences / profile screen",
    trigger: '[data-menu=settings]',
}, {
    content: "Update the email address",
    trigger: 'div[name="email"] input',
    run: 'text updatedemail@example.com',
}, {
    content: "Save the form",
    trigger: 'button[name="preference_save"]',
}, {
    content: "Wait until the modal is closed",
    trigger: 'body:not(.modal-open)',
}]);

return __exports;
});
;

/***************************************************
*  Filepath: /portal/static/tests/tours/portal.js  *
*  Lines: 22                                       *
***************************************************/
odoo.define('portal.tour', function (require) {
'use strict';

var tour = require("web_tour.tour");

tour.register('portal_load_homepage', {
    test: true,
    url: '/my',
},
    [
        {
            content: "Check portal is loaded",
            trigger: 'a[href*="/my/account"]:contains("Edit"):first',
        },
        {
            content: "Load my account details",
            trigger: 'input[value="Joel Willis"]'
        }
    ]
);

});
;

/******************************************************************************
*  Filepath: /website/static/tests/tour_utils/widget_lifecycle_dep_widget.js  *
*  Lines: 44                                                                  *
******************************************************************************/
odoo.define('@website/../tests/tour_utils/widget_lifecycle_dep_widget', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const { browser } = require("@web/core/browser/browser");
const localStorage = browser.localStorage;

const publicWidget = require("web.public.widget");

const localStorageKey = 'widgetAndWysiwygLifecycle';
if (!localStorage.getItem(localStorageKey)) {
    localStorage.setItem(localStorageKey, '[]');
}

__exports.addLifecycleStep = addLifecycleStep; function addLifecycleStep(step) {
    const oldValue = localStorage.getItem(localStorageKey);
    const newValue = JSON.stringify(JSON.parse(oldValue).concat(step));
    localStorage.setItem(localStorageKey, newValue);
}

publicWidget.registry.CountdownPatch = publicWidget.Widget.extend({
    selector: ".s_countdown",
    disabledInEditableMode: false,

    /**
     * @override
     */
    async start() {
        addLifecycleStep('widgetStart');
        await this._super(...arguments);
        this.el.classList.add("public_widget_started");
    },
    /**
     * @override
     */
    destroy() {
        this.el.classList.remove("public_widget_started");
        addLifecycleStep('widgetStop');
        this._super(...arguments);
    },
});

return __exports;
});
;

/**************************************************************
*  Filepath: /website/static/tests/tours/automatic_editor.js  *
*  Lines: 99                                                  *
**************************************************************/
odoo.define('website.tour.automatic_editor', function (require) {
'use strict';

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour('automatic_editor_on_new_website', {
    test: true,
    url: '/',
},
[
    {
        content: "Select the language dropdown",
        trigger: 'iframe .js_language_selector .dropdown-toggle'
    },
    {
        content: "click on Add a language",
        trigger: 'iframe a.o_add_language',
    },
    {
        content: "type Parseltongue",
        trigger: 'div[name="lang_ids"] .o_input_dropdown input',
        run: 'text Parseltongue',
    },
    {
        content: 'select Parseltongue',
        trigger: '.dropdown-item:contains(Parseltongue)',
        in_modal: false,
    },
    {
        content: "load parseltongue",
        extra_trigger: '.modal div[name="lang_ids"] .rounded-pill .o_tag_badge_text:contains(Parseltongue)',
        trigger: '.modal-footer button[name=lang_install]',
    },
    {
        content: "Select the language dropdown",
        trigger: 'iframe .js_language_selector .dropdown-toggle',
    },
    {
        content: "Select parseltongue",
        trigger: 'iframe a.js_change_lang[data-url_code=pa_GB]',
        extra_trigger: 'iframe a.js_change_lang .o_lang_flag',
    },
    {
        content: "Check that we're on parseltongue and then go to settings",
        trigger: 'iframe html[lang=pa-GB]',
        run: () => {
            // Now go through the settings for a new website. A frontend_lang
            // cookie was set during previous steps. It should not be used when
            // redirecting to the frontend in the following steps.
            window.location.href = '/web#action=website.action_website_configuration';
        }
    },
    {
        content: "create a new website",
        trigger: 'button[name="action_website_create_new"]',
    },
    {
        content: "insert website name",
        trigger: 'div[name="name"] input',
        run: 'text Website EN'
    },
    {
        content: "validate the website creation modal",
        trigger: 'button.btn-primary'
    },
    {
        content: "skip configurator",
        // This trigger targets the skip button, it doesn't have a more
        // explicit class or ID.
        trigger: '.o_configurator_container .container-fluid .btn.btn-link'
    },
    {
        content: "make hover button appear",
        trigger: '.o_theme_preview',
        run: () => {
            $('.o_theme_preview .o_button_area').attr('style', 'visibility: visible; opacity: 1;');
        },
    },
    {
        content: "Install a theme",
        trigger: 'button[name="button_choose_theme"]'
    },
    {
        content: "Check that the editor is loaded",
        trigger: 'iframe body.editor_enable',
        timeout: 30000,
        run: () => null, // it's a check
    },
    {
        content: "exit edit mode",
        trigger: '.o_we_website_top_actions button.btn-primary:contains("Save")',
    },
    {
        content: "wait for editor to close",
        trigger: 'iframe body:not(.editor_enable)',
        run: () => null, // It's a check
    }
]);
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/carousel_content_removal.js  *
*  Lines: 102                                                         *
**********************************************************************/
odoo.define('@website/../tests/tours/carousel_content_removal', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

const carouselInnerSelector = "iframe .carousel-inner";

wTourUtils.registerWebsitePreviewTour("carousel_content_removal", {
    test: true,
    url: '/',
    edition: true,
}, [{
    trigger: "#snippet_structure .oe_snippet:has(span:contains('Carousel')) .oe_snippet_thumbnail",
    content: "Drag the Carousel block and drop it in your page.",
    run: "drag_and_drop iframe #wrap",
},
{
    trigger: "iframe .carousel .carousel-item.active .carousel-content",
    content: "Select the active carousel item.",
}, {
    trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    content: "Remove the active carousel item.",
},
{
    trigger: "iframe .carousel .carousel-item.active .container:not(:has(*))",
    content: "Check for a carousel slide with an empty container tag",
    run: function () {},
}]);

wTourUtils.registerWebsitePreviewTour("snippet_carousel", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({id: "s_carousel", name: "Carousel"}),
    wTourUtils.clickOnSnippet(".carousel .carousel-item.active"),
    // Slide to the right.
    wTourUtils.changeOption("CarouselItem", 'we-button[data-switch-to-slide="right"]'),
    {
        content: "Check if the second slide is active",
        trigger: `${carouselInnerSelector} > div.active:nth-child(2)`,
        run: () => {}, // This is a check.
    },
    // Add a slide (with the "CarouselItem" option).
    wTourUtils.changeOption("CarouselItem", "we-button[data-add-slide-item]"),
    {
        content: "Check if there are four slides and if the third one is active",
        trigger: `${carouselInnerSelector}:has(div:nth-child(4)) > div.active:nth-child(3)`,
        run: () => {}, // This is a check.
    },
     // Remove a slide.
     wTourUtils.changeOption("CarouselItem", "we-button[data-remove-slide]"),
    {
        content: "Check if there are three slides and if the second one is active",
        trigger: `${carouselInnerSelector}:has(div:nth-child(3)) > div.active:nth-child(2)`,
        run: () => {}, // This is a check.
    }, {
        trigger: "iframe .carousel .carousel-control-prev",
        content: "Slide the carousel to the left with the arrows.",
    }, {
        content: "Check if the first slide is active",
        trigger: `${carouselInnerSelector} > div.active:nth-child(1)`,
        run: () => {}, // This is a check.
    },
    // Add a slide (with the "Carousel" option).
    wTourUtils.changeOption("Carousel", "we-button[data-add-slide]"),
    {
        content: "Check if there are four slides and if the second one is active",
        trigger: `${carouselInnerSelector}:has(div:nth-child(4)) > div.active:nth-child(2)`,
        run: () => {}, // This is a check.
    }, {
        content: "Check if the slide indicator was correctly updated",
        trigger: "we-customizeblock-options span:contains(' (2/4)')",
        run: () => {},
    },
    // Check if we can still remove a slide.
    wTourUtils.changeOption("CarouselItem", "we-button[data-remove-slide]"),
    {
        content: "Check if there are three slides and if the first one is active",
        trigger: `${carouselInnerSelector}:has(div:nth-child(3)) > div.active:nth-child(1)`,
        run: () => {}, // This is a check.
    },
    // Slide to the left.
    wTourUtils.changeOption("CarouselItem", 'we-button[data-switch-to-slide="left"]'),
    {
        content: "Check if the third slide is active",
        trigger: `${carouselInnerSelector} > div.active:nth-child(3)`,
        run: () => {}, // This is a check.
    },
    ...wTourUtils.clickOnSave(),
    // Check that saving always sets the first slide as active.
    {
        content: "Check that the first slide became the active one",
        trigger: `${carouselInnerSelector} > div.active:nth-child(1)`,
        run: () => {}, // This is a check.
    },
]);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/client_action_iframe_fallback.js  *
*  Lines: 29                                                               *
***************************************************************************/
odoo.define('@website/../tests/tours/client_action_iframe_fallback', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('client_action_iframe_fallback', {
    test: true,
    url: '/',
},
[
    {
        content: "Ensure we are on the expected page",
        trigger: 'body iframe html[data-view-xmlid="website.homepage"]',
        run: () => {}, // It's a check.
    }, {
        content: "Ensure the iframe fallback is not loaded in test mode",
        trigger: 'body',
        run: () => {
            if (document.querySelector('iframe[src="/website/iframefallback"]')) {
                console.error("The iframe fallback shouldn't be inside the DOM.");
            }
        },
    },
]);

return __exports;
});
;

/********************************************************************
*  Filepath: /website/static/tests/tours/client_action_redirect.js  *
*  Lines: 87                                                        *
********************************************************************/
odoo.define('@website/../tests/tours/client_action_redirect', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const tour = require('web_tour.tour');

const testUrl = '/test_client_action_redirect';

const goToFrontendSteps = [{
    content: "Go to the frontend",
    trigger: 'body',
    run: () => {
        window.location.href = testUrl;
    },
}, {
    content: "Check we are in the frontend",
    trigger: 'body:not(:has(.o_website_preview)) #test_contact_FE',
    run: () => null, // it's a check
}];
const goToBackendSteps = [{
    content: "Go to the backend",
    trigger: 'body',
    run: () => {
        window.location.href = `/@${testUrl}`;
    },
}, {
    content: "Check we are in the backend",
    trigger: '.o_website_preview',
    run: () => null, // it's a check
}];
const checkEditorSteps = [{
    content: "Check that the editor is loaded",
    trigger: 'iframe body.editor_enable',
    timeout: 30000,
    run: () => null, // it's a check
}, {
    content: "exit edit mode",
    trigger: '.o_we_website_top_actions button.btn-primary:contains("Save")',
}, {
    content: "wait for editor to close",
    trigger: 'iframe body:not(.editor_enable)',
    run: () => null, // It's a check
}];

tour.register('client_action_redirect', {
    test: true,
    url: testUrl,
},
[
    // Case 1: From frontend, click on `enable_editor=1` link without `/@/` in it
    ...goToFrontendSteps,
    {
        content: "Click on the link to frontend",
        trigger: '#test_contact_FE',
    },
    ...checkEditorSteps,

    // Case 2: From frontend, click on `enable_editor=1` link with `/@/` in it
    ...goToFrontendSteps,
    {
        content: "Click on the link to backend",
        trigger: '#test_contact_BE',
    },
    ...checkEditorSteps,

    // Case 3: From backend, click on `enable_editor=1` link without `/@/` in it
    // TODO: This will be fixed in another fix related to the listening of the
    //       URL changes from the client action.
    // ...goToBackendSteps,
    // {
    //     content: "Click on the link to frontend (2)",
    //     trigger: 'iframe #test_contact_FR',
    // },
    // ...checkEditorSteps,

    // Case 4: From backend, click on `enable_editor=1` link with `/@/` in it
    ...goToBackendSteps,
    {
        content: "Click on the link to backend (2)",
        trigger: 'iframe #test_contact_BE',
    },
    ...checkEditorSteps,
]);

return __exports;
});
;

/********************************************************************
*  Filepath: /website/static/tests/tours/conditional_visibility.js  *
*  Lines: 258                                                       *
********************************************************************/
odoo.define('@website/../tests/tours/conditional_visibility', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

const snippets = [
    {
        id: 's_text_image',
        name: 'Text - Image',
    },
    {
        id: "s_banner",
        name: "Banner",
    },
    {
        id: "s_popup",
        name: "Popup",
    },
];
function checkEyeIcon(snippetName, visible) {
    const eyeIcon = visible ? "fa-eye" : "fa-eye-slash";
    const openOrClose = visible ? "open" : "close";
    const endExplanation = `should be ${openOrClose} in the "Invisible Elements" panel`;
    const invisibleElPanel = "o_we_invisible_el_panel";
    return {
            content: `The eye icon of ${snippetName} ${endExplanation}`,
            trigger:
            `.${invisibleElPanel} .o_we_invisible_entry:contains("${snippetName}") i.${eyeIcon}`,
            run: () => {}, // it is a check
        };
}
function checkEyesIconAfterSave(footerIsHidden = true) {
    const eyeIconChecks = [
        checkEyeIcon("Header", false),
        checkEyeIcon("Text - Image", true),
        checkEyeIcon("Popup", false),
        checkEyeIcon("Banner", true),
    ];
    if (footerIsHidden) {
        eyeIconChecks.push(checkEyeIcon("Footer", false));
    }
    return eyeIconChecks;
}
wTourUtils.registerWebsitePreviewTour('conditional_visibility_1', {
    edition: true,
    url: '/',
    test: true,
}, [
wTourUtils.dragNDrop(snippets[0]),
wTourUtils.clickOnSnippet(snippets[0]),
wTourUtils.changeOption('ConditionalVisibility', 'we-toggler'),
{
    content: 'click on conditional visibility',
    trigger: '[data-name="visibility_conditional"]',
    run: 'click',
},
{
    content: 'click on utm medium toggler',
    trigger: '[data-save-attribute="visibilityValueUtmMedium"] we-toggler',
    run: 'click',
},
{
    trigger: '[data-save-attribute="visibilityValueUtmMedium"] we-selection-items .o_we_m2o_search input',
    content: 'Search for Email',
    run: 'text Email',
},
{
    trigger: '[data-save-attribute="visibilityValueUtmMedium"] we-selection-items [data-add-record="Email"]',
    content: 'click on Email',
    run: 'click',
},
...wTourUtils.clickOnSave(),
{
    content: 'Check if the rule was applied',
    extra_trigger: '.o_website_preview:only-child',
    trigger: 'iframe #wrap',
    run: function (actions) {
        const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_text_image')[0]);
        if (style.display !== 'none') {
            console.error('error This item should be invisible and only visible if utm_medium === email');
        }
    },
},
...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: 'Check if the element is visible as it should always be visible in edit view',
    trigger: 'iframe #wrap .s_text_image',
    run: function (actions) {
        const style = window.getComputedStyle((this.$anchor[0]));
        if (style.display === 'none') {
            console.error('error This item should now be visible because utm_medium === email');
        }
    },
},
]);

wTourUtils.registerWebsitePreviewTour("conditional_visibility_3", {
    edition: true,
    test: true,
    url: "/",
},
[
checkEyeIcon("Text - Image", true),
// Drag a "Banner" snippet on the website.
wTourUtils.dragNDrop(snippets[1]),
// Click on the "Banner" snippet.
wTourUtils.clickOnSnippet(snippets[1]),
wTourUtils.changeOption("ConditionalVisibility", "we-toggler"),
wTourUtils.changeOption("ConditionalVisibility", '[data-name="visibility_conditional"]'),
checkEyeIcon("Banner", true),
{
    content: "click on 'Blocks'",
    trigger: "#snippets_menu button:contains('Blocks')",
},
// Drag a "Popup" snippet on the website.
wTourUtils.dragNDrop(snippets[2]),
{
    content: "Toggle the visibility of the popup",
    in_modal: false,
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Popup')",
},
checkEyeIcon("Popup", false),
{
    content: "Click on footer",
    trigger: "iframe #wrapwrap footer",
},
wTourUtils.changeOption("HideFooter", "we-checkbox"),
checkEyeIcon("Footer", false),
{
    content: "Click on Header",
    trigger: "iframe #wrapwrap header",
},
wTourUtils.changeOption("TopMenuVisibility", "we-toggler"),
wTourUtils.changeOption("TopMenuVisibility", '[data-visibility="hidden"]'),
checkEyeIcon("Header", false),
{
    content: "Toggle the visibility of the Banner snippet",
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Banner')",
},
checkEyeIcon("Banner", false),
...wTourUtils.clickOnSave(),
...wTourUtils.clickOnEditAndWaitEditMode(),
...checkEyesIconAfterSave(),
]);

wTourUtils.registerWebsitePreviewTour("conditional_visibility_4", {
    edition: true,
    test: true,
    url: "/",
},
[
// Click on the "Text-Image" snippet.
wTourUtils.clickOnSnippet(snippets[0]),
{
    content: "Click on the 'move down' option",
    trigger: "iframe we-button.o_we_user_value_widget.fa-angle-down",
},
...checkEyesIconAfterSave(),
{
    content: "Check the order on the 'Invisible Elements' panel",
    trigger: ".o_we_invisible_el_panel div:nth-child(3):contains('Banner')",
    run: () => {}, // it is a check
},
{
    content: "Toggle the visibility of the Footer",
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Footer')",
},
{
    content: "Check that the footer is visible",
    trigger: "iframe #wrapwrap footer",
    run: () => {}, // it is a check
},
// Click on the "Banner" snippet.
wTourUtils.clickOnSnippet(snippets[1]),
{
    content: "Drag the 'Banner' snippet to the end of the page",
    trigger: "iframe .o_overlay_move_options .ui-draggable-handle",
    run: "drag_and_drop iframe #wrapwrap footer",
},
...checkEyesIconAfterSave(false),
{
    content: "Check the order on the 'Invisible Elements' panel",
    trigger: ".o_we_invisible_el_panel div:nth-child(3):contains('Text - Image')",
    run: () => {}, // it is a check
},
]);

wTourUtils.registerWebsitePreviewTour("conditional_visibility_5", {
    edition: true,
    test: true,
    url: "/",
}, [
    wTourUtils.dragNDrop(snippets[0]),
    {
        content: "Click on the image of the dragged snippet",
        trigger: "iframe .s_text_image img",
    },
    wTourUtils.changeOption("DeviceVisibility", 'we-button[data-toggle-device-visibility="no_desktop"]'),
    {
        content: "Check that the Column has been added in the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Column')",
        run: () => {}, // it is a check
    },
    {
        content: "Click on the 'Text - Image' snippet",
        trigger: "iframe .s_text_image",
    },
    wTourUtils.changeOption("ConditionalVisibility", 'we-button[data-toggle-device-visibility="no_desktop"]'),
    {
        content: "Check that the 'Text - Image' is the parent of 'Column' in the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_root_parent.o_we_invisible_entry:contains('Text - Image') + ul .o_we_invisible_entry.o_we_sublevel_1:contains('Column')",
        run: () => {}, // it is a check
    },
    {
        content: "Click on the 'Text - Image' entry on the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_root_parent.o_we_invisible_entry:contains('Text - Image')",
    },
    {
        content: "Check that the snippet is visible on the website",
        trigger: "iframe .s_text_image.o_snippet_desktop_invisible.o_snippet_override_invisible",
        run: () => {}, // it is a check
    },
    wTourUtils.changeOption("ConditionalVisibility", 'we-button[data-toggle-device-visibility="no_mobile"]'),
    {
        content: "Check that the 'Text - Image' has been removed from the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel:not(.o_we_invisible_entry:contains('Text - Image'))",
        run: () => {}, // it is a check
    },
    {
        content: "Click on the 'Column' entry on the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Column')",
    },
    {
        content: "Check that the column is visible on the website",
        trigger: "iframe .s_text_image .row > .o_snippet_desktop_invisible.o_snippet_override_invisible",
        run: () => {}, // it is a check
    },
    wTourUtils.changeOption("DeviceVisibility", 'we-button[data-toggle-device-visibility="no_mobile"]'),
    {
        content: "Check that the column has been removed from the 'Invisible Elements' panel",
        trigger: "#oe_snippets:not(:has(.o_we_invisible_entry:contains('Column')))",
        run: () => {}, // it is a check
    },
    {
        content: "Activate mobile preview",
        trigger: ".o_we_website_top_actions button[data-action='mobile']",
    },
    {
        content: "Check that the 'Text - Image' is the parent of 'Column' in the 'Invisible Elements' panel",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_root_parent.o_we_invisible_entry:contains('Text - Image') + ul .o_we_invisible_entry.o_we_sublevel_1:contains('Column')",
        run: () => {}, // it is a check
    },
]);

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website/static/tests/tours/conditional_visibility_frontend.js  *
*  Lines: 25                                                                 *
*****************************************************************************/
odoo.define('@website/../tests/tours/conditional_visibility_frontend', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

tour.register('conditional_visibility_2', {
    test: true,
    url: '/?utm_medium=Email',
},
[{
    content: 'The content previously hidden should now be visible',
    trigger: 'body #wrap',
    run: function (actions) {
        const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_text_image')[0]);
        if (style.display === 'none') {
            console.error('error This item should now be visible because utm_medium === email');
        }
    },
},
]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/configurator_translation.js  *
*  Lines: 81                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/configurator_translation', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const tour = require('web_tour.tour');

tour.register('configurator_translation', {
    test: true,
    url: '/website/configurator',
},
[
    // Configurator first screen
    {
        content: "click next",
        trigger: 'button.o_configurator_show',
    },
    // Make sure "Back" works
    {
        content: "use browser's Back",
        trigger: 'a.o_change_website_type',
        run: () => {
            window.history.back();
        },
    }, {
        content: "return to description screen",
        trigger: 'button.o_configurator_show',
    },
    // Description screen
    {
        content: "select a website type",
        trigger: 'a.o_change_website_type',
    }, {
        content: "insert a website industry",
        trigger: '.o_configurator_industry input',
        run: 'text ab',
    }, {
        content: "select a website industry from the autocomplete",
        trigger: '.o_configurator_industry_wrapper ul li a:contains("in fr")',
    }, {
        content: "select an objective",
        trigger: '.o_configurator_purpose_dd a',
    }, {
        content: "choose from the objective list",
        trigger: 'a.o_change_website_purpose',
    },
    // Palette screen
    {
        content: "chose a palette card",
        trigger: '.palette_card',
    },
    // Features screen
    {
        content: "select confidentialité",
        trigger: '.card:contains(Parseltongue_privacy)',
    }, {
        content: "Click on build my website",
        trigger: 'button.btn-primary',
    }, {
        content: "Loader should be shown",
        trigger: '.o_website_loader_container',
        run: function () {}, // it's a check
    }, {
        content: "Wait untill the configurator is finished",
        trigger: '#oe_snippets.o_loaded',
        timeout: 30000,
    }, {
        // Check the content of the save button to make sure the website is in
        // Parseltongue. (The editor should be in the website's default language,
        // which should be parseltongue in this test.)
        content: "exit edit mode",
        trigger: '.o_we_website_top_actions button.btn-primary:contains("Save_Parseltongue")',
    }, {
         content: "wait for editor to be closed",
         trigger: 'iframe body:not(.editor_enable)',
         run: function () {}, // It's a check.
    }
]);

return __exports;
});
;

/*******************************************************************************
*  Filepath: /website/static/tests/tours/default_shape_gets_palette_colors.js  *
*  Lines: 31                                                                   *
*******************************************************************************/
odoo.define("website.tour.default_shape_gets_palette_colors", function (require) {
"use strict";

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("default_shape_gets_palette_colors", {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    wTourUtils.clickOnSnippet({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    wTourUtils.changeOption('ColoredLevelBackground', 'Shape'),
    {
        content: "Check that shape does not have a background-image in its inline style",
        trigger: 'iframe #wrap .s_text_image .o_we_shape',
        run: () => {
            const shape = $('iframe:not(.o_ignore_in_tour)').contents().find('#wrap .s_text_image .o_we_shape')[0];
            if (shape.style.backgroundImage) {
                console.error("error The default shape has a background-image in its inline style (should rely on the class)");
            }
        },
    },
]);
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/drag_and_drop_on_non_editable.js  *
*  Lines: 37                                                               *
***************************************************************************/
odoo.define('@website/../tests/tours/drag_and_drop_on_non_editable', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("test_drag_and_drop_on_non_editable", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_company_team",
        name: "Team",
    }),
    {
        content: "Click on an editable media in non editable env.",
        trigger: "iframe .s_company_team .o_not_editable > .o_editable_media",
    },
    wTourUtils.goBackToBlocks(),
    Object.assign(wTourUtils.dragNDrop({
        id: "s_text_highlight",
        name: "Text Highlight",
    }), {
        content: "Drag and drop the Text Highlight building block next to the Team block media.",
        run: "drag_and_drop iframe .s_company_team .o_not_editable > .o_editable_media",
    }),
    {
        content: "Verify that the Text Highlight building block isn't in a non editable element.",
        trigger: "iframe .s_company_team :not(.o_not_editable) > .s_text_highlight",
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/edit_link_popover.js  *
*  Lines: 211                                                  *
***************************************************************/
odoo.define("website.tour.edit_link_popover", function (require) {
"use strict";

const { browser } = require('@web/core/browser/browser');
const { patch } = require("@web/core/utils/patch");
const wTourUtils = require('website.tour_utils');

const FIRST_PARAGRAPH = 'iframe #wrap .s_text_image p:nth-child(2)';

const clickFooter = [{
    content: "Save the link by clicking outside the URL input (not on a link element)",
    trigger: 'iframe footer h5:first',
}, {
    content: "Wait delayed click on footer",
    trigger: '.o_we_customize_panel we-title:contains("Footer")',
    run: function () {}, // it's a check
}];

const clickEditLink = [{
    content: "Click on Edit Link in Popover",
    trigger: 'iframe .o_edit_menu_popover .o_we_edit_link',
}, {
    content: "Ensure popover is closed",
    trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
    run: function () {}, // it's a check
    in_modal: false,
}];

wTourUtils.registerWebsitePreviewTour('edit_link_popover', {
    test: true,
    url: '/',
    edition: true,
}, [
    // 1. Test links in page content (web_editor)
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Click on a paragraph",
        trigger: FIRST_PARAGRAPH,
        run: 'text Paragraph', // Make sure the selection is set in the paragraph
    },
    {
        content: "Click on 'Link' to open Link Dialog",
        trigger: "#toolbar #create-link",
    },
    {
        content: "Type the link URL /contactus",
        trigger: '#o_link_dialog_url_input',
        run: 'text /contactus'
    },
    ...clickFooter,
    {
        content: "Click on newly created link",
        trigger: `${FIRST_PARAGRAPH} a`,
    },
    {
        content: "Popover should be shown",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")', // At this point preview is loaded
        run: function () {}, // it's a check
    },
    ...clickEditLink,
    {
        content: "Type the link URL /",
        trigger: '#o_link_dialog_url_input',
        run: "text /"
    },
    ...clickFooter,
    {
        content: "Click on link",
        trigger: `${FIRST_PARAGRAPH} a`,
    },
    {
        content: "Popover should be shown with updated preview data",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    {
        content: "Click on Remove Link in Popover",
        trigger: 'iframe .o_edit_menu_popover .o_we_remove_link',
    },
    {
        content: "Link should be removed",
        trigger: `${FIRST_PARAGRAPH}:not(:has(a))`,
        run: function () {}, // it's a check
    },
    {
        content: "Ensure popover is closed",
        trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
        run: function () {}, // it's a check
    },
    // 2. Test links in navbar (website)
    {
        content: "Click navbar menu Home",
        trigger: 'iframe #top_menu a:contains("Home")',
    },
    {
        content: "Popover should be shown (2)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    ...clickEditLink,
    {
        content: "Change the URL",
        trigger: '#url_input',
        run: "text /contactus"
    },
    {
        content: "Save the Edit Menu modal",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Click on the Home menu again",
        extra_trigger: 'div:not(.o_loading_dummy) > #oe_snippets',
        trigger: 'iframe #top_menu a:contains("Home")[href="/contactus"]',
    },
    {
        content: "Popover should be shown with updated preview data (2)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")',
        run: function () {}, // it's a check
    },
    {
        content: "Click on Edit Menu in Popover",
        trigger: 'iframe .o_edit_menu_popover .js_edit_menu',
    },
    {
        content: "Edit Menu (tree) should open",
        trigger: '.o_website_dialog .oe_menu_editor',
        run: function () {}, // it's a check
    },
    {
        content: "Close modal",
        trigger: '.modal-footer .btn-secondary',
    },
    // 3. Test other links (CTA in navbar & links in footer)
    {
        content: "Click CTA in navbar",
        trigger: 'iframe #top_menu_container a.btn-primary[href="/contactus"]',
    },
    {
        content: "Popover should be shown (3)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")',
        run: function () {}, // it's a check
    },
    {
        content: "Toolbar should be shown (3)",
        trigger: '#toolbar:has(#o_link_dialog_url_input:propValue(/contactus))',
        run: function () {}, // it's a check
    },
    {
        content: "Click 'Home' link in footer",
        trigger: 'iframe footer a[href="/"]',
    },
    {
        content: "Popover should be shown (4)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    {
        content: "Toolbar should be shown (4)",
        trigger: '#toolbar:has(#o_link_dialog_url_input:propValue(/))',
        run: function () {}, // it's a check
    },
    // 4. Popover should close when clicking non-link element
    ...clickFooter,
    // 5. Double click should not open popover but should open toolbar link
    {
        content: "Double click on link",
        extra_trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
        trigger: 'iframe footer a[href="/"]',
        run: function (actions) {
            // Create range to simulate real double click, see pull request
            const range = document.createRange();
            range.selectNodeContents(this.$anchor[0]);
            const sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            actions.click();
            actions.dblclick();
        },
    },
    {
        content: "Ensure popover is opened on double click, and so is right panel edit link",
        trigger: 'html:has(#o_link_dialog_url_input)',
        extra_trigger: 'iframe html:has(.o_edit_menu_popover)',
        run: function () {}, // it's a check
    },
    {
        content: "Ensure that a click on the link popover link opens a new window in edit mode",
        trigger: 'iframe .o_edit_menu_popover a.o_we_url_link[target="_blank"]',
        extra_trigger: 'iframe .o_edit_menu_popover a.o_we_full_url[target="_blank"]',
        run: (actions) => {
            // We do not want to open a link in a tour
            patch(browser, 'window_open_action', {
                open: (url) => {
                    if (window.location.hostname === url.hostname && url.pathname.startsWith('/@/')) {
                        document.querySelector('body').classList.add('new_backend_window_opened');
                    }
                }
            }, { pure: true });
            actions.click();
        },
    },
    {
        content: "Ensure that link is opened correctly in edit mode",
        trigger: '.new_backend_window_opened',
        run: () => {}, // it's a check
    },
]);
});
;

/***********************************************************
*  Filepath: /website/static/tests/tours/edit_megamenu.js  *
*  Lines: 179                                              *
***********************************************************/
odoo.define("website.tour.edit_megamenu", function (require) {
"use strict";

const wTourUtils = require('website.tour_utils');

const toggleMegaMenu = (stepOptions) => Object.assign({}, {
    content: "Toggles the mega menu.",
    trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle',
    run: function () {
        // If the mega menu is displayed inside the extra menu items, it should
        // already be displayed.
        if (!this.$anchor[0].closest('.o_extra_menu_items')) {
            this.$anchor[0].dispatchEvent(new Event('click'))
        }
    },
}, stepOptions);

wTourUtils.registerWebsitePreviewTour('edit_megamenu', {
    test: true,
    url: '/',
    edition: true,
}, [
    // Add a megamenu item to the top menu.
    {
        content: "Click on a menu item",
        trigger: 'iframe #top_menu .nav-item a',
    },
    {
        content: "Click on 'Link' to open Link Dialog",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Trigger the link dialog (click 'Add Mega Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(1)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input',
        run: 'text Megaaaaa!'
    },
    {
        content: "Confirm the mega menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with a new mega menu",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor [data-is-mega-menu="true"] .js_menu_label:contains("Megaaaaa!")',
    },
    // Edit a menu item
    wTourUtils.clickOnExtraMenuItem({extra_trigger: '#oe_snippets.o_loaded'}, true),
    toggleMegaMenu({extra_trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")'}),
    {
        content: "Select the last menu link of the first column",
        trigger: 'iframe .s_mega_menu_odoo_menu .row > div:first-child .nav > :nth-child(6)', // 6th is the last one
    },
    {
        content: "Hit the delete button to remove the menu link",
        trigger: 'iframe .oe_overlay .oe_snippet_remove',
    },
    {
        content: "Check that the last menu link was deleted",
        trigger: 'iframe .s_mega_menu_odoo_menu .row > div:first-child .nav:not(:has(> :nth-child(6)))',
        run: () => null,
    },
    {
        content: "Clicks on the first title item.",
        trigger: 'iframe .o_mega_menu h4',
    },
    {
        content: "Press enter.",
        trigger: 'iframe .o_mega_menu h4',
        run: function (actions) {
            this.$anchor[0].dispatchEvent(new window.InputEvent('input', {bubbles: true, inputType: 'insertParagraph'}));
        },
    },
    {
        content: "The menu should still be visible. Edit a menu item.",
        trigger: 'iframe .o_mega_menu h4',
        run: 'text New Menu Item',
    },
    {
        // If this step fails, it means that a patch inside bootstrap was lost.
        content: "Press the 'down arrow' key.",
        trigger: 'iframe .o_mega_menu h4',
        run: function (actions) {
            this.$anchor[0].dispatchEvent(new window.KeyboardEvent("keydown", { key: "ArrowDown" }));
        },
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'iframe body:not(.editor_enable)'}, true),
    toggleMegaMenu(),
    {
        content: "The menu item should have been renamed.",
        trigger: 'iframe .o_mega_menu h4:contains("New Menu Item")',
        run: function () {}, // it's a check
    },
]);
wTourUtils.registerWebsitePreviewTour('edit_megamenu_big_icons_subtitles', {
    test: true,
    url: '/',
    edition: true,
}, [
    // Add a megamenu item to the top menu.
    {
        content: "Click on a menu item",
        trigger: 'iframe #top_menu .nav-item a',
    },
    {
        content: "Click on 'Link' to open Link Dialog",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Trigger the link dialog (click 'Add Mega Menu Item')",
        extra_trigger: ".o_website_dialog",
        trigger: '.modal-body a:eq(1)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input',
        run: 'text Megaaaaa2!',
    },
    {
        content: "Confirm the mega menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with a new mega menu",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor [data-is-mega-menu="true"] .js_menu_label:contains("Megaaaaa2!")',
    },
    {
        content: "Check for the new mega menu",
        trigger: 'iframe #top_menu:has(.nav-item a.o_mega_menu_toggle:contains("Megaaaaa2!"))',
        run: function () {}, // it's a check
    },
    // Edit a menu item
    wTourUtils.clickOnExtraMenuItem({extra_trigger: '#oe_snippets.o_loaded'}, true),
    toggleMegaMenu({extra_trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa2!")'}),
    {
        content: "Select the first menu link of the first column",
        trigger: 'iframe .s_mega_menu_odoo_menu .row > div:first-child .nav > :first-child',
    },
    wTourUtils.changeOption("MegaMenuLayout", "we-toggler"),
    {
        content: "Select Big Icons Subtitles mega menu",
        trigger: '[data-select-label="Big Icons Subtitles"]',
    },
    {
        content: "Select the h4 of first menu link of the first column",
        trigger: 'iframe .s_mega_menu_big_icons_subtitles .row > div:first-child .nav > :first-child h4',
        run: function (actions) {
            // Clicking on the h4 element first time leads to the selection of
            // the entire a.nav-link, due to presence of `o_default_snippet_text` class
            // hence, specify the selection on the h4 element
            actions.click();
            const iframeDocument = document.querySelector('.o_iframe').contentDocument;
            const range = iframeDocument.createRange();
            range.selectNodeContents(this.$anchor[0]);
            const sel = iframeDocument.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
        },
    },
    {
        content: "Convert it to Bold",
        trigger: '#oe_snippets #toolbar #bold',
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'iframe body:not(.editor_enable)'}, true),
    toggleMegaMenu(),
    {
        content: "The menu item should only convert selected text to Bold.",
        trigger: 'iframe .s_mega_menu_big_icons_subtitles .row > div:first-child .nav > :first-child font:not(:has(strong))',
        run: function () {}, // it's a check
    },
]);
});
;

/********************************************************
*  Filepath: /website/static/tests/tours/edit_menus.js  *
*  Lines: 289                                           *
********************************************************/
odoo.define('@website/../tests/tours/edit_menus', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('edit_menus', {
    test: true,
    url: '/',
}, [
    // Add a megamenu item from the menu.
    {
        content: "open site menu",
        extra_trigger: "iframe #wrapwrap",
        trigger: 'button[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'a[data-menu-xmlid="website.menu_edit_menu"]',
    },
    {
        content: "Trigger the link dialog (click 'Add Mega Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(1)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input',
        run: 'text Megaaaaa!'
    },
    {
        content: "Confirm the mega menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the new menu",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor [data-is-mega-menu="true"] .js_menu_label:contains("Megaaaaa!")',
    },
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'body:not(:has(.oe_menu_editor))'}, true),
    {
        content: "There should be a new megamenu item.",
        trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
        run: () => {}, // It's a check.
    },
    // Add a menu item in edit mode.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on a menu item",
        trigger: 'iframe #top_menu .nav-item a',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Trigger the link dialog (click 'Add Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(0)',
    },
    {
        content: "Confirm the new menu entry without a label",
        extra_trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "It didn't save without a label. Fill label input.",
        extra_trigger: '.o_website_dialog:eq(1):visible',
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Random!',
    },
    {
        content: "Confirm the new menu entry without a url",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "It didn't save without a url. Fill url input.",
        trigger: '.modal-dialog .o_website_dialog input:eq(1)',
        extra_trigger: '.modal-dialog .o_website_dialog input.is-invalid',
        run: 'text #',
    },
    {
        content: "Confirm the new menu entry",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with the new entry",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor .js_menu_label:contains("Random!")',
    },
    // Edit the new menu item from the "edit link" popover button
    wTourUtils.clickOnExtraMenuItem({extra_trigger: '#oe_snippets.o_loaded'}, true),
    {
        content: "Menu should have a new link item",
        trigger: 'iframe #top_menu .nav-item a:contains("Random!")',
    },
    {
        content: "navbar shouldn't have any zwnbsp and no o_link_in_selection class",
        trigger: 'iframe nav.navbar:not(:has(.o_link_in_selection)):not(:contains("\ufeff"))',
        run: () => {}, // It's a check.
    },
    {
        content: "Click on Edit Link",
        trigger: 'iframe .o_edit_menu_popover a.o_we_edit_link',
    },
    {
        content: "Change the label",
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Modnar',
    },
    {
        content: "Confirm the new label",
        trigger: '.modal-footer .btn-primary',
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'iframe body:not(.editor_enable)'}, true),
    {
        content: "Label should have changed",
        extra_trigger: "iframe body:not(.editor_enable)",
        trigger: 'iframe #top_menu .nav-item a:contains("Modnar")',
        run: () => {}, // it's a check
    },
    // Edit the menu item from the "edit menu" popover button
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnExtraMenuItem({}, true),
    {
        content: "Click on the 'Modnar' link",
        trigger: 'iframe #top_menu .nav-item a:contains("Modnar")',
    },
    {
        content: "Click on the popover Edit Menu button",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Click on the dialog Edit Menu button",
        trigger: '.oe_menu_editor .js_menu_label:contains("Modnar")',
        run: function () {
            const liEl = this.$anchor[0].closest('[data-menu-id]');
            liEl.querySelector('button.js_edit_menu').click();
        },
    },
    {
        content: "Change the label",
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Modnar !!',
    },
    {
        content: "Confirm the new menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with the new menu label",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor .js_menu_label:contains("Modnar !!")',
    },
    // Drag a block to be able to scroll later.
    wTourUtils.dragNDrop({id: 's_media_list', name: 'Media List'}),
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'iframe body:not(.editor_enable)'}, true),
    {
        content: "Label should have changed",
        trigger: 'iframe #top_menu .nav-item a:contains("Modnar !!")',
        run: () => {}, // It's a check.
    },
    // Nest menu item from the menu.
    {
        content: "open site menu",
        trigger: 'button[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'a[data-menu-xmlid="website.menu_edit_menu"]',
    },
    {
        content: "Drag item into parent",
        trigger: '.oe_menu_editor li:contains("Contact us") > .ui-sortable-handle',
        // Menu rows are 38px tall.
        run: "drag_move_and_drop [50,38]@.oe_menu_editor li:contains('Home') > .ui-sortable-handle => .oe_menu_editor li:contains('Home') .ui-sortable-placeholder",
    },
    {
        content: "Wait for drop",
        trigger: '.oe_menu_editor li:contains("Home") ul li:contains("Contact us")',
        run: () => {}, // It's a check.
    },
    // Drag the Mega menu to the first position.
    {
        content: "Drag Mega at the top",
        trigger: '.oe_menu_editor li:contains("Megaaaaa!") > .ui-sortable-handle',
        run: "drag_move_and_drop [0,0]@.oe_menu_editor li:contains('Home') > .ui-sortable-handle => .oe_menu_editor li",
    },
    {
        content: "Wait for drop",
        trigger: '.oe_menu_editor:first-child:contains("Megaaaaa!")',
        run: () => {}, // It's a check.
    },
    {
        content: "Save the website menu with new nested menus",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Menu item should have a child",
        trigger: 'iframe #top_menu .nav-item a.dropdown-toggle:contains("Home")',
    },
    // Check that with the auto close of dropdown menus, the dropdowns remain
    // openable.
    {
        content: "When menu item is opened, child item must appear in the shown menu",
        trigger: 'iframe #top_menu .nav-item:contains("Home") ul.show li a.dropdown-item:contains("Contact us")[href="/contactus"]',
        run: function () {
            // Scroll down.
            this.$anchor[0].closest('body').querySelector('.o_footer_copyright_name')
                .scrollIntoView(true);
        },
    },
    {
        content: "The Home menu should be closed",
        trigger: 'iframe #top_menu .nav-item:contains("Home"):has(ul:not(.show))',
        run: () => {}, // It's a check.
    },
    {
        content: "Open the Home menu after scroll",
        trigger: 'iframe #top_menu .nav-item a.dropdown-toggle:contains("Home")',
    },
    {
        content: "Check that the Home menu is opened",
        trigger: 'iframe #top_menu .nav-item:contains("Home") ul.show li' +
            ' a.dropdown-item:contains("Contact us")[href="/contactus"]',
        run: () => {}, // It's a check.
    },
    {
        content: "Close the Home menu",
        trigger: 'iframe #top_menu .nav-item:has(a.dropdown-toggle:contains("Home"))',
    },
    {
        content: "Check that the Home menu is closed",
        trigger: 'iframe #top_menu .nav-item:contains("Home"):has(ul:not(.show))',
        run: () => {}, // It's a check.
    },
    {
        content: "Open the mega menu",
        trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
    },
    {
        content: "When the mega menu is opened, scroll up",
        trigger: 'iframe #top_menu .o_mega_menu_toggle.show',
        run: function () {
            const marginTopOfMegaMenu = getComputedStyle(
                this.$anchor[0].closest('.dropdown').querySelector('.o_mega_menu'))['margin-top'];
            if (marginTopOfMegaMenu !== '0px') {
                console.error('The margin-top of the mega menu should be 0px');
            }
            // Scroll up.
            this.$anchor[0].closest('body').querySelector('.s_media_list_item:nth-child(2)')
                .scrollIntoView(true);
        }
    },
    {
        content: "Check that the mega menu is closed",
        trigger: 'iframe #top_menu .nav-item:contains("Megaaaaa!"):has(div[data-name="Mega Menu"]:not(.show))',
        run:() => {}, // It's a check.
    },
    {
        content: "Open the mega menu after scroll",
        trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
    },
    {
        content: "Check that the mega menu is opened",
        trigger: 'iframe #top_menu .nav-item:has(a.o_mega_menu_toggle:contains("Megaaaaa!")) ' +
                 '.s_mega_menu_odoo_menu',
        run: () => {}, // It's a check.
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Open nested menu item",
        trigger: 'iframe #top_menu .nav-item:contains("Home"):nth(1) .dropdown-toggle',
    },
    {
        // If this step fails, it means that a patch inside bootstrap was lost.
        content: "Press the 'down arrow' key.",
        trigger: 'iframe #top_menu .nav-item:contains("Home") li:contains("Contact us")',
        run: function (actions) {
            this.$anchor[0].dispatchEvent(new window.KeyboardEvent("keydown", { key: "ArrowDown" }));
        },
    },
]);

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/edit_translated_page.js  *
*  Lines: 41                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/edit_translated_page', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require("web_tour.tour");
const wTourUtils = require("website.tour_utils");

tour.register('edit_translated_page_redirect', {
    test: true,
    url: '/nl/contactus',
}, [
    {
        content: "Enter backend",
        trigger: 'a.o_frontend_to_backend_edit_btn',
    },
    {
        content: "Check the data-for attribute",
        trigger: 'iframe main:has([data-for="contactus_form"])',
        run: () => {}, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Go to /nl",
        trigger: "body",
        run: () => {
            // After checking the presence of the editor dashboard, we visit a
            // translated version of the homepage. The homepage is a special
            // case (there is no trailing slash), so we test it separately.
            location.href = '/nl';
        },
    },
    {
        content: "Enter backend",
        trigger: 'a.o_frontend_to_backend_edit_btn',
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
]);

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website/static/tests/tours/editable_root_as_custom_snippet.js  *
*  Lines: 43                                                                 *
*****************************************************************************/
odoo.define('@website/../tests/tours/editable_root_as_custom_snippet', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');
const wTourUtils = require('website.tour_utils');

tour.register("editable_root_as_custom_snippet", {
    test: true,
}, [
    wTourUtils.clickOnSnippet('.s_title.custom[data-oe-model][data-oe-id][data-oe-field][data-oe-xpath]'),
    wTourUtils.changeOption('SnippetSave', 'we-button'),
    {
        content: "Confirm modal",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Wait for the custom snippet to appear in the panel",
        trigger: '.oe_snippet[name="Custom Title"]',
        run: () => null,
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Go to homepage",
        trigger: 'iframe a[href="/"].nav-link',
    },
    {
        content: "Wait to land on homepage",
        trigger: 'iframe a[href="/"].nav-link.active',
        run: () => null,
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({id: 's_title', name: 'Custom Title'}),
    {
        content: "Check that the custom snippet does not have branding",
        trigger: 'iframe #wrap .s_title.custom:not([data-oe-model]):not([data-oe-id]):not([data-oe-field]):not([data-oe-xpath])',
        run: () => null,
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/focus_blur_snippets.js  *
*  Lines: 83                                                     *
*****************************************************************/
odoo.define('website.tour.focus_blur_snippets', function (require) {
'use strict';

const { loadJS } = require('@web/core/assets');
const wTourUtils = require("website.tour_utils");

const blockIDToData = {
    parent: {
        selector: 'iframe .s_focusblur',
        name: 'section',
        overlayIndex: 2,
    },
    child1: {
        selector: 'iframe .s_focusblur_child1',
        name: 'first child',
        overlayIndex: 1,
    },
    child2: {
        selector: 'iframe .s_focusblur_child2',
        name: 'second child',
        overlayIndex: 0,
    },
};

function clickAndCheck(blockID, expected) {
    const blockData = blockIDToData[blockID] || {};

    return [{
        content: blockID ? `Enable the ${blockData.name}` : 'Disable all blocks',
        trigger: blockData.selector || 'iframe #wrapwrap',
    }, {
        content: 'Once the related overlays are enabled/disabled, check that the focus/blur calls have been correct.',
        trigger: blockID
            ? `iframe .oe_overlay.ui-draggable:eq(${blockData.overlayIndex}).oe_active`
            : `iframe #oe_manipulators:not(:has(.oe_active))`,
        run: function (actions) {
            const result = window.focusBlurSnippetsResult;
            window.focusBlurSnippetsResult = [];

            if (expected.length !== result.length
                    || !expected.every((item, i) => item === result[i])) {
                console.error(`
                    Expected: ${expected.toString()}
                    Result: ${result.toString()}
                `);
            }
        },
    }];
}

window.focusBlurSnippetsResult = [];

wTourUtils.registerWebsitePreviewTour("focus_blur_snippets", {
    test: true,
    url: "/",
    edition: true,
}, [
    {
        content: 'First load our custom JS options',
        trigger: "body",
        run: function () {
            loadJS('/website/static/tests/tour_utils/focus_blur_snippets_options.js').then(function () {
                $('iframe:not(.o_ignore_in_tour)').contents().find('body').addClass('focus_blur_snippets_options_loaded');
            });
        },
    },
    {
        content: 'Drag the custom block into the page',
        trigger: '#snippet_structure .oe_snippet:has(.oe_snippet_body.s_focusblur) .oe_snippet_thumbnail',
        extra_trigger: 'iframe body.focus_blur_snippets_options_loaded',
        run: 'drag_and_drop iframe #wrap',
    },
    ...clickAndCheck('parent', ['focus parent']),
    ...clickAndCheck(null, ['blur parent']),
    ...clickAndCheck('child1', ['focus parent', 'focus child1']),
    ...clickAndCheck('child1', []),
    ...clickAndCheck(null, ['blur parent', 'blur child1']),
    ...clickAndCheck('parent', ['focus parent']),
    ...clickAndCheck('child1', ['blur parent', 'focus parent', 'focus child1']),
    ...clickAndCheck('child2', ['blur parent', 'blur child1', 'focus parent', 'focus child2']),
    ...clickAndCheck('parent', ['blur parent', 'blur child2', 'focus parent']),
]);
});
;

/****************************************************************
*  Filepath: /website/static/tests/tours/gray_color_palette.js  *
*  Lines: 91                                                    *
****************************************************************/
odoo.define('@website/../tests/tours/gray_color_palette', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const wTourUtils = require('website.tour_utils');

function waitForCSSReload() {
    // TODO we should find a better way to wait for this in tests after CSS
    // reload, it is currently done multiple different ways depending on the
    // test.
    return [
        {
            // This step is here because the option is applied but triggers a
            // reloading of the CC value, so if the second value is sent too
            // soon, it will be ignored. Clicking on the snippet tab and back
            // will ensure that the mutex is cleared, and therefore we can apply
            // the saturation step.
            content: "Click on the blocks tab and back on theme to ensure the changes are applied",
            trigger: '.o_we_add_snippet_btn',
        },
        {
            content: "Go back to theme options",
            trigger: '.o_we_customize_theme_btn',
            extra_trigger: '#o_scroll',
        },
        {
            content: "Wait for no loading",
            trigger: 'body:not(:has(.o_we_ui_loading)) iframe body:not(:has(.o_we_ui_loading))',
            run: () => null,
        },
    ];
}

wTourUtils.registerWebsitePreviewTour('website_gray_color_palette', {
    test: true,
    url: '/',
    edition: true,
}, [
    {
        content: "Go to theme options",
        trigger: '.o_we_customize_theme_btn',
    },
    {
        content: "Toggle gray color palette",
        trigger: '.o_we_gray_preview.o_we_collapse_toggler',
    },
    {
        content: "Drag the hue slider",
        trigger: '.o_we_slider_tint[data-param="gray-hue"]',
        run: () => {
            const slider = document.querySelector('.o_we_slider_tint[data-param="gray-hue"] input');
            slider.value = 100;
            slider.dispatchEvent(new InputEvent('change', {bubbles: true}));
        },
    },
    {
        content: "Check the preview of the gray 900 after hue change",
        trigger: '[variable="900"][style="background-color: rgb(36, 41, 33) !important;"]',
        run: () => {}, // This is a check.
    },
    ...waitForCSSReload(),
    {
        content: "Drag the saturation slider",
        trigger: '.o_we_user_value_widget[data-param="gray-extra-saturation"]',
        run: () => {
            const slider = document.querySelector('.o_we_user_value_widget[data-param="gray-extra-saturation"] input');
            slider.value = 15;
            slider.dispatchEvent(new InputEvent('change', {bubbles: true}));
        }
    },
    {
        content: "Check the preview of the gray 900 after saturation change",
        trigger: '[variable="900"][style="background-color: rgb(34, 47, 27) !important;"]',
        run: () => {}, // This is a check.
    },
    ...waitForCSSReload(),
    {
        content: "Wait for the iframe to be loaded",
        trigger: 'iframe body',
        run: () => {
            const iframeEl = document.querySelector('.o_website_preview .o_iframe');
            const styles = iframeEl.contentWindow.getComputedStyle(iframeEl.contentDocument.documentElement);
            if (styles.getPropertyValue('--900').toString().replace(/ /g, '') !== '#222F1B') {
                console.error('The value for the gray 900 is not right');
            }
        }
    },
]);

return __exports;
});
;

/*********************************************************
*  Filepath: /website/static/tests/tours/grid_layout.js  *
*  Lines: 85                                             *
*********************************************************/
odoo.define('@website/../tests/tours/grid_layout', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_replace_grid_image', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    wTourUtils.clickOnSnippet({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Toggle to grid mode",
        trigger: '.o_we_user_value_widget[data-name="grid_mode"]',
    },
    {
        content: "Replace image",
        trigger: 'iframe .s_text_image img',
        run: 'dblclick',
    },
    {
        content: "Pick new image",
        trigger: '.o_select_media_dialog img[title="s_banner_default_image.jpg"]',
    },
    {
        content: "Add new image column",
        trigger: '.o_we_user_value_widget[data-add-element="image"]',
    },
    {
        content: "Replace new image",
        trigger: 'iframe .s_text_image img[src="/web/image/website.s_text_image_default_image"]',
        run: 'dblclick',
    },
    {
        content: "Pick new image",
        trigger: '.o_select_media_dialog img[title="s_banner_default_image.jpg"]',
    },
    ...wTourUtils.clickOnSave()
]);

wTourUtils.registerWebsitePreviewTour("scroll_to_new_grid_item", {
    test: true,
    url: "/",
    edition: true,
}, [
    // Drop enough snippets to scroll.
    wTourUtils.dragNDrop({id: "s_text_image", name: "Text - Image"}),
    wTourUtils.dragNDrop({id: "s_image_text", name: "Image - Text"}),
    wTourUtils.dragNDrop({id: "s_image_text", name: "Image - Text"}),
    // Toggle the first snippet to grid mode.
    wTourUtils.clickOnSnippet({id: "s_text_image", name: "Text - Image"}),
    wTourUtils.changeOption("layout_column", 'we-button[data-name="grid_mode"]'),
    // Add a new grid item.
    wTourUtils.changeOption("layout_column", 'we-button[data-add-element="image"]'),
    {
        content: "Check that the page scrolled to the new grid item",
        trigger: "iframe .s_text_image .o_grid_item:nth-child(3)",
        run: function () {
            // Leave some time to the page to scroll.
            setTimeout(() => {
                const newItemPosition = this.$anchor[0].getBoundingClientRect();
                if (newItemPosition.top < 0) {
                    console.error("The page did not scroll to the new grid item.");
                }
                document.body.classList.add("o_scrolled_to_grid_item");
            }, 500);
        },
    }, {
        content: "Make sure the scroll check is done",
        trigger: ".o_scrolled_to_grid_item",
        run: () => {}, // This is a check.
    },
]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/homepage_edit_discard.js  *
*  Lines: 28                                                       *
*******************************************************************/
odoo.define('@website/../tests/tours/homepage_edit_discard', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

// TODO remove this test; it is badly written: you just have to change the fact
// that editor_enable is added on the body to silently make it useless +
// useless extra_trigger + useless auto: true + ... A better duplicate of it has
// been made with "website_no_dirty_page".
wTourUtils.registerWebsitePreviewTour('homepage_edit_discard', {
    test: true,
    url: '/',
    edition: true,
}, [{
    trigger: "#oe_snippets button[data-action=\"cancel\"]:not([disabled])",
    extra_trigger: "body:not(:has(.o_dialog))",
    content: "<b>Click Discard</b> to Discard all Changes.",
    position: "bottom",
}, {
    trigger: "iframe body:not(.editor_enable)",
    auto: true,
    run: () => null,
}]);

return __exports;
});
;

/*********************************************************
*  Filepath: /website/static/tests/tours/html_editor.js  *
*  Lines: 264                                            *
*********************************************************/
/* global ace */
odoo.define('website.test.html_editor', function (require) {
'use strict';

const wTourUtils = require('website.tour_utils');

const adminCssModif = '#wrap {display: none;}';
const demoCssModif = '// demo_edition';

wTourUtils.registerWebsitePreviewTour('html_editor_language', {
    url: '/test_page',
    test: true,
},
    [
        {
            content: "open site menu",
            extra_trigger: "iframe body:not(.editor_enable)",
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "add something in the page's English version",
            trigger: 'div.ace_line .ace_xml:contains("rumbler")',
            run: () => {
                ace.edit('ace-view-editor').getSession().insert({
                    row: 1,
                    column: 1,
                }, '<br/>\n');
            },
        },
        {
            content: "save the html editor",
            extra_trigger: 'div.ace_line .ace_xml:contains("br")',
            trigger: ".o_ace_view_editor button[data-action=save]",
        },
        {
            content: "check that the page has the modification",
            trigger: 'iframe #wrapwrap:has(br)',
            run: () => {}, // it's a check
        },
        {
            content: "check that the page has not lost the original text",
            trigger: 'iframe #wrapwrap:contains("rommelpot")',
            run: () => {}, // it's a check
        },
    ]
);

wTourUtils.registerWebsitePreviewTour('html_editor_multiple_templates', {
    url: '/generic',
    edition: true,
    test: true,
},
    [
        {
            content: "drop a snippet",
            trigger: ".oe_snippet:has(.s_cover) .oe_snippet_thumbnail",
            // id starting by 'oe_structure..' will actually create an inherited view
            run: "drag_and_drop iframe #oe_structure_test_ui",
        },
        ...wTourUtils.clickOnSave(),
        // 2. Edit generic view
        {
            content: "open site menu",
            extra_trigger: "iframe body:not(.editor_enable)",
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "add something in the generic view",
            trigger: 'div.ace_line .ace_xml:contains("Generic")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 3, column: 1}, '<p>somenewcontent</p>\n');
            },
        },
        // 3. Edit oe_structure specific view
        {
            content: "select oe_structure specific view",
            trigger: 'div.ace_line .ace_xml:contains("somenewcontent")',
            run: function () {
                var viewId = $('#ace-view-list option:contains("oe_structure_test_ui")').val();
                $('#ace-view-list').val(viewId).trigger('change');
            },
        },
        {
            content: "add something in the oe_structure specific view",
            extra_trigger: '#ace-view-id:contains("test.generic_view_oe_structure_test_ui")', // If no xml_id it should show key
            trigger: 'div.ace_line .ace_xml:contains("s_cover")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 1}, '<p>anothernewcontent</p>\n');
            },
        },
        {
            content: "save the html editor",
            extra_trigger: 'div.ace_line .ace_xml:contains("anothernewcontent")',
            trigger: ".o_ace_view_editor button[data-action=save]",
        },
        {
           content: "check that the page has both modification",
           extra_trigger: 'iframe #wrapwrap:contains("anothernewcontent")',
           trigger: 'iframe #wrapwrap:contains("somenewcontent")',
           run: function () {}, // it's a check
       },
    ]
);

wTourUtils.registerWebsitePreviewTour('test_html_editor_scss', {
    url: '/contactus',
    test: true,
},
    [
        // 1. Open Html Editor and select a scss file
        {
            content: "open site menu",
            extra_trigger: 'iframe #wrap:visible', // ensure state for later
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "open type switcher",
            trigger: '.o_ace_type_switcher button',
        },
        {
            content: "select scss files",
            trigger: '.o_ace_type_switcher_choice[data-type="scss"]',
        },
        {
            content: "select 'user_custom_rules'",
            trigger: 'body:has(#ace-scss-list option:contains("user_custom_rules"))',
            run: function () {
                var scssId = $('#ace-scss-list option:contains("user_custom_rules")').val();
                $('#ace-scss-list').val(scssId).trigger('change');
            },
        },
        // 2. Edit that file and ensure it was saved then reset it
        {
            content: "add some scss content in the file",
            trigger: 'div.ace_line .ace_comment:contains("footer {")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 0}, `${adminCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${adminCssModif}")`,
            trigger: ".o_ace_view_editor button[data-action=save]",
        },
         {
            content: "check that the scss modification got applied",
            trigger: 'iframe body:has(#wrap:hidden)',
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
        {
            content: "reset view (after reload, html editor should have been reopened where it was)",
            trigger: '#ace-view-id button[data-action="reset"]:not([disabled])',
        },
        {
            content: "confirm reset warning",
            trigger: '.modal-footer .btn-primary',
        },
        {
            content: "check that the scss file was reset correctly, wrap content should now be visible again",
            trigger: 'iframe #wrap:visible',
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
        // 3. Customize again that file (will be used in second part of the test
        //    to ensure restricted user can still use the HTML Editor)
        {
            content: "add some scss content in the file",
            trigger: 'div.ace_line .ace_comment:contains("footer {")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 0}, `${adminCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${adminCssModif}")`,
            trigger: '.o_ace_view_editor button[data-action=save]',
        },
        {
            content: "check that the scss modification got applied",
            trigger: 'iframe body:has(#wrap:hidden)',
            run: function () {}, // it's a check
        },
    ]
);

wTourUtils.registerWebsitePreviewTour('test_html_editor_scss_2', {
    url: '/',
    test: true,
},
    [
        // This part of the test ensures that a restricted user can still use
        // the HTML Editor if someone else made a customization previously.

        // 4. Open Html Editor and select a scss file
        {
            content: "open site menu",
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "open type switcher",
            trigger: '.o_ace_type_switcher button',
        },
        {
            content: "select scss files",
            trigger: '.o_ace_type_switcher_choice[data-type="scss"]',
        },
        {
            content: "select 'user_custom_rules'",
            trigger: 'body:has(#ace-scss-list option:contains("user_custom_rules"))',
            run: function () {
                var scssId = $('#ace-scss-list option:contains("user_custom_rules")').val();
                $('#ace-scss-list').val(scssId).trigger('change');
            },
        },
        // 5. Edit that file and ensure it was saved then reset it
        {
            content: "add some scss content in the file",
            trigger: `div.ace_line:contains("${adminCssModif}")`, // ensure the admin modification is here
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 0}, `${demoCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${demoCssModif}")`,
            trigger: ".o_ace_view_editor button[data-action=save]",
        },
        {
            content: "reset view (after reload, html editor should have been reopened where it was)",
            trigger: '#ace-view-id button[data-action="reset"]:not([disabled])',
            timeout: 30000, // SCSS compilation might take some time
        },
        {
            content: "confirm reset warning",
            trigger: '.modal-footer .btn-primary',
        },
        {
            content: "check that the scss file was reset correctly",
            extra_trigger: `body:not(:has(div.ace_line:contains("${adminCssModif}")))`,
            trigger: `body:not(:has(div.ace_line:contains("${demoCssModif}")))`,
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
    ]
);

});
;

/********************************************************
*  Filepath: /website/static/tests/tours/link_tools.js  *
*  Lines: 284                                           *
********************************************************/
odoo.define('@website/../tests/tours/link_tools', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');
const { boundariesIn, setSelection, nodeSize } = require('@web_editor/js/editor/odoo-editor/src/utils/utils');

const clickOnImgStep = {
    content: "Click somewhere else to save.",
    trigger: 'iframe #wrap .s_text_image img',
};

wTourUtils.registerWebsitePreviewTour('link_tools', {
    test: true,
    url: '/',
    edition: true,
}, [
    // 1. Create a new link from scratch.
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Replace first paragraph, to insert a new link",
        trigger: 'iframe #wrap .s_text_image p',
        run: 'text Go to odoo: '
    },
    {
        content: "Open link tools",
        trigger: "#toolbar #create-link",
    },
    {
        content: "Type the link URL odoo.com",
        trigger: '#o_link_dialog_url_input',
        run: 'text odoo.com'
    },
    clickOnImgStep,
    {
        content: "Select the newly created link",
        trigger: 'iframe #wrap .s_text_image a[href="http://odoo.com"]:contains("odoo.com")',
        run() {
            setSelection(this.$anchor[0], 0, this.$anchor[0], nodeSize(this.$anchor[0]));
        }
    },
    // Remove the link.
    {
        content: "Click on the newly created link",
        trigger: 'iframe #wrap .s_text_image a[href="http://odoo.com"]:contains("odoo.com")',
    },
    {
        content: "Remove the link.",
        trigger: 'iframe .popover:contains("http://odoo.com") a .fa-chain-broken',
    },
    {
        content: "Check that the link was removed",
        trigger: 'iframe #wrap .s_text_image p:contains("Go to odoo:"):not(:has(a))',
        run: () => {}, // It's a check.
    },
    // Recreate the link.
    {
        content: "Select first paragraph, to insert a new link",
        trigger: 'iframe #wrap .s_text_image p',
    },
    {
        content: "Open link tools",
        trigger: "#toolbar #create-link",
    },
    {
        content: "Type the link URL odoo.com",
        trigger: '#o_link_dialog_url_input',
        run: 'text odoo.com'
    },
    clickOnImgStep,
    // 2. Edit the link with the link tools.
    {
        content: "Click on the newly created link, change content to odoo website",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo.com")',
        run: 'text odoo website',
    },
    {
        content: "Link tools, should be open, change the url",
        trigger: '#o_link_dialog_url_input',
        run: 'text_blur odoo.be'
    },

    ...wTourUtils.clickOnSave(),
    // 3. Edit a link after saving the page.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "The new link content should be odoo website and url odoo.be",
        trigger: 'iframe .s_text_image a[href="http://odoo.be"]:contains("odoo website")',
    },
    {
        content: "The new link content should be odoo website and url odoo.be",
        trigger: '#toolbar button[data-bs-original-title="Link Style"]',
    },
    {
        content: "Click on the secondary style button.",
        trigger: '#toolbar we-button[data-value="secondary"]',
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "The link should have the secondary button style.",
        trigger: 'iframe .s_text_image a.btn.btn-secondary[href="http://odoo.be"]:contains("odoo website")',
        run: () => {}, // It's a check.
    },
    // 4. Add link on image.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({
        id: 's_three_columns',
        name: 'Columns',
    }),
    {
        content: "Click on the first image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) img',
    },
    {
        content: "Activate link.",
        trigger: '.o_we_customize_panel we-row:contains("Media") we-button.fa-link',
    },
    {
        content: "Set URL.",
        trigger: '.o_we_customize_panel we-input:contains("Your URL") input',
        run: 'text odoo.com',
    },
    {
        content: "Deselect image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(2) img',
    },
    {
        content: "Re-select image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) img',
    },
    {
        content: "Check that the second image is not within a link.",
        trigger: 'iframe .s_three_columns .row > :nth-child(2) div > img',
        run: () => {}, // It's a check.
    },
    {
        content: "Check that link tools appear.",
        trigger: 'iframe .popover div a:contains("http://odoo.com")',
        run: () => {}, // It's a check.
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the first image was saved.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) div > a > img',
        run: () => {}, // It's a check.
    },
    {
        content: "Check that the second image was saved.",
        trigger: 'iframe .s_three_columns .row > :nth-child(2) div > img',
        run: () => {}, // It's a check.
    },
    // 5. Remove link from image.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Reselect the first image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) div > a > img',
    },
    {
        content: "Check that link tools appear.",
        trigger: 'iframe .popover div a:contains("http://odoo.com")',
        run: () => {}, // It's a check.
    },
    {
        content: "Remove link.",
        trigger: 'iframe .popover:contains("http://odoo.com") a .fa-chain-broken',
    },
    {
        content: "Check that image is not within a link anymore.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) div > img',
        run: () => {}, // It's a check.
    },
    // 6. Create new a link from a URL-like text.
    {
        content: "Replace first paragraph, write a URL",
        trigger: 'iframe #wrap .s_text_image p',
        run: 'text odoo.com'
    },
    {
        content: "Select text",
        trigger: 'iframe #wrap .s_text_image p:contains(odoo.com)',
        run() {
            setSelection(...boundariesIn(this.$anchor[0]), false);
        }
    },
    {
        content: "Open link tools",
        trigger: "#toolbar #create-link",
    },
    clickOnImgStep,
    {
        // URL transformation into link should persist, without the need for
        // input at input[name=url]
        content: "Check that link was created",
        trigger: "iframe .s_text_image p a[href='http://odoo.com']:contains('odoo.com')",
        run: () => null,
    },
    {
        content: "Click on link to open the link tools",
        trigger: "iframe .s_text_image p a",
    },
    // 7. Check that http links are not coerced to https and vice-versa.
    {
        content: "Change URL to https",
        trigger: "#o_link_dialog_url_input",
        run: 'text https://odoo.com',
    },
    {
        content: "Check that link was updated",
        trigger: "iframe .s_text_image p a[href='https://odoo.com']:contains('odoo.com')",
        run: () => null,
    },
    {
        content: "Change it back http",
        trigger: "#o_link_dialog_url_input",
        run: 'text http://odoo.com',
    },
    {
        content: "Check that link was updated",
        trigger: "iframe .s_text_image p a[href='http://odoo.com']:contains('odoo.com')",
        run: () => null,
    },
    // 8. Test conversion between http and mailto links.
    {
        content: "Change URL into an email address",
        trigger: "#o_link_dialog_url_input",
        run: "text callme@maybe.com",
    },
    {
        content: "Check that link was updated and link content is synced with URL",
        trigger: "iframe .s_text_image p a[href='mailto:callme@maybe.com']:contains('callme@maybe.com')",
        run: () => null,
    },
    {
        content: "Change URL back into a http one",
        trigger: "#o_link_dialog_url_input",
        run: "text_blur callmemaybe.com",
    },
    {
        content: "Check that link was updated and link content is synced with URL",
        trigger: "iframe .s_text_image p a[href='http://callmemaybe.com']:contains('callmemaybe.com')",
    },
    // 9.Test that UI stays up-to-date.
    {
        content: "Edit link label",
        trigger: "iframe .s_text_image p a",
        run(actions) {
            // Simulating text input.
            const link = this.$anchor[0];
            actions.text("callmemaybe.com/shops");
            // Trick the editor into keyboardType === 'PHYSICAL' and delete the
            // last character "s" and end with "callmemaybe.com/shop"
            link.dispatchEvent(new KeyboardEvent("keydown", { key: "Backspace", bubbles: true }));
            // Trigger editor's '_onInput' handler, which leads to a history step.
            link.dispatchEvent(new InputEvent('input', {inputType: 'insertText', bubbles: true}));
        },
    },
    {
        content: "Check that links's href was updated",
        trigger: "iframe .s_text_image p a[href='http://callmemaybe.com/shop']:contains('callmemaybe.com/shop')",
        run: () => null,
    },
    {
        content: "Check popover content is up-to-date",
        trigger: "iframe .popover div a:contains('http://callmemaybe.com/shop')",
        run: () => null,
    },
    {
        content: "Check Link tools URL input content is up-to-date",
        trigger: "#o_link_dialog_url_input",
        run() {
            if (this.$anchor[0].value !== 'http://callmemaybe.com/shop') {
                throw new Error("Tour step failed") ;
            }
        }
    },
    ...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/**********************************************************
*  Filepath: /website/static/tests/tours/media_dialog.js  *
*  Lines: 157                                             *
**********************************************************/
odoo.define('@website/../tests/tours/media_dialog', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("website_media_dialog_undraw", {
    test: true,
    url: '/',
    edition: true,
}, [
wTourUtils.dragNDrop({
    id: 's_text_image',
    name: 'Text - Image',
}),
{
    content: "Open the media dialog from the snippet",
    trigger: "iframe .s_text_image img",
    run: "dblclick",
}, {
    content: "Search for 'banner' to call the media library", // Mocked call
    trigger: ".o_select_media_dialog .o_we_search",
    run: "text banner",
}, {
    content: "Check that the media library is available",
    trigger: '.o_select_media_dialog:has(.o_we_search_select option[value="media-library"])',
    run: () => null, // it's a check
},
]);

wTourUtils.registerWebsitePreviewTour("website_media_dialog_external_library", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_text_image",
        name: "Text - Image",
    }),
    {
        content: "Open the media dialog from the snippet",
        trigger: "iframe .s_text_image img",
        run: "dblclick",
    }, {
        content: "Dummy search to call the media library",
        trigger: ".o_select_media_dialog .o_we_search",
        run: "text a",
    }, {
        content: "Choose the media library to only show its media",
        trigger: ".o_select_media_dialog .o_we_search_select",
        // This is a standard <select>: we can't simulate a click on the option
        // directly.
        run: function (actions) {
            actions.click();
            actions.text("Illustrations");
            this.$anchor.trigger($.Event("keydown", {key: 'Enter', keyCode: 13}));
        },
    }, {
        content: "Double click on the first image",
        trigger: ".o_select_media_dialog img.o_we_attachment_highlight",
        run: "dblclick",
    }, {
        content: "Reopen the media dialog",
        trigger: "iframe .s_text_image img",
        run: "dblclick",
    }, {
        content: "Check that the image was created only once",
        trigger: ".o_select_media_dialog .o_we_existing_attachments",
        run: function () {
            const selector = ".o_existing_attachment_cell img[src^='/web_editor/shape/illustration/']";
            const imgName = this.$anchor[0].querySelector(selector).title;
            const uploadedImgs = this.$anchor[0].querySelectorAll(`${selector}[title='${imgName}']`);
            if (uploadedImgs.length !== 1) {
                throw new Error(`error: ${uploadedImgs.length} attachment(s) were found. Exactly 1 should have been created.`);
            }
        },
    },
]);

wTourUtils.registerWebsitePreviewTour('website_media_dialog_icons', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_process_steps',
        name: 'Steps',
    }),
    {
        content: "Open MediaDialog from a snippet icon",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: "dblclick",
    },
    {
        content: "Pick the same icon",
        trigger: '.o_select_media_dialog .o_we_attachment_selected.fa-unlock-alt',
    },
    {
        content: "Check if the icon remains the same",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: () => null, // it's a check
    },
    {
        content: "Open MediaDialog again",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: "dblclick",
    },
    {
        content: "Click on the ADD button",
        trigger: '.o_select_media_dialog .btn:contains(Add)',
    },
    {
        content: "Check if the icon remains the same",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnSave()
]);

wTourUtils.registerWebsitePreviewTour("website_media_dialog_image_shape", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_text_image",
        name: "Text - Image",
    }),
    {
        content: "Click on the image",
        trigger: "iframe .s_text_image img",
    },
    wTourUtils.changeOption("ImageTools", 'we-select[data-name="shape_img_opt"] we-toggler'),
    wTourUtils.changeOption("ImageTools", "we-button[data-set-img-shape]"),
    {
        content: "Open MediaDialog from an image",
        trigger: "iframe .s_text_image img[data-shape]",
        run: "dblclick",
    },
    {
        content: "Click on the 'Icons' tab",
        trigger: '.o_select_media_dialog .o_notebook_headers .nav-item a:contains("Icons")',
    },
    {
        content: "Select an icon",
        trigger: ".o_select_media_dialog:has(.nav-link.active:contains('Icons')) .tab-content span.fa-heart",
    },
    {
        content: "Checks that the icon doesn't have a shape",
        trigger: "iframe .s_text_image .fa-heart:not([data-shape])",
        run: () => {}, //it's a check
    },
]);

return __exports;
});
;

/****************************************************************
*  Filepath: /website/static/tests/tours/media_iframe_video.js  *
*  Lines: 107                                                   *
****************************************************************/
odoo.define('@website/../tests/tours/media_iframe_video', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour(
    "website_media_iframe_video",
    {
        test: true,
        url: "/",
        edition: true,
    },
    [
        wTourUtils.dragNDrop({
            id: "s_text_image",
            name: "Text - Image",
        }),
        {
            content: "Select the image",
            trigger: "iframe #wrap .s_text_image img",
        },
        {
            content: "Open image link options",
            trigger: "[data-name='media_link_opt']",
        },
        {
            content: "Enter the url",
            trigger: "input[placeholder='www.example.com']",
            run: "text odoo.com",
        },
        {
            content: "Click on replace media",
            trigger: "[data-replace-media='true']",
        },
        {
            content: "Click on video button",
            trigger: "a:contains('Videos')",
        },
        {
            content: "Enter video link",
            trigger: "#o_video_text",
            run: "text https://youtu.be/nbso3NVz3p8",
        },
        {
            content: "Check video is preview",
            trigger: ".o_video_dialog_iframe",
            run: () => {}, // This is a check.
        },
        {
            content: "Click on 'add' button",
            trigger: ".modal-footer button:contains('Add')",
        },
        {
            content: "Ensure that the parent of media_iframe_video is not an 'a' tag.",
            trigger: "iframe .media_iframe_video",
            run: function () {
                if (this.$anchor[0].parentElement.tagName === "A") {
                    console.error("Iframe video has link!!!");
                }
            },
        },
    ]
);

wTourUtils.registerWebsitePreviewTour(
    "website_snippet_background_video",
    {
        test: true,
        url: "/",
        edition: true,
    },
    [
        wTourUtils.dragNDrop({
            id: "s_text_block",
            name: "Text",
        }),
        {
            content: "Click on the text block.",
            trigger: "iframe #wrap section.s_text_block",
        },
        {
            content: "Click on the 'Background Video' button option.",
            trigger: "we-button[data-name='bg_video_toggler_opt']",
        },
        {
            content: "Click on the first sample video in the modal.",
            trigger: "#video-suggestion .o_sample_video",
        },
        {
            content: "Check the video is select.",
            trigger: "textarea.is-valid",
            run: () => {}, // This is a check.
        },
        {
            content: "Click on the 'Add' button to apply the selected video as the background.",
            trigger: ".modal-footer button.btn-primary",
        },
        {
            content: "Verify that the video is set as the background of the snippet.",
            trigger: "iframe #wrap section.o_background_video",
        },
    ]
);

return __exports;
});
;

/***********************************************************
*  Filepath: /website/static/tests/tours/multi_edition.js  *
*  Lines: 42                                               *
***********************************************************/
odoo.define('@website/../tests/tours/multi_edition', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_multi_edition', {
    test: true,
    url: '/',
    edition: true,
}, [
    {
        content: 'Check the current page has not the elements that will be added',
        trigger: 'iframe body:not(:has(.s_text_image)):not(:has(.s_hr))',
        run: () => null,
    },
    // Edit the main element of the page
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    // Edit another part in the page, like the footer
    wTourUtils.dragNDrop({
        id: 's_hr',
        name: 'Separator',
    }),
    ...wTourUtils.clickOnSave(),
    {
        content: 'Check that the main element of the page was properly saved',
        trigger: 'iframe main .s_text_image',
        run: () => null,
    },
    {
        content: 'Check that the footer was properly saved',
        trigger: 'iframe footer .s_hr',
        run: () => null,
    },
]);

return __exports;
});
;

/**********************************************************
*  Filepath: /website/static/tests/tours/page_manager.js  *
*  Lines: 154                                             *
**********************************************************/
odoo.define('@website/../tests/tours/page_manager', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');
const wTourUtils = require('website.tour_utils');

// TODO: This part should be moved in a QUnit test
const checkKanbanGroupBy = [{
    content: "Click on Kanban View",
    trigger: '.o_cp_switch_buttons .o_kanban',
}, {
    content: "Click on Group By",
    extra_trigger: '.o_kanban_renderer',
    trigger: '.o_search_options .o_group_by_menu button',
}, {
    content: "Click on Add Custom Group",
    trigger: '.o_search_options .o_add_custom_group_menu button',
    run: function (actions) {
        this.$anchor[0].dispatchEvent(new MouseEvent('mouseenter'));
    },
}, {
    content: "Click on Apply", // Active is selected by default
    trigger: '.o_add_custom_group_menu .dropdown-menu .btn-primary',
}, {
    content: "Click on List View",
    extra_trigger: '.o_kanban_renderer .o_kanban_header',
    trigger: '.o_cp_switch_buttons .o_list',
}, {
    content: "Remove applied Group By",
    extra_trigger: '.o_list_renderer',
    trigger: '.o_cp_searchview .o_facet_remove',
}];

const checkWebsiteFilter = [{
    content: "Click on My Website",
    trigger: "button.dropdown-toggle:contains('My Website')",
}, {
    content: "Select Test Website",
    trigger: ".dropdown-menu.show > .dropdown-item:contains('Test Website')",
}, {
    content: "Check that the homepage is now the one of Test Website",
    trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
             "~ .o_data_cell[name=website_id]:contains('Test Website')",
    run: () => null, // it's a check
}, {
    content: "Click on Test Website",
    trigger: "button.dropdown-toggle:contains('Test Website')",
}, {
    content: "Go back to My Website",
    trigger: ".dropdown-menu.show > .dropdown-item:contains('My Website')",
}, {
    content: "Check that the homepage is now the one of My Website",
    trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
             "~ .o_data_cell[name=website_id]:contains('My Website'):not(:contains('2'))",
    run: () => null, // it's a check
}];

const deleteSelectedPage = [
    {
        content: "Click on Action",
        trigger: '.o_cp_action_menus button',
    },
    {
        content: "Click on Delete",
        trigger: '.o-dropdown--menu span:contains("Delete")',
    },
    {
        content: "Click on I am sure about this",
        trigger: 'main.modal-body input[type="checkbox"]',
        // The loading of the dependencies can take a while and
        // sometimes reach the default 10s timeout
        timeout: 20000,
    },
    {
        content: "Click on OK",
        trigger: '.modal-content footer button.btn-primary:not([disabled])',
    }
];
const homePage = 'tr:contains("Home")';

wTourUtils.registerWebsitePreviewTour('website_page_manager', {
    test: true,
    url: '/',
}, [
    {
        content: "Click on Site",
        trigger: 'button.dropdown-toggle[title="Site"]',
    },
    {
        content: "Click on Pages",
        trigger: 'a.dropdown-item[data-menu-xmlid="website.menu_website_pages_list"]',
    },
    ...checkKanbanGroupBy,
    ...checkWebsiteFilter,
    {
        content: "Click on Home Page",
        trigger: `.o_list_renderer ${homePage} td.o_list_record_selector input[type="checkbox"]`,
    },
    ...deleteSelectedPage,
    {
        content: "Check that the page has been removed",
        trigger: `.o_list_renderer:not(:has(${homePage}))`,
        run: () => null,
    },
    {
        content: "Click on All Pages",
        trigger: '.o_list_renderer thead input[type="checkbox"]',
    },
    ...deleteSelectedPage,
    {
        content: "Check that all pages have been removed",
        trigger: '.o_list_renderer tbody:not(:has([data-id]))',
        run: () => null,
    },
]);

wTourUtils.registerWebsitePreviewTour('website_page_manager_session_forced', {
    test: true,
    url: '/',
}, [...wTourUtils.testSwitchWebsite('Test Website'), {
    content: "Click on Site",
    trigger: 'button.dropdown-toggle[data-menu-xmlid="website.menu_site"]',
}, {
    content: "Click on Pages",
    trigger: 'a.dropdown-item[data-menu-xmlid="website.menu_website_pages_list"]',
}, {
    content: "Check that the homepage is the one of Test Website",
    trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
             "~ .o_data_cell[name=website_id]:contains('Test Website')",
    run: () => null, // it's a check
}, {
    content: "Check that the selected website is Test Website",
    trigger: ".o_search_options .dropdown-toggle:contains('Test Website')",
    run: () => null, // it's a check
}]);

tour.register('website_page_manager_direct_access', {
    test: true,
    url: '/web#action=website.action_website_pages_list',
}, [{
    content: "Check that the homepage is the one of Test Website",
    trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
             "~ .o_data_cell[name=website_id]:contains('Test Website')",
    run: () => null, // it's a check
}, {
    content: "Check that the selected website is Test Website",
    trigger: ".o_search_options .dropdown-toggle:contains('Test Website')",
    run: () => null, // it's a check
}]);

return __exports;
});
;

/******************************************************
*  Filepath: /website/static/tests/tours/parallax.js  *
*  Lines: 66                                          *
******************************************************/
odoo.define("website.tour.parallax", function (require) {
"use strict";

const wTourUtils = require("website.tour_utils");

const coverSnippet = {id: "s_cover", name: "Cover"};

wTourUtils.registerWebsitePreviewTour("test_parallax", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop(coverSnippet),
    wTourUtils.clickOnSnippet(coverSnippet),
    wTourUtils.changeOption("BackgroundOptimize", "we-toggler"),
    wTourUtils.changeOption("BackgroundOptimize", 'we-button[data-gl-filter="blur"]'),
{
    content: "Check that the Cover snippet has the Blur filter on its background image",
    trigger: "iframe .s_cover span[data-gl-filter='blur']",
    run: () => {}, //it's a check
},
    wTourUtils.changeOption("Parallax", "we-toggler"),
    wTourUtils.changeOption("Parallax", 'we-button[data-select-data-attribute="0"]'),
{
    content: "Check that the data related to the filter have been transferred to the new target",
    trigger: "iframe .s_cover[data-gl-filter='blur']",
    run: () => {}, //it's a check
},
{
    content: "Check that the 'o_modified_image_to_save' class has been transferred to the new target",
    trigger: "iframe .s_cover.o_modified_image_to_save",
    run: () => {}, //it's a check
},
    wTourUtils.changeOption("Parallax", "we-toggler"),
    wTourUtils.changeOption("Parallax", 'we-button[data-select-data-attribute="1"]'),
{
    content: "Check that the 'o_modified_image_to_save' class has been deleted from the old target",
    trigger: "iframe .s_cover:not(.o_modified_image_to_save)",
    run: () => {}, //it's a check
},
{
    content: "Check that the 'o_modified_image_to_save' class has been transferred to the new target",
    trigger: "iframe span.s_parallax_bg.o_modified_image_to_save",
    run: () => {}, //it's a check
},
{
    content: "Check that the data related to the filter have been transferred to the new target",
    trigger: "iframe span.s_parallax_bg[data-gl-filter='blur']",
    run: () => {}, //it's a check
},
    wTourUtils.changeOption("Parallax", "we-toggler"),
    wTourUtils.changeOption("Parallax", 'we-button[data-select-data-attribute="1.5"]'),
{
    content: "Check that the option was correctly applied",
    trigger: 'iframe span.s_parallax_bg[style*=top][style*=bottom][style*=transform]',
    run: () => {}, //it's a check
},
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: "The parallax should not add o_dirty when entering edit mode",
    trigger: 'iframe #wrap:not(.o_dirty)',
    run: () => {}, //it's a check
},
]);
});
;

/****************************************************************
*  Filepath: /website/static/tests/tours/public_user_editor.js  *
*  Lines: 31                                                    *
****************************************************************/
odoo.define('website.tour.public_user_editor_dep_widget', function (require) {
'use strict';

const publicWidget = require('web.public.widget');
const wysiwygLoader = require('web_editor.loader');

publicWidget.registry['public_user_editor_test'] = publicWidget.Widget.extend({
    selector: 'textarea.o_public_user_editor_test_textarea',

    /**
     * @override
     */
    start: async function () {
        await this._super(...arguments);
        await wysiwygLoader.loadFromTextarea(this, this.el, {});
    },
});
});

odoo.define('website.tour.public_user_editor', function (require) {
'use strict';

const tour = require('web_tour.tour');

tour.register('public_user_editor', {
    test: true,
}, [{
    trigger: '.note-editable',
    run: function () {}, // Simple check
}]);
});
;

/************************************************************
*  Filepath: /website/static/tests/tours/reset_password.js  *
*  Lines: 30                                                *
************************************************************/
odoo.define('website.tour_reset_password', function (require) {
'use strict';

var tour = require('web_tour.tour');
require('web.dom_ready');

tour.register('website_reset_password', {
    test: true,
}, [
    {
        content: "fill new password",
        trigger: '.oe_reset_password_form input[name="password"]',
        run: "text adminadmin"
    },
    {
        content: "fill confirm password",
        trigger: '.oe_reset_password_form input[name="confirm_password"]',
        run: "text adminadmin"
    },
    {
        content: "submit reset password form",
        trigger: '.oe_reset_password_form button[type="submit"]',
    },
    {
        content: "check that we're logged in",
        trigger: '.oe_topbar_name:contains("The King")',
        run: function () {}
    },
]);
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/restricted_editor.js  *
*  Lines: 12                                                   *
***************************************************************/
odoo.define("website.tour.restricted_editor", function (require) {
"use strict";

var wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("restricted_editor", {
    test: true,
    url: "/",
}, [
    ...wTourUtils.clickOnEditAndWaitEditMode(),
]);
});
;

/*************************************************
*  Filepath: /website/static/tests/tours/rte.js  *
*  Lines: 253                                    *
*************************************************/
odoo.define('website.tour.rte', function (require) {
'use strict';

var session = require('web.session');
const wTourUtils = require('website.tour_utils');

var domReady = new Promise(function (resolve) {
    $(resolve);
});
var ready = Promise.all([domReady, session.is_bound]);

wTourUtils.registerWebsitePreviewTour('rte_translator', {
    test: true,
    url: '/',
    wait_for: ready,
}, [{
    content: "click language dropdown",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
}, {
    content: "click on Add a language",
    trigger: 'iframe a.o_add_language',
}, {
    content: "type Parseltongue",
    trigger: 'div[name="lang_ids"] .o_input_dropdown input',
    run: 'text Parseltongue',
}, {
    content: 'select Parseltongue',
    trigger: '.dropdown-item:contains(Parseltongue)',
}, {
    content: "load Parseltongue",
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-dialog div[name="lang_ids"] .rounded-pill .o_tag_badge_text:contains(Parseltongue)',
}, {
    content: "click language dropdown (2)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
    timeout: 60000,
}, {
    content: "go to english version",
    trigger: 'iframe .js_language_selector a[data-url_code="en"]',
    extra_trigger: 'iframe html[lang*="pa-GB"]',
}, {
    content: "Open new page menu",
    trigger: ".o_menu_systray .o_new_content_container > a",
    extra_trigger: 'iframe html[lang*="en-US"]',
    consumeVisibleOnly: true,
}, {
    content: "click on new page",
    trigger: '.o_new_content_element a',
}, {
    content: "insert file name",
    trigger: '.modal-dialog input[type="text"]',
    run: 'text rte_translator.xml',
}, {
    content: "create file",
    trigger: '.modal-dialog button.btn-primary',
    extra_trigger: 'input[type="text"]:propValue(rte_translator.xml)',
}, {
    content: "click on the 'page manager' button",
    trigger: 'button[name="website.action_website_pages_list"]',
}, {
    content: "click on the record to display the xml file in the iframe",
    trigger: 'td:contains("rte_translator.xml")',
}, {
    content: "Open new page menu",
    trigger: ".o_menu_systray .o_new_content_container > a",
    consumeVisibleOnly: true,
}, {
    content: "click on new page",
    trigger: '.o_new_content_element a',
}, {
    content: "insert page name",
    trigger: '.modal-dialog input[type="text"]',
    run: 'text rte_translator',
}, {
    content: "create page",
    trigger: '.modal-dialog button.btn-primary',
    extra_trigger: 'input[type="text"]:propValue(rte_translator)',
}, {
    content: "drop a snippet",
    trigger: "#snippet_structure .oe_snippet:eq(1) .oe_snippet_thumbnail",
    run: 'drag_and_drop iframe #wrap',
}, {
    content: "change content",
    trigger: 'iframe #wrap',
    run: function () {
        $('iframe:not(.o_ignore_in_tour)').contents().find("#wrap p:first").replaceWith('<p>Write one or <font style="background-color: yellow;">two paragraphs <b>describing</b></font> your product or\
                <font style="color: rgb(255, 0, 0);">services</font>. To be successful your content needs to be\
                useful to your <a href="/999">readers</a>.</p> <input value="test translate default value" placeholder="test translate placeholder"/>\
                <p>&lt;b&gt;&lt;/b&gt; is an HTML&nbsp;tag &amp; is empty</p>');
        $('iframe:not(.o_ignore_in_tour)').contents().find("#wrap img").attr("title", "test translate image title");
    }
}, {
    content: "save",
    trigger: 'button[data-action=save]',
    extra_trigger: 'iframe #wrap p:first b',
}, {
    content: "click language dropdown (3)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
    extra_trigger: 'iframe body:not(.editor_enable)',
}, {
    content: "click on Parseltongue version",
    trigger: 'iframe .js_language_selector a[data-url_code="pa_GB"]',
    extra_trigger: 'iframe html[lang*="en"]',
}, {
    content: "translate",
    trigger: '.o_menu_systray .o_translate_website_container > a',
    extra_trigger: 'iframe html:not(:has(#wrap p span))',
}, {
    content: "close modal",
    trigger: '.modal-footer .btn-secondary',
}, {
    content: "check if translation is activate",
    trigger: 'iframe [data-oe-translation-initial-sha]',
}, {
    content: "translate text",
    extra_trigger: '#oe_snippets.o_loaded',
    trigger: 'iframe #wrap p font:first',
    run: function (actionHelper) {
        actionHelper.text('translated Parseltongue text');
        const Wysiwyg = odoo.__DEBUG__.services['web_editor.wysiwyg'];
        Wysiwyg.setRange(this.$anchor.contents()[0], 22);
        this.$anchor.trigger($.Event("keyup", {key: '_', keyCode: 95}));
        this.$anchor.trigger('input');
    },
}, {
    content: "translate text with special char",
    trigger: 'iframe #wrap input + p span:first',
    run: function (actionHelper) {
        actionHelper.click();
        this.$anchor.prepend('&lt;{translated}&gt;');
        const Wysiwyg = odoo.__DEBUG__.services['web_editor.wysiwyg'];
        Wysiwyg.setRange(this.$anchor.contents()[0], 0);
        this.$anchor.trigger($.Event("keyup", {key: '_', keyCode: 95}));
        this.$anchor.trigger('input');
    },
}, {
    content: "click on input",
    trigger: 'iframe #wrap input:first',
    extra_trigger: 'iframe #wrap .o_dirty font:first:contains(translated Parseltongue text)',
    run: 'click',
}, {
    content: "translate placeholder",
    trigger: '.modal-dialog input:first',
    run: 'text test Parseltongue placeholder',
}, {
    content: "translate default value",
    trigger: '.modal-dialog input:last',
    run: 'text test Parseltongue default value',
}, {
    content: "close modal",
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal input:propValue(test Parseltongue placeholder)',
}, {
    content: "check: input marked as translated",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"].oe_translated',
    run: () => {},
}, {
    content: "save translation",
    trigger: 'button[data-action=save]',
}, {
    content: "check: content is translated",
    trigger: 'iframe #wrap p font:first:contains(translated Parseltongue text)',
    extra_trigger: 'iframe body:not(.editor_enable)',
    run: function () {}, // it's a check
}, {
    content: "check: content with special char is translated",
    trigger: "iframe #wrap input + p:contains(<{translated}><b></b> is an HTML\xa0tag & )",
    run: function () {}, // it's a check

}, {
    content: "check: placeholder translation",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"]',
    run: function () {}, // it's a check
}, {
    content: "check: default value translation",
    trigger: 'iframe input[value="test Parseltongue default value"]',
    run: () => {},
}, {
    content: "open language selector",
    trigger: 'iframe .js_language_selector button:first',
    extra_trigger: 'iframe html[lang*="pa-GB"]:not(:has(#wrap p span))',
}, {
    content: "return to english version",
    trigger: 'iframe .js_language_selector a[data-url_code="en"]',
}, {
    content: "edit english version",
    trigger: '.o_edit_website_container > a',
    extra_trigger: 'iframe body:not(:has(#wrap p font:first:containsExact(paragraphs <b>describing</b>)))',
}, {
    content: "select text",
    extra_trigger: '#oe_snippets.o_loaded',
    trigger: 'iframe #wrap p',
    run: function (actionHelper) {
        actionHelper.click();
        var el = this.$anchor[0];
        var mousedown = document.createEvent('MouseEvents');
        mousedown.initMouseEvent('mousedown', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, el);
        el.dispatchEvent(mousedown);
        var mouseup = document.createEvent('MouseEvents');
        const Wysiwyg = odoo.__DEBUG__.services['web_editor.wysiwyg'];
        Wysiwyg.setRange(el.childNodes[2], 6, el.childNodes[2], 13);
        mouseup.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, el);
        el.dispatchEvent(mouseup);
    },
// This is disabled for now because it reveals a bug that is fixed in saas-15.1
// and considered a tradeoff in 15.0. The bug concerns the invalidation of
// translations when inserting tags with more than one character. Whereas <u>
// didn't trigger an invalidation, <span style="text-decoration-line: underline;">
// does.
// }, {
//     content: "underline",
//     trigger: '.oe-toolbar #underline',
}, {
    content: "save new change",
    trigger: 'button[data-action=save]',
    // See comment above.
    // extra_trigger: '#wrap.o_dirty p span[style*="text-decoration-line: underline;"]',
}, {
    content: "click language dropdown (4)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
    extra_trigger: 'iframe body:not(.editor_enable)',
}, {
    content: "return in Parseltongue",
    trigger: 'iframe html[lang="en-US"] .js_language_selector .js_change_lang[data-url_code="pa_GB"]',
}, {
    content: "check bis: content is translated",
    trigger: 'iframe #wrap p font:first:contains(translated Parseltongue text)',
    extra_trigger: 'iframe html[lang*="pa-GB"]',
}, {
    content: "check bis: placeholder translation",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"]',
}, {
    content: "open site menu",
    trigger: 'button[data-menu-xmlid="website.menu_site"]',
}, {
    content: "Open HTML editor",
    trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
}, {
    content: "Check that the editor is not showing translated content (1)",
    trigger: '.ace_text-layer .ace_line:contains("an HTML")',
    run: function (actions) {
        var lineEscapedText = $(this.$anchor.text()).last().text();
        if (lineEscapedText !== "&lt;b&gt;&lt;/b&gt; is an HTML&nbsp;tag &amp; is empty") {
            console.error('The HTML editor should display the correct untranslated content');
            $('iframe:not(.o_ignore_in_tour)').contents().find('body').addClass('rte_translator_error');
        }
    },
}, {
    content: "Check that the editor is not showing translated content (2)",
    trigger: 'iframe body:not(.rte_translator_error)',
    run: function () {},
}]);
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/snippet_background_edition.js  *
*  Lines: 373                                                           *
************************************************************************/
odoo.define('@website/../tests/tours/snippet_background_edition', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const weUtils = require('web_editor.utils');
const wTourUtils = require('website.tour_utils');

const snippets = [
    {
        id: 's_text_image',
        name: 'Text - Image',
    },
];
const gradients = [
    'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
    'linear-gradient(135deg, rgb(255, 222, 202) 0%, rgb(202, 115, 69) 100%)',
];

function typeToName(xType) {
    return xType === 'cc' ? 'color combinations' : xType === 'bg' ? 'background colors' : 'gradients';
}

function switchTo(type, _name) {
    const target = type === 'cc' ? 'color-combinations' : type === 'bg' ? 'custom-colors' : 'gradients';
    const name = _name || typeToName(type);
    return {
        trigger: `.o_we_colorpicker_switch_pane_btn[data-target="${target}"]`,
        content: `Switch to ${name}`,
    };
}

function addCheck(steps, checkX, checkNoX, xType, noSwitch = false) {
    if (!checkX && !checkNoX) {
        return;
    }

    const name = typeToName(xType);
    const selectorCheckX = checkX && `.o_we_color_btn[data-color="${checkX}"].selected`;
    const selectorCheckNoX = checkNoX && `.o_we_color_btn[data-color="${checkNoX}"]:not(.selected)`;
    const step = {
        trigger: selectorCheckX || selectorCheckNoX,
        content: `The correct ${name} is marked as selected`,
        position: 'bottom',
        run: () => null,
    };
    if (!selectorCheckX && selectorCheckNoX) {
        step.extra_trigger = selectorCheckNoX;
    }

    if (!noSwitch) {
        steps.push(switchTo(xType, name));
    }
    steps.push(step);
}

function checkAndUpdateBackgroundColor({
    checkCC, checkNoCC,
    checkBg, checkNoBg,
    checkGradient, checkNoGradient,
    changeType, change,
    finalSelector, finalRun
}) {
    const steps = [
        wTourUtils.changeBackgroundColor(),
    ];

    addCheck(steps, checkCC, checkNoCC, 'cc', true);
    addCheck(steps, checkBg, checkNoBg, 'bg');
    addCheck(steps, checkGradient, checkNoGradient, 'gradient');

    if (changeType) {
        steps.push(switchTo(changeType));
        steps.push(wTourUtils.changeOption('ColoredLevelBackground', `.o_we_color_btn[data-color="${change}"]`, 'background color', 'top', true));
        steps.push({
            trigger: finalSelector,
            content: "The selected colors have been applied (CC AND (BG or GRADIENT))",
            position: 'bottom',
            run: finalRun,
        });
    }

    return steps;
}

function updateAndCheckCustomGradient({updateStep, checkGradient}) {
    const steps = [updateStep, {
        trigger: `iframe #wrapwrap section.${snippets[0].id}.o_cc1`,
        content: 'Color combination 1 still selected',
        run: () => null,
    }];
    addCheck(steps, checkGradient, checkGradient !== gradients[0] && gradients[0], 'gradient', true);
    return steps;
}

wTourUtils.registerWebsitePreviewTour('snippet_background_edition', {
    url: '/',
    edition: true,
    test: true,
},
[
wTourUtils.dragNDrop(snippets[0]),
wTourUtils.clickOnSnippet(snippets[0]),

// Add a color combination
...checkAndUpdateBackgroundColor({
    changeType: 'cc',
    change: 3,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc3:not([class*=bg-]):not([style*="background"])`,
}),

// Change the color combination + Check the previous one was marked as selected
...checkAndUpdateBackgroundColor({
    checkCC: 3,
    changeType: 'cc',
    change: 2,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2:not(.o_cc3):not([class*=bg-])`,
}),

// Check the color combination was marked as selected + Edit the bg color
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkNoCC: 3,
    changeType: 'bg',
    change: 'black-50',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2.bg-black-50`,
}),

// Check the current color palette selection + Change the bg color
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkBg: 'black-50',
    changeType: 'bg',
    change: '800',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2.bg-800:not(.bg-black-50)`,
}),

// Check the current color palette selection + Change the color combination
// again. It should keep the bg color class.
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkBg: '800',
    checkNoBg: 'black-50',
    changeType: 'cc',
    change: 4,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4:not(.o_cc2).bg-800`,
}),

// Check the current color palette status + Replace the bg color by a gradient
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkNoCC: 2,
    checkBg: '800',
    changeType: 'gradient',
    change: gradients[0],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4:not(.bg-800)[style*="background-image: ${gradients[0]}"]`,
}),

// Check the current color palette status + Replace the gradient
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkNoBg: '800',
    checkGradient: gradients[0],
    changeType: 'gradient',
    change: gradients[1],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4[style*="background-image: ${gradients[1]}"]:not([style*="background-image: ${gradients[0]}"])`,
}),

// Check the current color palette selection + Change the color combination
// again. It should keep the gradient.
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkGradient: gradients[1],
    checkNoGradient: gradients[0],
    changeType: 'cc',
    change: 1,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not(.o_cc4)[style*="background-image: ${gradients[1]}"]`,
}),

// Final check of the color status in the color palette
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkNoCC: 4,
    checkGradient: gradients[1],
}),

// Now, add an image on top of that color combination + gradient
{
    // Close the palette before selecting a media.
    trigger: '.snippet-option-ColoredLevelBackground we-title',
    content: 'Close palette',
},
wTourUtils.changeOption('ColoredLevelBackground', '[data-name="bg_image_toggle_opt"]'),
{
    trigger: '.o_existing_attachment_cell img',
    content: "Select an image in the media dialog",
},
{
    trigger: `iframe .${snippets[0].id}.o_cc.o_cc1`,
    run: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('An image should have been added as background.');
        }
        if (parts.gradient !== gradients[1]) {
            console.error('The gradient should have been kept when adding the background image');
        }
    },
},

// Replace the gradient while there is a background-image
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkGradient: gradients[1],
    changeType: 'gradient',
    change: gradients[0],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not([style*="${gradients[1]}"])`,
    finalRun: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('The image should have been kept when changing the gradient');
        }
        if (parts.gradient !== gradients[0]) {
            console.error('The gradient should have been changed');
        }
    },
}),

// Customize gradient
wTourUtils.changeBackgroundColor(),
switchTo('gradient'),
// Avoid navigating across tabs to maintain current editor state
// Step colors
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_custom_gradient_scale',
        content: 'Add step',
        run: 'click',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_slider_multi input.active',
        content: 'Move step',
        run: () => {
            const slider = $('.colorpicker .o_slider_multi input.active');
            slider.val(45);
            slider.trigger('click');
        },
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(203, 94, 238) 45%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_color_picker_inputs .o_hex_div input',
        content: 'Pick step color',
        run: 'text #FF0000',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(255, 0, 0) 45%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_remove_color',
        content: 'Delete step',
        run: 'click',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Linear
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="angle"]',
        content: 'Change angle',
        run: 'text_blur 50',
    },
    checkGradient: 'linear-gradient(50deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Radial
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker we-button[data-gradient-type="radial-gradient"]',
        content: 'Switch to Radial',
        run: 'click',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 25% 25%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="positionX"]',
        content: 'Change X position',
        run: 'text_blur 33',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 33% 25%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="positionY"]',
        content: 'Change Y position',
        run: 'text_blur 75',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 33% 75%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker we-button[data-gradient-size="closest-side"]',
        content: 'Change color spread size',
        run: 'click',
    },
    checkGradient: 'radial-gradient(circle closest-side at 33% 75%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Revert to predefined gradient
{
    trigger: `.o_we_color_btn[data-color="${gradients[0]}"]`,
    content: `Revert to predefiend gradient ${gradients[0]}`,
    run: 'click',
},

// Replace the gradient by a bg color
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkGradient: gradients[0],
    checkNoGradient: gradients[1],
    changeType: 'bg',
    change: 'black-75',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1.bg-black-75[style^="background-image: url("]:not([style*="${gradients[0]}"])`
}),

// Re-add a gradient
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkBg: 'black-75',
    checkNoGradient: gradients[0],
    changeType: 'gradient',
    change: gradients[1],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not(.bg-black-75)`,
    finalRun: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('The image should have been kept when re-adding the gradient');
        }
        if (parts.gradient !== gradients[1]) {
            console.error('The gradient should have been re-added');
        }
    },
}),

// Final check of color selection and removing the image
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkNoBg: 'black-75',
    checkGradient: gradients[1],
}),
wTourUtils.changeOption('ColoredLevelBackground', '[data-name="bg_image_toggle_opt"]', 'image toggle', 'top', true),
{
    trigger: `iframe .${snippets[0].id}.o_cc.o_cc1[style*="background-image: ${gradients[1]}"]`,
    run: () => null,
},

// Now removing all colors via the 'None' button (note: colorpicker still opened)
{
    trigger: '.o_colorpicker_reset',
    content: "Click on the None button of the color palette",
},
{
    trigger: `iframe .${snippets[0].id}:not(.o_cc):not(.o_cc1):not([style*="background-image"])`,
    content: "All color classes and properties should have been removed",
    run: () => null,
}
]);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/snippet_cache_across_websites.js  *
*  Lines: 31                                                               *
***************************************************************************/
odoo.define('@website/../tests/tours/snippet_cache_across_websites', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_cache_across_websites', {
    edition: true,
    test: true,
    url: '/@/'
}, [
    {
        content: "Check that the custom snippet is displayed",
        trigger: '#snippet_custom_body span:contains("custom_snippet_test")',
        run: () => null,
    },
    // There's no need to save, but canceling might or might not show a popup...
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.testSwitchWebsite('Test Website'),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Check that the custom snippet is not here",
        extra_trigger: '#oe_snippets:not(:has(#snippet_custom_body span:contains("custom_snippet_test")))',
        trigger: '#oe_snippets:has(#snippet_custom.d-none)',
        run: () => null,
    },
]);

return __exports;
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/snippet_countdown.js  *
*  Lines: 62                                                   *
***************************************************************/
odoo.define('@website/../tests/tours/snippet_countdown', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_countdown', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_countdown', name: 'Countdown'}),
    wTourUtils.clickOnSnippet({id: 's_countdown', name: 'Countdown'}),
    wTourUtils.changeOption('countdown', 'we-select:has([data-end-action]) we-toggler', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button[data-end-action="message"]', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button.toggle-edit-message', 'message preview'),
    // The next two steps check that the end message does not disappear when a
    // widgets_start_request is triggered.
    {
        content: "Hover an option which has a preview",
        trigger: '[data-select-class="o_half_screen_height"]',
        run: function (actions) {
            this.$anchor.trigger('mouseover');
            this.$anchor.trigger('mouseenter');
        },
    },
    {
        content: "Check that the countdown message is still displayed",
        trigger: 'iframe .s_countdown .s_picture',
        run: () => {
            // Just a visibility check

            // Also make sure the mouseout and mouseleave are triggered so that
            // next steps make sense.
            // TODO the next steps are not actually testing anything without
            // it and the mouseout and mouseleave make sense but really it
            // should not be *necessary* to simulate those for the editor flow
            // to make some sense.
            const $previousAnchor = $('[data-select-class="o_half_screen_height"]');
            $previousAnchor.trigger('mouseout');
            $previousAnchor.trigger('mouseleave');
        },
    },
    // Next, we change the end action to message and no countdown while the edit
    // message toggle is still activated. It should hide the countdown
    wTourUtils.changeOption('countdown', 'we-select:has([data-end-action]) we-toggler', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button[data-end-action="message_no_countdown"]', 'end action'),
    {
        content: "Check that the countdown is not displayed",
        trigger: 'iframe .s_countdown:has(.s_countdown_canvas_wrapper:not(:visible))',
        run: () => null, // Just a visibility check
    },
    {
        content: "Check that the message is still displayed",
        trigger: 'iframe .s_countdown .s_picture',
        run: () => null, // Just a visibility check
    },
]);

return __exports;
});
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/snippet_editor_panel_options.js  *
*  Lines: 210                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/snippet_editor_panel_options', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_editor_panel_options', {
    test: true,
    url: '/',
    edition: true,
}, [
wTourUtils.dragNDrop({
    id: 's_text_image',
    name: 'Text - Image',
}),
// Test keeping the text selection when using the width option.
{
    content: "Click on the first paragraph.",
    trigger: 'iframe .s_text_image p',
}, {
    content: "The text toolbar should be visible. The paragraph should be selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_image p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph was not correctly selected.");
        }
    },
}, {
    content: "Click on the width option.",
    trigger: '[data-select-class="o_container_small"]',
}, {
    content: "The snippet should have the correct class.",
    trigger: 'iframe .s_text_image > .o_container_small',
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_image p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test the anchor option.
{
    content: "Click on the anchor option",
    trigger: '#oe_snippets .snippet-option-anchor we-button',
    run() {
        // The clipboard cannot be accessed from a script.
        // https://w3c.github.io/editing/docs/execCommand/#dfn-the-copy-command
        // The execCommand is patched for that step so that ClipboardJS still
        // sends the 'success' event.
        const oldExecCommand = document.execCommand;
        document.execCommand = () => true;
        this.$anchor[0].click();
        document.execCommand = oldExecCommand;
    }
}, {
    content: "Check the copied url from the notification toast",
    trigger: '.o_notification_manager .o_notification_content',
    run() {
        const { textContent } = this.$anchor[0];
        const url = textContent.substring(textContent.indexOf('/'));

        // The url should not target the client action
        if (url.startsWith('/@')) {
            console.error('The anchor option should target the frontend');
        }

        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const snippetId = iframeDocument.querySelector('.s_text_image').id;
        if (!url || url.indexOf(snippetId) < 0) {
            console.error('The anchor option does not target the correct snippet.');
        }
    },
},
// Test keeping the text selection when adding columns to a snippet with none.
wTourUtils.goBackToBlocks(),
wTourUtils.dragNDrop({
    id: 's_text_block',
    name: 'Text',
}),
{
    content: "Click on the first paragraph.",
    trigger: 'iframe .s_text_block p',
}, {
    content: "The text toolbar should be visible. The paragraph should be selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph was not correctly selected.");
        }
    },
}, {
    content: "Click on the columns option.",
    trigger: '.snippet-option-layout_column we-select',
},
{
    content: "Change the number of columns.",
    trigger: '.snippet-option-layout_column [data-select-count="3"]',
}, {
    content: "The snippet should have the correct number of columns.",
    trigger: 'iframe .s_text_block .container > .row',
    run() {
        if (this.$anchor[0].childElementCount !== 3) {
            console.error("The snippet does not have the correct number of columns");
        }
    },
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when removing all columns of a snippet.
{
    content: "Click on the columns option.",
    trigger: '.snippet-option-layout_column we-select',
},
{
    content: "Change the number of columns.",
    trigger: '.snippet-option-layout_column [data-select-count="0"]',
}, {
    content: "The snippet should have the correct number of columns.",
    trigger: 'iframe .s_text_block .container:not(:has(.row))',
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when toggling the grid mode.
wTourUtils.changeOption("layout_column", 'we-button[data-name="grid_mode"]'),
{
    content: "The snippet row should have the grid mode class.",
    trigger: "iframe .s_text_block .row.o_grid_mode",
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: "#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container",
    run() {
        const iframeDocument = document.querySelector(".o_iframe").contentDocument;
        const pText = iframeDocument.querySelector(".s_text_block p").textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when toggling back the normal mode.
wTourUtils.changeOption("layout_column", 'we-button[data-name="normal_mode"]'),
{
    content: "The snippet row should not have the grid mode class anymore.",
    trigger: "iframe .s_text_block .row:not(.o_grid_mode)",
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: "#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container",
    run() {
        const iframeDocument = document.querySelector(".o_iframe").contentDocument;
        const pText = iframeDocument.querySelector(".s_text_block p").textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test close dropdowns if click anywhere outside the dropdown
{
    content: "Open text style dropdown.",
    trigger: "#style button.dropdown-toggle",
}, {
    content: "Check if dropdown opened correctly.",
    trigger: "#style button[data-bs-toggle=dropdown][aria-expanded=true]",
    run: () => {}, // It's a check.
}, {
    content: "Click on the first paragraph again.",
    trigger: "iframe .s_text_block p",
}, {
    content: "Check if dropdown closed correctly.",
    trigger: "#style button[data-bs-toggle=dropdown][aria-expanded=false]",
    run: () => {}, // It's a check.
},
...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website/static/tests/tours/snippet_empty_parent_autoremove.js  *
*  Lines: 69                                                                 *
*****************************************************************************/
odoo.define("website.tour.snippet_empty_parent_autoremove", function (require) {
"use strict";

const wTourUtils = require('website.tour_utils');

function removeSelectedBlock() {
    return {
        content: "Remove selected block",
        trigger: '#oe_snippets we-customizeblock-options:nth-last-child(3) .oe_snippet_remove',
    };
}

wTourUtils.registerWebsitePreviewTour('snippet_empty_parent_autoremove', {
    test: true,
    url: '/',
    edition: true,
}, [
    // Base case: remove both columns from text - image
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Click on second column",
        trigger: 'iframe #wrap .s_text_image .row > :nth-child(2)',
    },
    removeSelectedBlock(),
    {
        content: "Click on first column",
        trigger: 'iframe #wrap .s_text_image .row > :first-child',
    },
    removeSelectedBlock(),
    {
        content: "Check that #wrap is empty",
        trigger: 'iframe #wrap:empty',
    },

    // Banner: test that parallax, bg-filter and shape are not treated as content
    wTourUtils.dragNDrop({
        id: 's_banner',
        name: 'Banner',
    }),
    wTourUtils.clickOnSnippet({
        id: 's_banner',
        name: 'Banner',
    }),
    {
        content: "Check that parallax is present",
        trigger: 'iframe #wrap .s_banner .s_parallax_bg',
        run: () => null,
    },
    wTourUtils.changeOption('ColoredLevelBackground', 'Shape'),
    {
        content: "Check that shape is present",
        trigger: 'iframe #wrap .s_banner .o_we_shape',
        run: () => null,
    },
    {
        content: "Click on first column",
        trigger: 'iframe #wrap .s_banner .row > :first-child',
    },
    removeSelectedBlock(),
    {
        content: "Check that #wrap is empty",
        trigger: 'iframe #wrap:empty',
        run: () => null,
    },
]);
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/snippet_image_gallery.js  *
*  Lines: 154                                                      *
*******************************************************************/
odoo.define('@website/../tests/tours/snippet_image_gallery', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_image_gallery', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_image_gallery', name: 'Images Wall'}),
    ...wTourUtils.clickOnSave(),
    {
        content: 'Click on an image of the Image Wall',
        trigger: 'iframe .s_image_gallery img',
        run: 'click',
    },
    {
        content: 'Check that the modal has opened properly',
        trigger: 'iframe .s_gallery_lightbox img',
        run: () => {}, // This is a check.
    },
]);

wTourUtils.registerWebsitePreviewTour("snippet_image_gallery_remove", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_image_gallery",
        name: "Image Gallery",
}), wTourUtils.clickOnSnippet({
    id: 's_image_gallery',
    name: 'Image Gallery',
}), {
    content: "Click on Remove all",
    trigger: "we-button:has(div:contains('Remove all'))",
}, {
    content: "Click on Add Images",
    trigger: "iframe span:contains('Add Images')",
}, {
    content: "Click on the first new image",
    trigger: ".o_select_media_dialog img[title='s_default_image.jpg']",
}, {
    content: "Click on the second new image",
    trigger: ".o_select_media_dialog img[title='s_default_image2.jpg']",
},
    wTourUtils.addMedia(),
   {
    content: "Click on the image of the Image Gallery snippet",
    trigger: "iframe .s_image_gallery .carousel-item.active  img",
}, {
    content: "Check that the Snippet Editor of the clicked image has been loaded",
    trigger: "we-customizeblock-options span:contains('Image'):not(:contains('Image Gallery'))",
    run: () => null,
}, {
    content: "Click on Remove Block",
    trigger: ".o_we_customize_panel we-title:has(span:contains('Image Gallery')) we-button[title='Remove Block']",
}, {
    content: "Check that the Image Gallery snippet has been removed",
    trigger: "iframe #wrap:not(:has(.s_image_gallery))",
    run: () => null,
}]);

wTourUtils.registerWebsitePreviewTour("snippet_image_gallery_reorder", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_image_gallery",
        name: "Image Gallery",
    }),
{
    content: "Click on the first image of the snippet",
    trigger: "iframe .s_image_gallery .carousel-item.active img",
},
    wTourUtils.changeOption('ImageTools', 'we-select:contains("Filter") we-toggler'),
    wTourUtils.changeOption('ImageTools', '[data-gl-filter="blur"]'),
{
    content: "Check that the image has the correct filter",
    trigger: ".snippet-option-ImageTools we-select:contains('Filter') we-toggler:contains('Blur')",
    run: () => null, // This is a check.
}, {
    content: "Click on move to next",
    trigger: ".snippet-option-gallery_img we-button[data-position='next']",
}, {
    content: "Check that the image has been moved",
    trigger: "iframe .s_image_gallery .carousel-item.active img[data-index='1']",
    run: () => null, // This is a check.
}, {
    content: "Click on the footer to reload the editor panel",
    trigger: "iframe #footer",
}, {
    content: "Check that the footer options have been loaded",
    trigger: ".snippet-option-HideFooter we-button:contains('Page Visibility')",
    run: () => null, // This is a check.
}, {
    content: "Click on the moved image",
    trigger: "iframe .s_image_gallery .carousel-item.active img[data-index='1'][data-gl-filter='blur']",
}, {
    content: "Check that the image still has the correct filter",
    trigger: ".snippet-option-ImageTools we-select:contains('Filter') we-toggler:contains('Blur')",
    run: () => null, // This is a check.
}, {
    content: "Click to access next image",
    trigger: "iframe .s_image_gallery .carousel-control-next",
}, {
    content: "Check that the option has changed",
    trigger: ".snippet-option-ImageTools we-select:contains('Filter') we-toggler:not(:contains('Blur'))",
    run: () => null, // This is a check.
}, {
    content: "Click to access previous image",
    trigger: "iframe .s_image_gallery .carousel-control-prev",
}, {
    content: "Check that the option is restored",
    trigger: ".snippet-option-ImageTools we-select:contains('Filter') we-toggler:contains('Blur')",
    run: () => null, // This is a check.
}]);

wTourUtils.registerWebsitePreviewTour("snippet_image_gallery_thumbnail_update", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_image_gallery",
        name: "Image Gallery",
    }),
    wTourUtils.clickOnSnippet({
        id: "s_image_gallery",
        name: "Image Gallery",
    }),
    wTourUtils.changeOption("gallery", "we-button[data-add-images]"),
{
    content: "Click on the default image",
    trigger: ".o_select_media_dialog img[title='s_default_image.jpg']",
},
    wTourUtils.addMedia(),
{
    content: "Check that the new image has been added",
    trigger: "iframe .s_image_gallery:has(img[data-index='3'])",
    run: () => null, // This is a check.
}, {
    content: "Check that the thumbnail of the first image has not been changed",
    trigger: "iframe .s_image_gallery ul.carousel-indicators li:first-child[style='background-image: url(/web/image/website.library_image_08)']",
    run: () => null, // This is a check.
}]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/snippet_images_wall.js  *
*  Lines: 96                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/snippet_images_wall', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

const selectSignImageStep = {
    content: "Click on sign image",
    extra_trigger: ".o_we_customize_panel:not(:has(.snippet-option-gallery_img))",
    trigger: "iframe .s_image_gallery img[data-original-src*='sign']",
};
// Without reselecting the image, the tour manages to click on the
// move button before the active image is updated.
// We need to first select the footer and then the social media in it to prevent
// race condition with the potential loader after image wall order option.
const reselectSignImageSteps = [{
    content: "Select footer",
    extra_trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(3):has(img[data-index='5'])",
    trigger: "iframe footer",
}, {
    content: "Select social media in footer",
    trigger: "iframe footer .s_social_media",
}, {
    content: "Check that the social media options are displayed",
    trigger: "we-list[data-name='social_media_list']",
    run: () => {}, // This is a check.
}, selectSignImageStep];

wTourUtils.registerWebsitePreviewTour("snippet_images_wall", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_images_wall",
        name: "Images Wall",
}), wTourUtils.clickOnSnippet({
    id: "s_image_gallery",
    name: "Images Wall",
}),
selectSignImageStep,
{
    content: "Click on add a link",
    trigger: ".snippet-option-ReplaceMedia we-button[data-set-link]",
}, {
    content: "Change the link of the image",
    trigger: ".snippet-option-ReplaceMedia [data-set-url] input",
    run: "text /contactus",
}, {
    content: "Click on move to previous",
    trigger: ".snippet-option-gallery_img we-button[data-position='prev']",
}, {
    content: "Check if sign is in second column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(2):has(a[href='/contactus'] img[data-index='1'][data-original-src*='sign'])",
    run: () => {}, // This is a check.
},
...reselectSignImageSteps,
{
    content: "Click on move to first",
    trigger: ".snippet-option-gallery_img we-button[data-position='first']",
}, {
    content: "Check if sign is in first column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(1):has(img[data-index='0'][data-original-src*='sign'])",
    run: () => {}, // This is a check.
},
...reselectSignImageSteps,
{
    content: "Click on move to previous",
    trigger: ".snippet-option-gallery_img we-button[data-position='prev']",
}, {
    content: "Check if sign is in third column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(3):has(img[data-index='5'][data-original-src*='sign'])",
    run: () => {}, // This is a check.
},
...reselectSignImageSteps,
{
    content: "Click on move to next",
    trigger: ".snippet-option-gallery_img we-button[data-position='next']",
}, {
    content: "Check if sign is in first column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(1):has(img[data-index='0'][data-original-src*='sign'])",
    run: () => {}, // This is a check.
},
...reselectSignImageSteps,
{
    content: "Click on move to last",
    trigger: ".snippet-option-gallery_img we-button[data-position='last']",
}, {
    content: "Check layout",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(3):has(img[data-index='5'][data-original-src*='sign'])",
    run: () => {}, // This is a check.
}]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_add_remove.js  *
*  Lines: 85                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_add_remove', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_popup_add_remove', {
    test: true,
    url: '/',
    edition: true,
}, [{
    content: 'Drop s_popup snippet',
    trigger: '.oe_snippet:has( > [data-snippet="s_popup"]) .oe_snippet_thumbnail',
    run: "drag_and_drop iframe #wrap",
}, {
    content: 'Edit s_popup snippet',
    in_modal: false,
    trigger: 'iframe #wrap.o_editable [data-snippet="s_popup"] .row > div', // Click deep in the snippet structure
}, {
    content: 'Check s_popup setting are loaded, wait panel is visible',
    in_modal: false,
    trigger: '.o_we_customize_panel',
    run: () => null,
},
...wTourUtils.clickOnSave(),
...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: 'Toggle the visibility of the Popup',
    in_modal: false,
    trigger: '.o_we_invisible_el_panel .o_we_invisible_entry:contains("Popup")',
}, {
    content: 'Edit s_popup snippet(2)',
    in_modal: false,
    trigger: 'iframe #wrap.o_editable [data-snippet="s_popup"] h2',
    run: function() {
        // Simulating pressing enter.
        const anchor = this.$anchor[0];
        // Trick the editor into keyboardType === 'PHYSICAL' and press enter
        anchor.dispatchEvent(new KeyboardEvent("keydown", { key: "Enter", bubbles: true }));
        // Trigger editor's '_onInput' handler, which leads to historyRollback.
        anchor.dispatchEvent(new InputEvent('input', { inputType: 'insertLineBreak', bubbles: true }));
    }
}, {
    content: 'Check the s_popup was visible',
    in_modal: false,
    trigger: 'iframe #wrap.o_editable [data-snippet="s_popup"]:not(.d-none)',
    run: () => null,
}, {
    content: `Remove the s_popup snippet`,
    in_modal: false,
    trigger: '.o_we_customize_panel we-customizeblock-options:contains("Popup") we-button.oe_snippet_remove:first',
}, {
    content: 'Check the s_popup was removed',
    in_modal: false,
    trigger: 'iframe #wrap.o_editable:not(:has([data-snippet="s_popup"]))',
    run: () => null,
},
// Test that undoing dropping the snippet removes the invisible elements panel.
{
    content: "Drop the snippet again.",
    trigger: '#oe_snippets .oe_snippet:has(> [data-snippet="s_popup"]) .oe_snippet_thumbnail',
    run: "drag_and_drop iframe #wrap",
}, {
    content: "The popup should be in the invisible elements panel.",
    in_modal: false,
    trigger: '.o_we_invisible_el_panel .o_we_invisible_entry',
    run: () => null, // It's a check.
}, {
    content: "Click on the 'undo' button.",
    in_modal: false,
    trigger: '#oe_snippets button[data-action="undo"]',
}, {
    content: "Check that the s_popup was removed.",
    in_modal: false,
    trigger: 'iframe #wrap.o_editable:not(:has([data-snippet="s_popup"]))',
    run: () => null, // It's a check.
}, {
    content: "The invisible elements panel should also be removed.",
    trigger: '#oe_snippets:has(.o_we_invisible_el_panel.d-none)',
    run: () => null, // It's a check.
}]);

return __exports;
});
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_and_animations.js  *
*  Lines: 124                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_and_animations', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("website.tour_utils");

const snippets = [
    {
        id: "s_popup",
        name: "Popup",
    },
    {
        id: "s_media_list",
        name: "Media List",
    },
    {
        id: "s_three_columns",
        name: "Columns",
    },
];

const setOnScrollAnim = function () {
    return [
        wTourUtils.changeOption("WebsiteAnimate", 'we-select[data-is-animation-type-selection="true"] we-toggler'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-button[data-animation-mode="onScroll"]'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-select[data-name="animation_effect_opt"] we-toggler'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-button[data-name="o_anim_slide_in_opt"]'),
    ];
};

wTourUtils.registerWebsitePreviewTour("snippet_popup_and_animations", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[2]), // Columns
    wTourUtils.clickOnElement("3rd columns", "iframe .s_three_columns .row > :last-child"),
    ...setOnScrollAnim(),
    {
        content: "Open the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    {
        content: "Scroll to top",
        trigger: "iframe #wrapwrap",
        extra_trigger: "iframe #website_cookies_bar:not(.d-none)",
        run: function () {
            const animatedColumnEl = this.$anchor[0].querySelector(".s_three_columns .row > :last-child");
            // When the animated element is fully visible, its animation delay
            // should be rounded to -1 in the following condition.
            if (Math.round(parseFloat(animatedColumnEl.style.animationDelay)) !== -1) {
                console.error("The scroll animation in the page did not start properly with the cookies bar open.");
            }
            this.$anchor[0].scrollTo({
                top: 0,
                left: 0,
                behavior: 'smooth'
            });
        },
    },
    {
        content: "Wait for the page to be scrolled to the top.",
        trigger: "iframe .s_three_columns .row > :last-child:not(.o_animating)",
        extra_trigger: "iframe header#top:not(.o_header_affixed)",
        run: function () {
            // If the column has been animated successfully, the animation delay
            // should be set to approximately zero when it is not visible.
            // The main goal of the following condition is to verify if the
            // animation delay is being updated as expected.
            if (Math.round(parseFloat(this.$anchor[0].style.animationDelay)) !== 0) {
                console.error("The scroll animation in the page did not end properly with the cookies bar open.");
            }
        },
    },
    {
        content: "Close the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
        run: "click",
    },
    wTourUtils.dragNDrop(snippets[0]), // Popup
    wTourUtils.dragNDrop(snippets[1]), // Media List
    {
        content: "Drag the Columns building block and drop it at the bottom of the popup.",
        trigger: '#oe_snippets .oe_snippet[name="Columns"] .oe_snippet_thumbnail:not(.o_we_already_dragging)',
        extra_trigger: ".o_website_preview.editor_enable.editor_has_snippets",
        run: "drag_and_drop iframe #wrapwrap .modal-content .s_media_list .container > .row > :last-child",
    },
    wTourUtils.clickOnElement("3rd columns", "iframe .s_popup .s_three_columns .row > :last-child"),
    ...setOnScrollAnim(),
    {
        content: "Verify the animation delay of the animated element in the popup at the beginning",
        trigger: "iframe .s_popup .modal",
        run: function () {
            const animatedColumnEl = this.$anchor[0].querySelector(".s_three_columns .row > :last-child");
            // When the animated element is fully visible, its animation delay
            // should be rounded to -1 in the following condition.
            if (Math.round(parseFloat(animatedColumnEl.style.animationDelay)) !== -1) {
                console.error("The scroll animation in the modal did not start properly.");
            }
            this.$anchor[0].closest(".modal").scrollTo({
                top: 0,
                left: 0,
                behavior: 'smooth'
            });
        },
    },
    {
        content: "Wait until the column is no longer animated/visible.",
        trigger: "iframe .s_popup .s_three_columns .row > :last-child:not(.o_animating)",
        run: function () {
            // If the column has been animated successfully, the animation delay
            // should be set to approximately zero when it is not visible.
            if (Math.round(parseFloat(this.$anchor[0].style.animationDelay)) !== 0) {
                console.error("The scroll animation in the modal did not end properly.");
            }
        },
    },
]);

return __exports;
});
;

/*************************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_and_scrollbar.js  *
*  Lines: 131                                                            *
*************************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_and_scrollbar', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("website.tour_utils");

const snippets = [
    {
        id: "s_popup",
        name: "Popup",
    },
    {
        id: "s_media_list",
        name: "Media List",
    },
];

const checkScrollbar = function (hasScrollbar) {
    return {
        content: `Check that the #wrapwrap ${hasScrollbar ? "has" : "does not have"} a vertical scrollbar.`,
        trigger: `iframe ${hasScrollbar ? "body:not(.modal-open)" : "body.modal-open"}`,
        run: function () {
            const wrapwrapEl = this.$anchor[0].querySelector("#wrapwrap");
            const wrapwrapStyle = window.getComputedStyle(wrapwrapEl);
            if (!hasScrollbar && (wrapwrapStyle.overflow !== "hidden" || parseFloat(wrapwrapStyle.paddingRight) < 1)) {
                console.error("error The #wrapwrap vertical scrollbar should be hidden");
            } else if (hasScrollbar && (wrapwrapStyle.overflow === "hidden" || parseFloat(wrapwrapStyle.paddingRight) > 0)) {
                console.error("error The #wrapwrap vertical scrollbar should be displayed");
            }
        },
    };
};

const toggleBackdrop = function () {
    return wTourUtils.changeOption('SnippetPopup', 'we-button[data-name="popup_backdrop_opt"] we-checkbox', 'backdrop');
};

wTourUtils.registerWebsitePreviewTour("snippet_popup_and_scrollbar", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[0]), // Popup
    checkScrollbar(false),
    wTourUtils.clickOnSnippet(snippets[0]), // Popup
    toggleBackdrop(), // hide Popup backdrop
    checkScrollbar(true),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag the Media List block and drop it in the popup.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #wrap .s_popup .modal-content.oe_structure",
    },
    checkScrollbar(false),
    {
        content: "Select the Media List snippet in the Popup.",
        trigger: "iframe #wrap .s_popup .modal-content .s_media_list",
    },
    {
        content: "Remove the Media List snippet in the Popup.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    checkScrollbar(true),
    toggleBackdrop(), // show Popup backdrop
    checkScrollbar(false),
    {
        content: "Close the Popup.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    checkScrollbar(true),
    {
        content: "Open the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:last-child",
    },
    checkScrollbar(true),
    toggleBackdrop(), // show Cookies Bar backdrop
    checkScrollbar(false),
    toggleBackdrop(), // hide Cookies Bar backdrop
    checkScrollbar(true),
    {
        content: "Open the Popup.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    checkScrollbar(false),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag the Media List block and drop it in the popup.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #wrap .s_popup .modal-content.oe_structure",
    },
    checkScrollbar(false),
    wTourUtils.clickOnSnippet(snippets[0]), // Popup
    {
        content: "Remove the s_popup snippet",
        trigger: ".o_we_customize_panel we-customizeblock-options:contains('Popup') we-button.oe_snippet_remove:first",
        in_modal: false,
        run: "click",
    },
    checkScrollbar(true),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag a Media List snippet and drop it in the Cookies Bar.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #website_cookies_bar .modal-content.oe_structure",
    },
    {
        content: "Select the Media List snippet in the Cookies Bar.",
        trigger: "iframe #website_cookies_bar .modal-content .s_media_list",
    },
    {
        content: "Duplicate the Media List snippet",
        trigger: ".o_we_customize_panel we-customizeblock-options:contains('Media List') we-button.oe_snippet_clone:first",
        in_modal: false,
        run: "click",
    },
    checkScrollbar(false),
    {
        content: "Remove the first Media List snippet in the Cookies Bar.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    {
        content: "Remove the second Media List snippet in the Cookies Bar.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    checkScrollbar(true),
]);

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/snippet_social_media.js  *
*  Lines: 238                                                     *
******************************************************************/
odoo.define('@website/../tests/tours/snippet_social_media', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

// TODO: Remove following steps once fix of task-3212519 is done.
// Those steps are preventing a race condition to happen in the meantime: when
// the tour was clicking on the toggle to hide facebook in the next step, it
// would actually "ignore" the result of the click on the toggle and would just
// consider the action of focusing out the input.
const socialRaceConditionClass = 'social_media_race_condition';
const preventRaceConditionStep = [{
    content: "Wait a few ms to avoid race condition",
    // Ensure the class is remove from previous call of those steps
    extra_trigger: `body:not(.${socialRaceConditionClass})`,
    trigger: 'iframe .s_social_media',
    run() {
        setTimeout(() => {
            document.body.classList.add(socialRaceConditionClass);
        }, 500);
    }
}, {
    content: "Check the race condition class is added after a few ms",
    trigger: `body.${socialRaceConditionClass}`,
    run() {
        document.body.classList.remove(socialRaceConditionClass);
    }
}];

const replaceIconByImage = function (url) {
    return [{
        content: "Replace the icon by an image",
        trigger: `iframe .s_social_media a[href='${url}'] i.fa`,
        run: "dblclick",
    },
    {
        content: "Go to the Images tab in the media dialog",
        trigger: ".o_select_media_dialog .o_notebook_headers .nav-item a:contains('Images')",
    },
    {
        content: "Select the image",
        trigger: ".o_select_media_dialog img[title='s_banner_default_image.jpg']",
    },
    ...preventRaceConditionStep,
    ];
};

const addNewSocialNetwork = function (optionIndex, linkIndex, url, replaceIcon = false) {
    const replaceIconByImageSteps = replaceIcon ? replaceIconByImage("https://www.example.com") : [];
    return [{
        content: "Click on Add New Social Network",
        trigger: 'we-list we-button.o_we_list_add_optional',
    },
    {
        content: "Ensure new option is found",
        trigger: `we-list table input:eq(${optionIndex})[data-list-position=${optionIndex}][data-dom-position=${linkIndex}][data-undeletable=false]`,
        run: () => {}, // This is a check.
    },
    {
        content: "Ensure new link is found",
        trigger: `iframe .s_social_media:has(a:eq(${linkIndex})[href='https://www.example.com'])`,
        run: () => {}, // This is a check.
    },
    ...replaceIconByImageSteps,
    {
        content: "Change added Option label",
        trigger: `we-list table input:eq(${optionIndex})`,
        run: `text ${url}`,
    },
    {
        content: "Ensure new link is changed",
        trigger: `iframe .s_social_media:has(a:eq(${linkIndex})[href='${url}'])`,
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    ];
};

wTourUtils.registerWebsitePreviewTour('snippet_social_media', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_social_media', name: 'Social Media'}),
    wTourUtils.clickOnSnippet({id: 's_social_media', name: 'Social Media'}),
    ...addNewSocialNetwork(6, 6, 'https://www.youtu.be/y7TlnAv6cto'),
    {
        content: 'Click on the toggle to hide Facebook',
        trigger: 'we-list table we-button.o_we_user_value_widget',
        run: 'click',
    },
    {
        content: "Ensure twitter became first",
        trigger: 'iframe .s_social_media:has(a:eq(0)[href="/website/social/twitter"])',
        run: () => {}, // This is a check.
    },
    {
        content: 'Drag the facebook link at the end of the list',
        trigger: 'we-list table we-button.o_we_drag_handle',
        position: 'bottom',
        run: "drag_and_drop we-list table tr:last-child",
    },
    {
        content: 'Check drop completed',
        trigger: 'we-list table input:eq(6)[data-media="facebook"]',
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    // Create a Link for which we don't have an icon to propose.
    ...addNewSocialNetwork(7, 6, 'https://whatever.it/1EdSw9X'),
    // Create a custom instagram link.
    ...addNewSocialNetwork(8, 7, 'https://instagr.am/odoo.official/'),
    {
        content: "Check if the result is correct before removing",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter'])" +
                 ":has(a:eq(1)[href='/website/social/linkedin'])" +
                 ":has(a:eq(2)[href='/website/social/youtube'])" +
                 ":has(a:eq(3)[href='/website/social/instagram'])" +
                 ":has(a:eq(4)[href='/website/social/github'])" +
                 ":has(a:eq(5)[href='https://www.youtu.be/y7TlnAv6cto']:has(i.fa-youtube))" +
                 ":has(a:eq(6)[href='https://whatever.it/1EdSw9X']:has(i.fa-pencil))" +
                 ":has(a:eq(7)[href='https://instagr.am/odoo.official/']:has(i.fa-instagram))",
        run: () => {}, // This is a check.
    },
    // Create a custom link, not officially supported, ensure icon is found.
    {
        content: 'Change custom social to unsupported link',
        trigger: 'we-list table input:eq(5)',
        run: 'text https://www.paypal.com/abc',
    },
    {
        content: "Ensure paypal icon is found",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(5)[href='https://www.paypal.com/abc']:has(i.fa-paypal))",
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    {
        content: 'Delete the custom link',
        trigger: 'we-list we-button.o_we_select_remove_option',
        run: 'click',
    },
    {
        content: "Ensure custom link was removed",
        trigger: 'iframe .s_social_media:has(a:eq(5)[href="https://whatever.it/1EdSw9X"]:has(i.fa-pencil))',
        run: () => {}, // This is a check.
    },
    {
        content: 'Click on the toggle to show Facebook',
        trigger: 'we-list table we-button.o_we_user_value_widget:not(.active)',
        run: 'click',
    },
    {
        content: "Check if the result is correct after removing",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter'])" +
                 ":has(a:eq(1)[href='/website/social/linkedin'])" +
                 ":has(a:eq(2)[href='/website/social/youtube'])" +
                 ":has(a:eq(3)[href='/website/social/instagram'])" +
                 ":has(a:eq(4)[href='/website/social/github'])" +
                 ":has(a:eq(5)[href='/website/social/facebook'])" +
                 ":has(a:eq(6)[href='https://whatever.it/1EdSw9X']:has(i.fa-pencil))" +
                 ":has(a:eq(7)[href='https://instagr.am/odoo.official/']:has(i.fa-instagram))",
        run: () => {}, // This is a check.
    },
    {
        content: 'Change url of the DB instagram link',
        trigger: 'we-list table input:eq(3)',
        run: 'text https://instagram.com/odoo.official/',
    },
    {
        content: 'Save',
        trigger: 'button[data-action=save]',
        run: function () {
            // We need this 'setTimeout' to ensure that the 'change' event of
            // the input has enough time to be executed. Without it, the click
            // on the save button takes priority, and the 'change' event is not
            // executed (see the '_onListItemChange' function of the 'we-list'
            // widget)."
            setTimeout(() => {
                this.$anchor[0].click();
            }, 500);
        },
    },
    {
        content: "Wait until save's calls are finished",
        trigger: "iframe body:not(.editor_enable)",
        run: function () {}, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet({
        id: 's_social_media',
        name: 'Social Media',
    }),
    {
        content: "Check if we can still change custom icons",
        trigger: 'iframe .s_social_media a[href="https://whatever.it/1EdSw9X"] i.fa-pencil',
        run: 'dblclick',
    },
    {
        content: "Select a new icon",
        trigger: '.o_select_media_dialog .fa-heart',
    },
    {
        content: "Check if the result is correct after setting the icon",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter'])" +
                 ":has(a:eq(1)[href='/website/social/linkedin'])" +
                 ":has(a:eq(2)[href='/website/social/youtube'])" +
                 ":has(a:eq(3)[href='/website/social/instagram'])" +
                 ":has(a:eq(4)[href='/website/social/github'])" +
                 ":has(a:eq(5)[href='/website/social/facebook'])" +
                 ":has(a:eq(6)[href='https://whatever.it/1EdSw9X']:has(i.fa-heart))" +
                 ":has(a:eq(7)[href='https://instagr.am/odoo.official/']:has(i.fa-instagram))",
        run: () => {}, // This is a check.
    },
    // Create a social network but replace its icon by an image before setting
    // the link (`replaceIcon` parameter set to `true`).
    ...addNewSocialNetwork(8, 8, "https://google.com", true),
    // Create a social network after replacing the first icon by an image.
    ...replaceIconByImage("/website/social/twitter"),
    ...addNewSocialNetwork(9, 9, "https://facebook.com"),
    {
        content: "Check if the result is correct after adding images",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter']:has(img))" +
                 ":has(a:eq(8)[href='https://google.com']:has(img))" +
                 ":has(a:eq(9)[href='https://facebook.com']:has(img))",
        run: () => {}, // This is a check.
    },
    ...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/snippet_table_of_content.js  *
*  Lines: 89                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/snippet_table_of_content', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

const scrollToHeading = function (position) {
    return {
        content: `Scroll to h1 number ${position}`,
        trigger: `iframe h1:eq(${position})`,
        run: function () {
            this.$anchor[0].scrollIntoView(true);
        },
    };
};
const checkTOCNavBar = function (tocPosition, activeHeaderPosition) {
    return {
        content: `Check that the header ${activeHeaderPosition} is active for TOC ${tocPosition}`,
        trigger: `iframe .s_table_of_content:eq(${tocPosition}) .table_of_content_link:eq(${activeHeaderPosition}).active `,
        run: () => {}, // This is a check.
    };
};

wTourUtils.registerWebsitePreviewTour('snippet_table_of_content', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_table_of_content', name: 'Table of Content'}),
    wTourUtils.dragNDrop({id: 's_table_of_content', name: 'Table of Content'}),
    // To make sure that the public widgets of the two previous ones started.
    wTourUtils.dragNDrop({id: 's_banner', name: 'Banner'}),
    ...wTourUtils.clickOnSave(),
    checkTOCNavBar(0, 0),
    checkTOCNavBar(1, 0),
    scrollToHeading(1),
    checkTOCNavBar(0, 1),
    checkTOCNavBar(1, 0),
    scrollToHeading(2),
    checkTOCNavBar(1, 0),
    scrollToHeading(3),
    checkTOCNavBar(1, 1),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on the first TOC's title",
        trigger: 'iframe .s_table_of_content:eq(0) h1',
    },
    {
        content: "Hide the first TOC on mobile",
        trigger: '[data-toggle-device-visibility="no_mobile"]',
    },
    {
        content: "Click on the second TOC's title",
        trigger: 'iframe .s_table_of_content:eq(1) h1',
    },
    {
        content: "Hide the second TOC on desktop",
        trigger: '[data-toggle-device-visibility="no_desktop"]',
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that we have the good TOC on desktop",
        trigger: 'iframe .s_table_of_content.o_snippet_mobile_invisible',
        run: () => {
            if ($(document.querySelector('iframe .s_table_of_content.o_snippet_desktop_invisible'))
                    .is(':visible')) {
                console.error('The mobile TOC should not be visible on desktop');
            }
        },
    },
    {
        content: "Toggle the mobile view",
        trigger: '.o_mobile_preview',
    },
    {
        content: "Check that we have the good TOC on mobile",
        trigger: 'iframe .s_table_of_content.o_snippet_desktop_invisible',
        run: () => {
            if ($(document.querySelector('iframe .s_table_of_content.o_snippet_mobile_invisible'))
                    .is(':visible')) {
                console.error('The desktop TOC should not be visible on mobile');
            }
        },
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/snippet_translation.js  *
*  Lines: 56                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/snippet_translation', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_translation', {
    url: '/',
    edition: true,
    test: true,
}, [
    wTourUtils.dragNDrop({name: 'Cover'}),
    {
        content: "Check that contact us contain Parseltongue",
        trigger: 'iframe .s_cover .btn-primary:contains("Contact us in Parseltongue")',
        run: () => null, // it's a check
    },
    {
        content: "Check that the save button contains 'in fu_GB'",
        trigger: '.btn[data-action="save"]:contains("Save in fu_GB")',
        run: () => null, // it's a check
    },
]);
wTourUtils.registerWebsitePreviewTour('snippet_translation_changing_lang', {
    url: '/',
    test: true,
}, [
    {
        content: "Change language to Parseltongue",
        trigger: 'iframe .js_language_selector .btn',
    },
    {
        content: "Change the language to English",
        trigger: 'iframe .js_language_selector .js_change_lang[data-url_code="en"]',
    },
    {
        content: "Enable translation",
        trigger: '.o_translate_website_container a',
    },
    {
        content: "Close the dialog",
        trigger: '.modal-footer .btn-primary',
    },
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({name: 'Cover'}),
    {
        content: "Check that contact us contain Parseltongue",
        trigger: 'iframe .s_cover .btn-primary:contains("Contact us in Parseltongue")',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/snippet_version.js  *
*  Lines: 61                                                 *
*************************************************************/
odoo.define("website.tour.snippet_version", function (require) {
"use strict";

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("snippet_version", {
    edition: true,
    url: "/",
    test: true,
}, [{
    content: "Drop s_test_snip snippet",
    trigger: '#oe_snippets .oe_snippet:has(.s_test_snip) .oe_snippet_thumbnail',
    run: "drag_and_drop iframe #wrap",
}, {
    content: "Drop s_text_image snippet",
    trigger: '#oe_snippets .oe_snippet:has(.s_text_image) .oe_snippet_thumbnail:not(.o_we_already_dragging)',
    run: "drag_and_drop iframe #wrap",
}, {
    content: "Test t-snippet and t-snippet-call: snippets have data-snippet set",
    trigger: '#oe_snippets .o_panel_body > .oe_snippet.ui-draggable',
    run: function () {
        // Tests done here as all these are not visible on the page
        const draggableSnippets = document.querySelectorAll('#oe_snippets .o_panel_body > .oe_snippet.ui-draggable > :nth-child(2)');
        if (![...draggableSnippets].every(el => el.dataset.snippet)) {
            console.error("error Some t-snippet are missing their template name");
        }
        if (!document.querySelector('#oe_snippets [data-snippet="s_test_snip"] [data-snippet="s_share"]')) {
            console.error("error s_share t-called inside s_test_snip is missing template name");
        }
        if (!document.querySelector('iframe:not(.o_ignore_in_tour)').contentDocument.querySelector('#wrap [data-snippet="s_test_snip"] [data-snippet="s_share"]')) {
            console.error("error Dropped a s_test_snip snippet but missing s_share template name in it");
        }
    },
},
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: "Modify the version of snippets",
    trigger: '#oe_snippets .o_panel_body > .oe_snippet',
    run: function () {
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_test_snip"]').dataset.vjs = '999';
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_share"]').dataset.vcss = '999';
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_text_image"]').dataset.vxml = '999';
    },
}, {
    content: "Edit s_test_snip",
    trigger: 'iframe #wrap.o_editable .s_test_snip',
}, {
    content: "Edit text_image",
    extra_trigger: 'we-customizeblock-options:contains(Test snip) .snippet-option-VersionControl > we-alert',
    trigger: 'iframe #wrap.o_editable .s_text_image',
}, {
    content: "Edit s_share",
    extra_trigger: 'we-customizeblock-options:contains(Text - Image) .snippet-option-VersionControl  > we-alert',
    trigger: 'iframe #wrap.o_editable .s_share',
}, {
    content: "s_share is outdated",
    extra_trigger: 'we-customizeblock-options:contains(Share) .snippet-option-VersionControl > we-alert',
    trigger: 'iframe body',
}]);
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/snippets_all_drag_and_drop.js  *
*  Lines: 130                                                           *
************************************************************************/
odoo.define("website.tour.snippets_all_drag_and_drop", async function (require) {
"use strict";

const { WysiwygAdapterComponent } = require('@website/components/wysiwyg_adapter/wysiwyg_adapter');
const websiteTourUtils = require('website.tour_utils');
const { patch, unpatch } = require('web.utils');

const patchWysiwygAdapter = () => patch(WysiwygAdapterComponent.prototype, 'snippets_all_drag_and_drop.wysiwyg_adapter', {
    _trigger_up(ev) {
        this._super(...arguments);
        if (ev.name === 'snippet_removed') {
            $('body').attr('test-dd-snippet-removed', true);
        }
    }
});

const unpatchWysiwygAdapter = () => unpatch(WysiwygAdapterComponent.prototype, 'snippets_all_drag_and_drop.wysiwyg_adapter');

const tour = require("web_tour.tour");

let snippetsNames = (new URL(document.location.href)).searchParams.get('snippets_names') || '';
// When this test is loaded in the backend, the search params aren't as easy to
// read as before. Little trickery to make this test run.
const searchParams = new URLSearchParams(window.location.href.split('#')[1]).get('path');
if (searchParams) {
    snippetsNames = new URLSearchParams(searchParams.split('/')[1]).get('snippets_names') || '';
    snippetsNames = snippetsNames.split(',');
}
let steps = [];
let n = 0;
for (const snippet of snippetsNames) {
    n++;
    const snippetSteps = [{
        content: `Drop ${snippet} snippet [${n}/${snippetsNames.length}]`,
        trigger: `#oe_snippets .oe_snippet:has( > [data-snippet='${snippet}']) .oe_snippet_thumbnail`,
        run: "drag_and_drop iframe #wrap",
    }, {
        content: `Edit ${snippet} snippet`,
        trigger: `iframe #wrap.o_editable [data-snippet='${snippet}']`,
    }, {
        content: `check ${snippet} setting are loaded, wait panel is visible`,
        trigger: ".o_we_customize_panel",
        run: function () {}, // it's a check
    }, {
        content: `Remove the ${snippet} snippet`, // Avoid bad perf if many snippets
        trigger: "we-button.oe_snippet_remove:last"
    }, {
        content: `click on 'BLOCKS' tab (${snippet})`,
        extra_trigger: 'body[test-dd-snippet-removed]',
        trigger: ".o_we_add_snippet_btn",
        run: function (actions) {
            $('body').removeAttr('test-dd-snippet-removed');
            actions.auto();
        },
    }];

    if (snippet === 's_google_map') {
        snippetSteps.splice(1, 3, {
            content: 'Close API Key popup',
            trigger: "iframe .modal-footer .btn-secondary",
        });
    } else if (['s_popup', 's_newsletter_subscribe_popup'].includes(snippet)) {
        snippetSteps[2]['in_modal'] = false;
        snippetSteps.splice(3, 2, {
            content: `Hide the ${snippet} popup`,
            trigger: "iframe .s_popup_close",
        }, {
            content: `Make sure ${snippet} is hidden`,
            trigger: "iframe body:not(.modal-open)",
        });
    }
    steps = steps.concat(snippetSteps);
}

tour.register("snippets_all_drag_and_drop", {
    test: true,
    // To run the tour locally, you need to insert the URL sent by the python
    // tour here. There is currently an issue with tours which don't have an URL
    // url: '/?enable_editor=1&snippets_names=s_showcase,s_numbers,s_...',
}, [
    ...websiteTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Ensure snippets are actually passed at the test.",
        trigger: "body",
        run: function () {
            // safety check, otherwise the test might "break" one day and
            // receive no steps. The test would then not test anything anymore
            // without us noticing it.
            if (steps.length < 220) {
                console.error(`This test is not behaving as it should, got only ${steps.length} steps.`);
            }
            patchWysiwygAdapter();
        },
    },
    // This first step is needed as it will be used later for inner snippets
    // Without this, it will dropped inside the footer and will need an extra
    // selector.
    {
        content: "Drop s_text_image snippet",
        trigger: "#oe_snippets .oe_snippet:has( > [data-snippet='s_text_image']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #wrap"
    },
    {
        content: "Edit s_text_image snippet",
        trigger: "iframe #wrap.o_editable [data-snippet='s_text_image']"
    },
    {
        content: "check setting are loaded, wait panel is visible",
        trigger: ".o_we_customize_panel"
    },
    // We hide the header before starting to drop snippets. This prevents
    // situations where the header's drop zones overlap with those of the #wrap,
    // ensuring that a snippet is dropped in the #wrap as expected instead of
    // the header.
    websiteTourUtils.clickOnSnippet({id: "o_header_standard", name: "Header"}),
    websiteTourUtils.changeOption("TopMenuVisibility", "we-select:has([data-visibility]) we-toggler"),
    websiteTourUtils.changeOption("TopMenuVisibility", 'we-button[data-visibility="hidden"]'),
    {
        content: "click on 'BLOCKS' tab",
        trigger: ".o_we_add_snippet_btn"
    },
].concat(steps).concat([
    {
        content: "Remove wysiwyg patch",
        trigger: "body",
        run: () => unpatchWysiwygAdapter(),
    }
]),
);
});
;

/*********************************************************************
*  Filepath: /website/static/tests/tours/specific_website_editor.js  *
*  Lines: 29                                                         *
*********************************************************************/
odoo.define('website.tour.specific_website_editor', function (require) {
'use strict';

const tour = require('web_tour.tour');
const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("generic_website_editor", {
    test: true,
    edition: true,
}, [{
    trigger: 'iframe body:not([data-hello="world"])',
    content: 'Check that the editor DOM matches its website-generic features',
    run: function () {}, // Simple check
}]);

// Good practice would have been to use `wTourUtils.registerWebsitePreviewTour`
// for this tour with `edition: true` and remove the first step to enter edit
// mode. Unfortunately this breaks the page and therefore the test fails for
// unknown reason.
tour.register('specific_website_editor', {
    test: true,
}, [
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
    trigger: 'iframe body[data-hello="world"]',
    content: 'Check that the editor DOM matches its website-specific features',
    run: function () {}, // Simple check
}]);
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/start_cloned_snippet.js  *
*  Lines: 39                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/start_cloned_snippet', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

const countdownSnippet = {
    name: 'Countdown',
    id: 's_countdown',
};
const dragNDropOutOfFooter = wTourUtils.dragNDrop(countdownSnippet);
dragNDropOutOfFooter.run = 'drag_and_drop iframe #wrapwrap #wrap';

wTourUtils.registerWebsitePreviewTour('website_start_cloned_snippet', {
    edition: true,
    test: true,
    url: '/',
}, [
    dragNDropOutOfFooter,
    wTourUtils.clickOnSnippet(countdownSnippet),
    {
        content: 'Click on clone snippet',
        trigger: '.oe_snippet_clone',
    },
    {
        content: 'Check that the cloned snippet has a canvas and that something has been drawn inside of it',
        trigger: 'iframe .s_countdown:eq(1) canvas',
        run: function () {
            // Check that at least one bit has been drawn in the canvas
            if (!this.$anchor[0].getContext('2d').getImageData(0, 0, 1000, 1000).data.includes(1)) {
                console.error('The cloned snippet should have been started');
            }
        },
    },
]);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/text_animations.js  *
*  Lines: 52                                                 *
*************************************************************/
odoo.define('@website/../tests/tours/text_animations', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("text_animations", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_cover",
        name: "Cover",
    }),
    {
        content: "Click on the snippet title",
        trigger: "iframe .s_cover h1 > font",
        run: "dblclick", // Make sure the title is selected.
    },
    {
        content: "Click on the 'Animate Text' button to activate the option",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was applied",
        trigger: "iframe .s_cover h1 span.o_animated_text",
        run: () => null, // it's a check
    },
    {
        content: "Click on the 'Animate Text' button",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was disabled for the title",
        trigger: "iframe .s_cover:not(:has(.o_animated_text))",
        run: () => null, // it's a check
    },
    {
        content: "Try to apply the text animation again",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was applied",
        trigger: "iframe .s_cover:has(span.o_animated_text)",
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/translate_menu_name.js  *
*  Lines: 31                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/translate_menu_name', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('translate_menu_name', {
    url: '/pa_GB',
    test: true,
    edition: false,
}, [
    {
        content: "activate translate mode",
        trigger: '.o_translate_website_container a',
    },
    {
        content: "Close the dialog",
        trigger: '.modal-footer .btn-primary',
    },
    wTourUtils.clickOnExtraMenuItem({}, true),
    {
        content: "translate the menu entry",
        trigger: 'iframe a[href="/englishURL"] span',
        run: 'text value pa-GB',
    },
    ...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/unsplash_beacon.js  *
*  Lines: 14                                                 *
*************************************************************/
odoo.define("website.tour.unsplash_beacon", function (require) {
"use strict";

const tour = require("web_tour.tour");

tour.register("test_unsplash_beacon", {
    test: true,
    url: "/",
}, [{
    content: "Verify whether beacon was sent.",
    trigger: 'img[data-beacon="sent"]',
    run: () => {}, // This is a check.
}]);
});
;

/****************************************************************************
*  Filepath: /website/static/tests/tours/website_backend_menus_redirect.js  *
*  Lines: 36                                                                *
****************************************************************************/
odoo.define('@website/../tests/tours/website_backend_menus_redirect', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

tour.register('website_backend_menus_redirect', {
    test: true,
    url: '/',
},
[{
    content: 'Need at least a step so the tour is not failing in enterprise',
    trigger: 'body',
    edition: 'enterprise',
}, {
    content: 'Make frontend to backend menus appears',
    trigger: 'body:has(#wrap)',
    run: function () {
        // The dropdown is hidden behind an SVG on hover animation.
        this.$anchor.find('.o_frontend_to_backend_apps_menu').addClass('show');
    },
    edition: 'community',
}, {
    content: 'Click on Test Root backend menu',
    trigger: '.o_frontend_to_backend_apps_menu a:contains("Test Root")',
    edition: 'community',
}, {
    content: 'Check that we landed on the apps page (Apps), and not the Home Action page (Settings)',
    trigger: '.oe_module_vignette',
    edition: 'community',
},
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_click_tests.js  *
*  Lines: 43                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/website_click_tests', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

const cover = {
    id: 's_cover',
    name: 'Cover',
};

wTourUtils.registerWebsitePreviewTour('website_click_tour', {
    test: true,
    url: '/',
}, [
    {
        content: "trigger a page navigation",
        trigger: 'iframe a[href="/contactus"]',
    },
    {
        content: "wait for the page to be loaded",
        trigger: '.o_website_preview[data-view-xmlid="website.contactus"]',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "click on a link that would trigger navigation",
        trigger: 'iframe a[href="/"]',
    },
    wTourUtils.goBackToBlocks(),
    wTourUtils.dragNDrop(cover),
    wTourUtils.clickOnSnippet(cover),
    ...wTourUtils.clickOnSave(),
    {
        content: "wait for the iframe to be ready",
        trigger: 'iframe body:not(.editor_enable)',
        run: () => null, // it's a check
    }
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_form_editor.js  *
*  Lines: 937                                                    *
*****************************************************************/
odoo.define('website.tour.form_editor', function (require) {
    'use strict';

    const wTourUtils = require("website.tour_utils");

    // Visibility possible values:
    const VISIBLE = 'Always Visible';
    const HIDDEN = 'Hidden';
    const CONDITIONALVISIBILITY = 'Visible only if';

    const NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM = 2;
    const ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM = [
        {
            name: 'email_from',
            value: 'admin@odoo.com',
        },
        {
            name: 'subject',
            value: 'Hello, world!',
        }
    ];
    const essentialFieldsForDefaultFormFillInSteps = [];
    for (const data of ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM) {
        essentialFieldsForDefaultFormFillInSteps.push({
            content: "Enter data in model-required field",
            trigger: `iframe .s_website_form_model_required .s_website_form_input[name="${data.name}"]`,
            run: `text ${data.value}`,
        });
    }

    // TODO: in master only keep the conversion of the double quotes character.
    // Replace all `"` character by `&quot;`, all `'` character by `&apos;` and
    // all "`" character by `&lsquo;`.
    const getQuotesEncodedName = function (name) {
            return name.replaceAll(/"/g, character => `&quot;`)
                       .replaceAll(/'/g, character => `&apos;`)
                       .replaceAll(/`/g, character => `&lsquo;`)
                       .replaceAll("\\", character => `&bsol;`);
    };

    const triggerFieldByLabel = (label) => {
        return `.s_website_form_field.s_website_form_custom:has(label:contains("${label}"))`;
    };
    const selectFieldByLabel = (label) => {
        return [{
            content: `Select field "${label}"`,
            trigger: "iframe " + triggerFieldByLabel(label),
        }];
    };
    const selectButtonByText = function (text) {
        return [{
            content: "Open the select",
            trigger: `we-select:has(we-button:contains("${text}")) we-toggler`,
        },
        {
            content: "Click on the option",
            trigger: `we-select we-button:contains("${text}")`,
        }];
    };
    const selectButtonByData = function (data) {
        return [{
            content: "Open the select",
            trigger: `we-select:has(we-button[${data}]) we-toggler`,
        }, {
            content: "Click on the option",
            trigger: `we-select we-button[${data}]`,
        }];
    };
    const addField = function (name, type, label, required, isCustom,
                               display = {visibility: VISIBLE, condition: ""}) {
        const data = isCustom ? `data-custom-field="${name}"` : `data-existing-field="${name}"`;
        const ret = [{
            content: "Select form",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form',
        }, {
            content: "Add field",
            trigger: 'we-button[data-add-field]',
        },
        ...selectButtonByData(data),
        {
            content: "Wait for field to load",
            trigger: `iframe .s_website_form_field[data-type="${name}"], .s_website_form_input[name="${name}"]`, //custom or existing field
            run: function () {},
        },
        ...selectButtonByText(display.visibility),
    ];
        let testText = 'iframe .s_website_form_field';
        if (display.condition) {
            ret.push({
                content: "Set the visibility condition",
                trigger: 'we-input[data-attribute-name="visibilityCondition"] input',
                run: `text ${display.condition}`,
            });
        }
        if (required) {
            testText += '.s_website_form_required';
            ret.push({
                content: "Mark the field as required",
                trigger: 'we-button[data-name="required_opt"] we-checkbox',
            });
        }
        if (label) {
            testText += `:has(label:contains(${label}))`;
            ret.push({
                content: "Change the label text",
                trigger: 'we-input[data-set-label-text] input',
                run: `text ${label}`,
            });
        }
        if (type !== 'checkbox' && type !== 'radio' && type !== 'select') {
            let inputType = type === 'textarea' ? type : `input[type="${type}"]`;
            const nameAttribute = isCustom && label ? getQuotesEncodedName(label) : name;
            testText += `:has(${inputType}[name="${nameAttribute}"]${required ? "[required]" : ""})`;
            // Because 'testText' will be used as selector to verify the content
            // of the label, the `\` character needs to be escaped.
            testText = testText.replaceAll("\\", "\\\\");
        }
        ret.push({
            content: "Check the resulting field",
            trigger: testText,
            run: function () {},
        });
        return ret;
    };
    const addCustomField = function (name, type, label, required, display) {
        return addField(name, type, label, required, true, display);
    };
    const addExistingField = function (name, type, label, required, display) {
        return addField(name, type, label, required, false, display);
    };

    wTourUtils.registerWebsitePreviewTour("website_form_editor_tour", {
        url: '/',
        edition: true,
        test: true,
    }, [
        // Drop a form builder snippet and configure it
        {
            content: "Drop the form snippet",
            trigger: '#oe_snippets .oe_snippet:has(.s_website_form) .oe_snippet_thumbnail',
            run: 'drag_and_drop iframe #wrap',
        }, {
            content: "Select form by clicking on an input field",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form input',
        }, {
            content: "Verify that the form editor appeared",
            trigger: '.o_we_customize_panel .snippet-option-WebsiteFormEditor',
            run: () => null,
        }, {
            content: "Go back to blocks to unselect form",
            trigger: '.o_we_add_snippet_btn',
        }, {
            content: "Select form by clicking on a text area",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form textarea',
        }, {
            content: "Verify that the form editor appeared",
            trigger: '.o_we_customize_panel .snippet-option-WebsiteFormEditor',
            run: () => null,
        }, {
            content: "Rename the field label",
            trigger: 'we-input[data-set-label-text] input',
            run: "text Renamed",
        }, {
            content: "Leave the rename options",
            trigger: 'we-input[data-set-label-text] input',
            run: "text_blur",
        }, {
            content: "Go back to blocks to unselect form",
            trigger: '.o_we_add_snippet_btn',
        }, {
            content: "Select form itself (not a specific field)",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form',
        },
        ...selectButtonByText('Send an E-mail'),
        {
            content: "Form has a model name",
            trigger: 'iframe section.s_website_form form[data-model_name="mail.mail"]',
        }, {
            content: 'Edit the Phone Number field',
            trigger: 'iframe input[name="phone"]',
        }, {
            content: 'Change the label position of the phone field',
            trigger: 'we-button[data-select-label-position="right"]',
        },
        ...addCustomField("char", "text", "Conditional Visibility Check 1", false),
        ...addCustomField("char", "text", "Conditional Visibility Check 2", false),
        ...selectButtonByData("data-set-visibility='conditional'"),
        ...selectButtonByData("data-set-visibility-dependency='Conditional Visibility Check 1'"),
        ...addCustomField("char", "text", "Conditional Visibility Check 2", false),
        ...selectFieldByLabel("Conditional Visibility Check 1"),
        ...selectButtonByData("data-set-visibility='conditional'"),
        {
            content: "Check that 'Conditional Visibility Check 2' is not in the list of the visibility selector of Conditional Visibility Check 1",
            trigger: "we-select[data-name='hidden_condition_opt']:not(:has(we-button[data-set-visibility-dependency='Conditional Visibility Check 2']))",
            run: () => null,
        },
        ...addCustomField("char", "text", "Conditional Visibility Check 3", false),
        ...addCustomField("char", "text", "Conditional Visibility Check 4", false),
        ...selectButtonByData("data-set-visibility='conditional'"),
        ...selectButtonByData("data-set-visibility-dependency='Conditional Visibility Check 3'"),
        {
            content: "Change the label of 'Conditional Visibility Check 4' and change it to 'Conditional Visibility Check 3'",
            trigger: 'we-input[data-set-label-text] input',
            run: "text Conditional Visibility Check 3",
        },
        {
            content: "Check that the conditional visibility of the renamed field is removed",
            trigger: "we-customizeblock-option.snippet-option-WebsiteFieldEditor we-select:contains('Visibility'):has(we-toggler:contains('Always Visible'))",
            run: () => null,
        },
        ...addCustomField("char", "text", "Conditional Visibility Check 5", false),
        ...addCustomField("char", "text", "Conditional Visibility Check 6", false),
        ...selectButtonByData("data-set-visibility='conditional'"),
        {
            content: "Change the label of 'Conditional Visibility Check 6' and change it to 'Conditional Visibility Check 5'",
            trigger: 'we-input[data-set-label-text] input',
            run: "text Conditional Visibility Check 5",
        },
        {
            content: "Check that 'Conditional Visibility Check 5' is not in the list of the renamed field",
            trigger: "we-customizeblock-option.snippet-option-WebsiteFieldEditor we-select[data-name='hidden_condition_opt']:not(:has(we-button:contains('Conditional Visibility Check 5')))",
            run: () => null,
        },
        ...addExistingField('email_cc', 'text', 'Test conditional visibility', false, {visibility: CONDITIONALVISIBILITY, condition: 'odoo'}),
        // Check that visibility condition is deleted on dependency type change.
        ...addCustomField("char", "text", "dependent", false, {visibility: CONDITIONALVISIBILITY}),
        ...addCustomField("selection", "radio", "dependency", false),
        ...selectFieldByLabel("dependent"),
        ...selectButtonByData('data-set-visibility-dependency="dependency"'),
        ...selectFieldByLabel("dependency"),
        ...selectButtonByData('data-custom-field="char"'),
        ...selectFieldByLabel("dependent"),
        {
            content: "Open the select",
            trigger: 'we-select:has(we-button[data-set-visibility="visible"]) we-toggler',
        },
        {
            content: "Check that the field no longer has conditional visibility",
            trigger: "we-select we-button[data-set-visibility='visible'].active",
            run: () => null,
        },

        ...addExistingField('date', 'text', 'Test Date', true),

        ...addExistingField('record_name', 'text', 'Awesome Label', false, {visibility: HIDDEN}),

        ...addExistingField('body_html', 'textarea', 'Your Message', true),

        ...addExistingField('recipient_ids', 'checkbox'),

        ...addCustomField('one2many', 'checkbox', 'Products', true),
        {
            content: "Change Option 1 label",
            trigger: 'we-list table input:eq(0)',
            run: 'text Iphone',
        }, {
            content: "Change Option 2 label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Galaxy S',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text Xperia',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change added Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Wiko Stairway',
        }, {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(.s_website_form_multiple[data-display='horizontal'])" +
                        ":has(.checkbox:has(label:contains('Iphone')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Galaxy S')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Xperia')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Wiko Stairway')):has(input[type='checkbox'][required]))",
            run: function () {},
        },
        ...selectButtonByData('data-multi-checkbox-display="vertical"'),
        {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(.s_website_form_multiple[data-display='vertical'])" +
                        ":has(.checkbox:has(label:contains('Iphone')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Galaxy S')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Xperia')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Wiko Stairway')):has(input[type='checkbox'][required]))",
            run: function () {},
        },
        // Check conditional visibility for the relational fields
        ...selectButtonByData("data-set-visibility='conditional'"),
        ...selectButtonByData("data-set-visibility-dependency='recipient_ids'"),
        ...selectButtonByText("Is not equal to"),
        ...selectButtonByText("Mitchell Admin"),
        ...wTourUtils.clickOnSave(),
        {
            content: "Check 'products' field is visible.",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("Products")}:visible)`,
            run: () => {}, // it's a check
        }, {
            content: "choose the option 'Mitchell Admin' of partner.",
            trigger: "iframe .checkbox:has(label:contains('Mitchell Admin')) input[type='checkbox']",
        }, {
            content: "Check 'products' field is not visible.",
            trigger: "iframe .s_website_form" +`:has(${triggerFieldByLabel("Products")}:not(:visible))`,
            run: () => {}, // it's a check
        },
        ...wTourUtils.clickOnEditAndWaitEditMode(),

        ...addCustomField('selection', 'radio', 'Service', true),
        {
            content: "Change Option 1 label",
            trigger: 'we-list table input:eq(0)',
            run: 'text After-sales Service',
        }, {
            content: "Change Option 2 label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Invoicing Service',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text Development Service',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Management Service',
        }, {
            content: "Mark the field as not required",
            extra_trigger: "we-list table input:eq(3)[name='Management Service']",
            trigger: 'we-button[data-name="required_opt"] we-checkbox',
        }, {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom:not(.s_website_form_required)" +
                        ":has(.radio:has(label:contains('After-sales Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Invoicing Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Development Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Management Service')):has(input[type='radio']:not([required])))",
            run: function () {},
        },

        ...addCustomField('many2one', 'select', 'State', true),

        // Customize custom selection field
        {
            content: "Change Option 1 Label",
            trigger: 'we-list table input:eq(0)',
            run: 'text Germany',
        }, {
            content: "Change Option 2 Label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Belgium',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text France',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Canada',
        }, {
            content: "Remove Germany Option",
            trigger: '.o_we_select_remove_option:eq(0)',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last option label with a number",
            trigger: 'we-list table input:eq(3)',
            run: 'text 44 - UK',
        }, {
            content: "Check that the input value is the full option value",
            trigger: "we-list table input:eq(3)[name='44 - UK']",
            run: () => {
                const addedOptionEl = document.querySelector('iframe.o_iframe').contentDocument.querySelector('.s_website_form_field select option[value="44 - UK"]');
                if (!addedOptionEl) {
                    console.error('The number option was not correctly added');
                }
            },
        }, {
            content: "Check the resulting snippet",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(label:contains('State'))" +
                        ":has(select[required]:hidden)" +
                        ":has(.s_website_form_select_item:contains('Belgium'))" +
                        ":has(.s_website_form_select_item:contains('France'))" +
                        ":has(.s_website_form_select_item:contains('Canada'))" +
                        ":has(.s_website_form_select_item:contains('44 - UK'))" +
                        ":not(:has(.s_website_form_select_item:contains('Germany')))",
            run: function () {},
        },

        ...addExistingField('attachment_ids', 'file', 'Invoice Scan'),

        {
            content: "Insure the history step of the editor is not checking for unbreakable",
            trigger: 'iframe #wrapwrap',
            run: () => {
                const wysiwyg = $('iframe:not(.o_ignore_in_tour)').contents().find('#wrapwrap').data('wysiwyg');
                wysiwyg.odooEditor.historyStep(true);
            },
        },
        // Edit the submit button using linkDialog.
        {
            content: "Click submit button to show edit popover",
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Click on Edit Link in Popover",
            trigger: 'iframe .o_edit_menu_popover .o_we_edit_link',
        }, {
            content: "Check that no URL field is suggested",
            trigger: '#toolbar:has(#url_row:hidden)',
            run: () => null,
        }, {
            content: "Change button's style",
            trigger: '.dropdown-toggle[data-bs-original-title="Link Style"]',
            run: () => {
                $('.dropdown-toggle[data-bs-original-title="Link Style"]').click();
                $('[data-value="secondary"]').click();
                $('[data-bs-original-title="Link Shape"]').click();
                $('[data-value="rounded-circle"]').click();
                $('[data-bs-original-title="Link Size"]').click();
                $('[data-value="sm"]').click();
            },
        }, {
            content: "Check the resulting button",
            trigger: 'iframe .s_website_form_send.btn.btn-sm.btn-secondary.rounded-circle',
            run: () => null,
        },
        // Add a default value to a auto-fillable field.
        {
            content: 'Select the name field',
            trigger: 'iframe .s_website_form_field:eq(0)',
        }, {
            content: 'Set a default value to the name field',
            trigger: 'we-input[data-attribute-name="value"] input',
            run: 'text John Smith',
        },

        // Add two fields: the 1st one's visibility is tied to the 2nd one
        // being set, and the 2nd one is autopopulated. As a result, both
        // should be visible by default.
        ...addCustomField("char", "text", "field A", false, {visibility: CONDITIONALVISIBILITY}),
        ...addCustomField("char", "text", "field B", false),
        ...selectFieldByLabel("field A"),
        ...selectButtonByData('data-set-visibility-dependency="field B"'),
        ...selectButtonByData('data-select-data-attribute="set"'),
        ...selectFieldByLabel("field B"),
        {
            content: "Insert default value",
            trigger: 'we-input[data-attribute-name="value"] input',
            run: "text prefilled",
        },
        {
            content: "Save the page",
            trigger: "button[data-action=save]",
        },
        {
            content: 'Verify value attribute and property',
            extra_trigger: 'iframe body:not(.editor_enable)',
            trigger: 'iframe .s_website_form_field:eq(0) input[value="John Smith"]:propValue("Mitchell Admin")',
        },
        {
            content: 'Verify that phone field is still auto-fillable',
            trigger: 'iframe .s_website_form_field input[data-fill-with="phone"]:propValue("+1 555-555-5555")',
        },
        // Check that the resulting form behavior is correct.
        {
            content: "Check that field B prefill text is set",
            trigger: `iframe ${triggerFieldByLabel("field B")}:has(input[value="prefilled"])`,
            run: () => null, // it's a check
        }, {
            content: "Check that field A is visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field A")}:visible)`,
            run: () => null, // it's a check
        },
        // A) Check that if we edit again and save again the default value is
        // not deleted.
        // B) Add a 3rd field. Field A's visibility is tied to field B being set,
        // field B is autopopulated and its visibility is tied to field C being
        // set, and field C is empty.
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: 'Edit the form',
            trigger: 'iframe .s_website_form_field:eq(0) input',
            run: 'click',
        },
        ...addCustomField("char", "text", "field C", false),
        ...selectFieldByLabel("field B"),
        ...selectButtonByText(CONDITIONALVISIBILITY),
        ...selectButtonByText(CONDITIONALVISIBILITY),
        {
            content: "Check that there is a comparator after two clicks on 'Visible only if'",
            trigger: "[data-attribute-name='visibilityComparator']",
            run: function () {
                if (!this.$anchor[0].querySelector("we-button.active")) {
                    console.error("A default comparator should be set");
                }
            },
        },
        ...selectButtonByData('data-set-visibility-dependency="field C"'),
        ...selectButtonByData('data-select-data-attribute="set"'),
        {
            content: 'Save the page',
            trigger: 'button[data-action=save]',
            run: 'click',
        },

        // Check that the resulting form behavior is correct.
        {
            content: 'Verify that the value has not been deleted',
            extra_trigger: 'iframe body:not(.editor_enable)',
            trigger: 'iframe .s_website_form_field:eq(0) input[value="John Smith"]',
        }, {
            content: "Check that fields A and B are not visible and that field B's prefill text is still set",
            trigger: "iframe .s_website_form" +
                `:has(${triggerFieldByLabel("field A")}:not(:visible))` +
                `:has(${triggerFieldByLabel("field B")}` +
                `:has(input[value="prefilled"]):not(:visible))`,
            run: () => null, // it's a check
        }, {
            content: "Type something in field C",
            trigger: `iframe ${triggerFieldByLabel("field C")} input`,
            run: "text Sesame",
        }, {
            content: "Check that fields A and B are visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field B")}:visible)` +
                `:has(${triggerFieldByLabel("field A")}:visible)`,
            run: () => null, // it's a check
        },

        // Have field A's visibility tied to field B containing something,
        // while field B's visibility is also tied to another field.
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        ...selectFieldByLabel("field A"),
        {
            content: "Verify that the form editor appeared",
            trigger: ".o_we_customize_panel .snippet-option-WebsiteFormEditor",
            run: () => null,
        },
        ...selectButtonByData('data-select-data-attribute="contains"'),
        {
            content: "Tie the visibility of field A to field B containing 'peek-a-boo'",
            trigger: "we-input[data-name=hidden_condition_additional_text] input",
            run: "text peek-a-boo",
        },
        ...wTourUtils.clickOnSave(),

        // Check that the resulting form works and does not raise an error.
         {
            content: "Write anything in C",
            trigger: `iframe ${triggerFieldByLabel("field C")} input`,
            run: "text Mellon",
        }, {
            content: "Check that field B is visible, but field A is not",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field B")}:visible)` +
                `:has(${triggerFieldByLabel("field A")}:not(:visible))`,
            run: () => null, // it's a check
        }, {
            content: "Insert 'peek-a-boo' in field B",
            trigger: `iframe ${triggerFieldByLabel("field B")} input`,
            run: "text peek-a-boo",
        }, {
            content: "Check that field A is visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field A")}:visible)`,
            run: () => null, // it's a check
        },

        ...wTourUtils.clickOnEditAndWaitEditMode(),
        ...addCustomField("char", "text", "field D", false),
        {
            content: "Select the 'Subject' field",
            trigger: 'iframe .s_website_form_field.s_website_form_model_required:has(label:contains("Subject"))',
        },
        ...selectButtonByText(CONDITIONALVISIBILITY),
        ...selectButtonByData('data-set-visibility-dependency="field D"'),
        ...selectButtonByData('data-select-data-attribute="set"'),
        {
            content: "Set a default value to the 'Subject' field",
            trigger: 'we-input[data-attribute-name="value"] input',
            run: 'text Default Subject',
        },
        {
            content: "Select the 'Your Message' field",
            trigger: 'iframe .s_website_form_field.s_website_form_required:has(label:contains("Your Message"))',
        },
        ...selectButtonByText(CONDITIONALVISIBILITY),
        ...selectButtonByData('data-set-visibility-dependency="field D"'),
        ...selectButtonByData('data-select-data-attribute="set"'),

        ...wTourUtils.clickOnSave(),
        // Ensure that a field required for a model is not disabled when
        // conditionally hidden.
        {
            content: "Check that the 'Subject' field is not disabled",
            trigger: `iframe .s_website_form:has(.s_website_form_model_required ` +
                `.s_website_form_input[value="Default Subject"]:not([disabled]):not(:visible))`,
            run: () => null, // it's a check
        },
        // Ensure that a required field (but not for a model) is disabled when
        // conditionally hidden.
        {
            content: "Check that the 'Your Message' field is disabled",
            trigger: `iframe .s_website_form:has(.s_website_form_required ` +
                `.s_website_form_input[name="body_html"][required][disabled]:not(:visible))`,
            run: () => null, // it's a check
        },

        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: "Select the 'Subject' field",
            trigger: 'iframe .s_website_form_field.s_website_form_model_required:has(label:contains("Subject"))',
        },
        ...selectButtonByData("data-set-visibility='visible'"),
        {
            content: "Empty the default value of the 'Subject' field",
            trigger: 'we-input[data-attribute-name="value"] input',
            run: "remove_text",
        },
        {
            content: "Select the 'Your Message' field",
            trigger: 'iframe .s_website_form_field.s_website_form_required:has(label:contains("Your Message"))',
        },
        ...selectButtonByData("data-set-visibility='visible'"),
        {
            content: 'Click on the submit button',
            trigger: 'iframe .s_website_form_send',
            run: 'click',
        },
        {
            content: 'Change the Recipient Email',
            trigger: '[data-field-name="email_to"] input',
            run: 'text test@test.test',
        },
        // The next four calls to "addCustomField" are there to ensure such
        // characters do not make the form editor crash.
        ...addCustomField("char", "text", "''", false),
        ...addCustomField("char", "text", '""', false),
        ...addCustomField("char", "text", "``", false),
        ...addCustomField("char", "text", "\\", false),
        {
            content: 'Save the page',
            trigger: 'button[data-action=save]',
            run: 'click',
        },
        {
            content: 'Verify that the recipient email has been saved',
            trigger: 'iframe body:not(.editor_enable)',
            // We have to this that way because the input type = hidden.
            extra_trigger: 'iframe form:has(input[name="email_to"][value="test@test.test"])',
        },
    ]);

    function editContactUs(steps) {
        return [
            {
                content: "Select the contact us form by clicking on an input field",
                trigger: 'iframe .s_website_form input',
                extra_trigger: '#oe_snippets .oe_snippet_thumbnail',
                run: 'click',
            },
            ...steps,
            {
                content: 'Save the page',
                trigger: 'button[data-action=save]',
            },
            {
                content: 'Wait for reload',
                trigger: 'body:not(.editor_enable)',
            },
        ];
    }

    wTourUtils.registerWebsitePreviewTour('website_form_contactus_edition_with_email', {
        url: '/contactus',
        edition: true,
        test: true,
    }, editContactUs([
        {
            content: 'Change the Recipient Email',
            trigger: '[data-field-name="email_to"] input',
            run: 'text test@test.test',
        },
    ]));
    wTourUtils.registerWebsitePreviewTour('website_form_contactus_edition_no_email', {
        url: '/contactus',
        edition: true,
        test: true,
    }, editContactUs([
        {
            content: "Change a random option",
            trigger: '[data-set-mark] input',
            run: 'text_blur **',
        }, {
            content: "Check that the recipient email is correct",
            trigger: 'we-input[data-field-name="email_to"] input:propValue("website_form_contactus_edition_no_email@mail.com")',
            run: () => null, // it's a check.
        },
    ]));

    wTourUtils.registerWebsitePreviewTour('website_form_conditional_required_checkboxes', {
        test: true,
        url: '/',
        edition: true,
    }, [
        // Create a form with two checkboxes: the second one required but
        // invisible when the first one is checked. Basically this should allow
        // to have: both checkboxes are visible by default but the form can
        // only be sent if one of the checkbox is checked.
        {
            content: "Add the form snippet",
            trigger: '#oe_snippets .oe_snippet:has(.s_website_form) .oe_snippet_thumbnail',
            run: 'drag_and_drop iframe #wrap',
        }, {
            content: "Select the form by clicking on an input field",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form input',
            run: function (actions) {
                actions.auto();

                // The next steps will be about removing non essential required
                // fields. For the robustness of the test, check that amount
                // of field stays the same.
                const requiredFields = this.$anchor.closest('[data-snippet]').find('.s_website_form_required');
                if (requiredFields.length !== NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM) {
                    console.error('The amount of required fields seems to have changed');
                }
            },
        },
        ...((function () {
            const steps = [];
            for (let i = 0; i < NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM; i++) {
                steps.push({
                    content: "Select required field to remove",
                    trigger: 'iframe .s_website_form_required .s_website_form_input',
                });
                steps.push({
                    content: "Remove required field",
                    trigger: 'iframe .oe_overlay .oe_snippet_remove',
                });
            }
            return steps;
        })()),
        ...addCustomField('boolean', 'checkbox', 'Checkbox 1', false),
        ...addCustomField('boolean', 'checkbox', 'Checkbox 2', true, {visibility: CONDITIONALVISIBILITY}),
        {
            content: "Open condition item select",
            trigger: 'we-select[data-name="hidden_condition_opt"] we-toggler',
        }, {
            content: "Choose first checkbox as condition item",
            trigger: 'we-button[data-set-visibility-dependency="Checkbox 1"]',
        }, {
            content: "Open condition comparator select",
            trigger: 'we-select[data-attribute-name="visibilityComparator"] we-toggler',
        }, {
            content: "Choose 'not equal to' comparator",
            trigger: 'we-button[data-select-data-attribute="!selected"]',
        }, {
            content: 'Save the page',
            trigger: 'button[data-action=save]',
        },

        // Check that the resulting form behavior is correct
        {
            content: "Wait for page reload",
            trigger: 'iframe body:not(.editor_enable) [data-snippet="s_website_form"]',
            run: function (actions) {
                // The next steps will be about removing non essential required
                // fields. For the robustness of the test, check that amount
                // of field stays the same.
                const essentialFields = this.$anchor.find('.s_website_form_model_required');
                if (essentialFields.length !== ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM.length) {
                    console.error('The amount of model-required fields seems to have changed');
                }
            },
        },
        ...essentialFieldsForDefaultFormFillInSteps,
        {
            content: 'Try sending empty form',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: 'Check the form could not be sent',
            trigger: 'iframe #s_website_form_result.text-danger',
            run: () => null,
        }, {
            content: 'Check the first checkbox',
            trigger: 'iframe input[type="checkbox"][name="Checkbox 1"]',
        }, {
            content: 'Check the second checkbox is now hidden',
            trigger: 'iframe .s_website_form:has(input[type="checkbox"][name="Checkbox 2"]:not(:visible))',
            run: () => null,
        }, {
            content: 'Try sending the form',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Check the form was sent (success page without form)",
            trigger: 'iframe body:not(:has([data-snippet="s_website_form"])) .fa-check-circle',
            run: () => null,
        }, {
            content: "Go back to the form",
            trigger: 'iframe a.navbar-brand.logo',
        },
        ...essentialFieldsForDefaultFormFillInSteps,
        {
            content: 'Check the second checkbox',
            trigger: 'iframe input[type="checkbox"][name="Checkbox 2"]',
        }, {
            content: 'Try sending the form again',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Check the form was again sent (success page without form)",
            trigger: 'iframe body:not(:has([data-snippet="s_website_form"])) .fa-check-circle',
            run: () => null,
        }
    ]);

    wTourUtils.registerWebsitePreviewTour('website_form_contactus_change_random_option', {
        test: true,
        url: '/contactus',
        edition: true,
    }, editContactUs([
        {
            content: "Change a random option",
            trigger: '[data-set-mark] input',
            run: 'text_blur **',
        },
    ]));

    // Check that the editable form content is actually editable.
    wTourUtils.registerWebsitePreviewTour("website_form_editable_content", {
        test: true,
        url: "/",
        edition: true,
    }, [
        {
            ...wTourUtils.dragNDrop({id: "s_website_form", name: "Form"}),
            run: "drag_and_drop iframe #wrap",
        },
        {
            content: "Check that a form field is not editable",
            extra_trigger: "iframe .s_website_form_field",
            trigger: "iframe section.s_website_form input",
            run: function () {
                if (this.$anchor[0].isContentEditable) {
                    console.error("A form field should not be editable.");
                }
            },
        },
        {
            content: "Go back to blocks",
            trigger: ".o_we_add_snippet_btn",
        },
        wTourUtils.dragNDrop({id: "s_three_columns", name: "Columns"}),
        {
            content: "Select the first column",
            trigger: "iframe .s_three_columns .row > :nth-child(1)",
        },
        {
            content: "Drag and drop the selected column inside the form",
            trigger: "iframe .o_overlay_move_options .ui-draggable-handle",
            run: "drag_and_drop iframe section.s_website_form",
        },
        {
            content: "Click on the text inside the dropped form column",
            trigger: "iframe section.s_website_form h3.card-title",
            run: "dblclick",
        },
        {   // Simulate a user interaction with the editable content.
            content: "Update the text inside the form column",
            trigger: "iframe section.s_website_form h3.card-title",
            run: "keydown 65 66 67",
        },
        {
            content: "Check that the new text value was correctly set",
            trigger: "iframe section.s_website_form h3:containsExact(ABC)",
            run: () => null, // it's a check
        },
        {   content: "Remove the dropped column",
            trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
            run: "click",
        },
        ...wTourUtils.clickOnSave(),
    ]);

    wTourUtils.registerWebsitePreviewTour("website_form_special_characters", {
        test: true,
        url: "/",
        edition: true,
    }, [
        {
            ...wTourUtils.dragNDrop({id: "s_website_form", name: "Form"}),
            run: "drag_and_drop iframe #wrap",
        },
        {
            content: "Select form by clicking on an input field",
            extra_trigger: "iframe .s_website_form_field",
            trigger: "iframe section.s_website_form input",
        },
        ...addCustomField("char", "text", `Test1"'`, false),
        ...addCustomField("char", "text", 'Test2`\\', false),
        ...wTourUtils.clickOnSave(),
        ...essentialFieldsForDefaultFormFillInSteps,
        {
            content: "Complete 'Your Question' field",
            trigger: "iframe textarea[name='description']",
            run: "text test",
        }, {
            content: "Complete the first added field",
            trigger: "iframe input[name='Test1&quot;&apos;']",
            run: "text test1",
        }, {
            content: "Complete the second added field",
            trigger: "iframe input[name='Test2&lsquo;&bsol;']",
            run: "text test2",
        }, {
            content: "Click on 'Submit'",
            trigger: "iframe a.s_website_form_send",
        }, {
            content: "Check the form was again sent (success page without form)",
            trigger: "iframe body:not(:has([data-snippet='s_website_form'])) .fa-check-circle",
            run: () => null,
        },
    ]);

    return {};
});
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/website_form_editor_frontend.js  *
*  Lines: 230                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/website_form_editor_frontend', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const tour = require('web_tour.tour');
const rpc = require('web.rpc');

tour.register("website_form_editor_tour_submit", {
    test: true,
},[
    {
        content:  "Try to send the form with some required fields not filled in",
        extra_trigger:  "form[data-model_name='mail.mail']" +
                        "[data-success-page='/contactus-thank-you']" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):has(input[type='text'][name='name'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Your Email')):has(input[type='email'][name='email_from'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')):has(textarea[name='description'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):has(input[type='text'][name='subject'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')):has(input[type='text'][name='date'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Awesome Label')):hidden)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')):has(textarea[name='body_html'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Iphone'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Galaxy S'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Xperia'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Wiko Stairway'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='After-sales Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Invoicing Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Development Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Management Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('State')):has(select[name='State'][required]:has(option[value='Belgium'])))" +
                        ":has(.s_website_form_field.s_website_form_required:has(label:contains('State')):has(select[name='State'][required]:has(option[value='France'])))" +
                        ":has(.s_website_form_field:has(label:contains('State')):has(select[name='State'][required]:has(option[value='Canada'])))" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')))" +
                        ":has(.s_website_form_field:has(input[name='email_to'][value='test@test.test']))" +
                        ":has(.s_website_form_field:has(input[name='website_form_signature']))",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields were detected and complete the Subject field",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "input[name=subject]",
        run:      "text Jane Smith"
    },
    {
        content:  "Update required field status by trying to Send again",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields were detected and complete the Message field",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "textarea[name=body_html]",
        run:      "text A useless message"
    },
    {
        content:  "Update required field status by trying to Send again",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields was detected and check a product. If this fails, you probably broke the cleanForSave.",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "input[name=Products][value='Wiko Stairway']"
    },
    {
        content:  "Complete Date field",
        trigger:  ".s_website_form_datetime [data-toggle='datetimepicker']",
    },
    {
        content:  "Check another product",
        trigger:  "input[name='Products'][value='Xperia']"
    },
    {
        content:  "Check a service",
        trigger:  "input[name='Service'][value='Development Service']"
    },
    {
        content:  "Select a State",
        trigger:  "select[name='State']",
        run:      "text Canada",
    },
    {
        content:  "Complete Your Name field",
        trigger:  "input[name='name']",
        run:      "text chhagan"
    },
    {
        content:  "Complete Email field",
        trigger:  "input[name=email_from]",
        run:      "text test@mail.com"
    },
    {
        content: "Complete Subject field",
        trigger: 'input[name="subject"]',
        run: 'text subject',
    },
    {
        content:  "Complete Your Question field",
        trigger:  "textarea[name='description']",
        run:      "text magan"
    },
    {
        content: "Check if conditional field is visible, it shouldn't.",
        trigger: "body",
        run: function () {
            const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_website_form_field_hidden_if')[0]);
            if (style.display !== 'none') {
                console.error('error This field should be invisible when the name is not odoo');
            }
        }
    },
    {
        content: "Change name input",
        trigger: "input[name='name']",
        run: "text odoo",
    },
    {
        content: "Check if conditional field is visible, it should.",
        trigger: "input[name='email_cc']",
    },
    {
        content: "Select state option",
        trigger: "select[name='State']",
        run: 'text 44 - UK',
    },
    {
        content:  "Send the form",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check form is submitted without errors",
        trigger:  "#wrap:has(h1:contains('Thank You!'))"
    }
]);

tour.register("website_form_editor_tour_results", {
    test: true,
}, [
    {
        content: "Check mail.mail records have been created",
        trigger: "body",
        run: function () {
            var mailDef = rpc.query({
                    model: 'mail.mail',
                    method: 'search_count',
                    args: [[
                        ['email_to', '=', 'test@test.test'],
                        ['body_html', 'like', 'A useless message'],
                        ['body_html', 'like', 'Service : Development Service'],
                        ['body_html', 'like', 'State : 44 - UK'],
                        ['body_html', 'like', 'Products : Xperia,Wiko Stairway']
                    ]],
                });
            var success = function(model, count) {
                if (count > 0) {
                    $('body').append('<div id="website_form_editor_success_test_tour_'+model+'"></div>');
                }
            };
            mailDef.then(_.bind(success, this, 'mail_mail'));
        }
    },
    {
        content:  "Check mail.mail records have been created",
        trigger:  "#website_form_editor_success_test_tour_mail_mail"
    }
]);
tour.register('website_form_contactus_submit', {
    test: true,
    url: '/contactus',
}, [
    // As the demo portal user, only two inputs needs to be filled to send
    // the email
    {
        content: "Fill in the subject",
        trigger: 'input[name="subject"]',
    },
    {
        content: 'Fill in the message',
        trigger: 'textarea[name="description"]',
    },
    {
        content: 'Send the form',
        trigger: '.s_website_form_send',
    },
    {
        content: 'Check form is submitted without errors',
        trigger: '#wrap:has(h1:contains("Thank You!"))',
    },
]);
tour.register('website_form_contactus_check_changed_email', {
    test: true,
    url: '/contactus',
}, [
    {
        content: "Check that the recipient email is updated",
        trigger: 'form:has(input[name="email_to"][value="after.change@mail.com"])',
        run: () => null, // it's a check.
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_navbar_menu.js  *
*  Lines: 20                                                     *
*****************************************************************/
odoo.define("website.tour.website_navbar_menu", function (require) {
"use strict";

var tour = require("web_tour.tour");

tour.register("website_navbar_menu", {
    test: true,
    url: "/",
}, [
    {
        content: "Ensure menus are in DOM",
        trigger: '#top_menu .nav-item a:contains("Test Tour Menu")',
        run: function () {}, // it's a check
    }, {
        content: "Ensure menus loading is done (so they are actually visible)",
        trigger: 'body:not(:has(.o_menu_loading))',
        run: function () {}, // it's a check
    }
]);
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/website_no_dirty_page.js  *
*  Lines: 85                                                       *
*******************************************************************/
odoo.define('@website/../tests/tours/website_no_dirty_page', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

const makeSteps = (steps = []) => [
    wTourUtils.dragNDrop({
        id: "s_text_image",
        name: "Text - Image",
    }), {
        content: "Click on Discard",
        trigger: '.o_we_website_top_actions [data-action="cancel"]',
    }, {
        content: "Check that discarding actually warns when there are dirty changes, and cancel",
        trigger: ".modal-footer .btn-secondary",
    },
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        // This makes sure the last step about leaving edit mode at the end of
        // this tour makes sense.
        content: "Confirm we are in edit mode",
        trigger: 'body.editor_has_snippets',
        run: () => null,
    },
    ...steps,
    {
        // Makes sure the dirty flag does not happen after a setTimeout or
        // something like that.
        content: "Click elsewhere and wait for a few ms",
        trigger: 'iframe #wrap',
        run: function (actions) {
            actions.auto();
            setTimeout(() => document.body.classList.add('o_test_delay'), 999);
        },
    }, {
        content: "Click on Discard",
        trigger: '.o_we_website_top_actions [data-action="cancel"]',
        extra_trigger: 'body.o_test_delay',
    }, {
        content: "Confirm we are not in edit mode anymore",
        trigger: 'body:not(.editor_has_snippets)',
        run: () => null,
    },
];

wTourUtils.registerWebsitePreviewTour('website_no_action_no_dirty_page', {
    test: true,
    url: '/',
    edition: true,
}, makeSteps());

wTourUtils.registerWebsitePreviewTour('website_no_dirty_page', {
    test: true,
    url: '/',
    edition: true,
}, makeSteps([
    {
        content: "Click on default paragraph",
        trigger: 'iframe .s_text_image h2 + p.o_default_snippet_text',
    }, {
        // TODO this should be done in a dedicated test which would be testing
        // all default snippet texts behaviors. Will be done in master where a
        // task will review this feature.
        // TODO also test that applying an editor command removes that class.
        content: "Make sure the paragraph still acts as a default paragraph",
        trigger: 'iframe .s_text_image h2 + p.o_default_snippet_text',
        run: () => null,
    }, {
        content: "Click on button",
        trigger: 'iframe .s_text_image .btn',
        run: function (actions) {
            actions.click();
            const el = this.$anchor[0];
            const sel = el.ownerDocument.getSelection();
            sel.collapse(el, 0);
            el.focus();
        },
    },
]));

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/website_page_options.js  *
*  Lines: 62                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/website_page_options', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_page_options', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption('TopMenuVisibility', 'we-select:has([data-visibility]) we-toggler'),
    wTourUtils.changeOption('TopMenuVisibility', 'we-button[data-visibility="transparent"]'),
    // It's important to test saving right after changing that option only as
    // this is why this test was made in the first place: the page was not
    // marked as dirty when that option was the only one that was changed.
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is transparent",
        trigger: 'iframe #wrapwrap.o_header_overlay',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption('topMenuColor', 'we-select.o_we_so_color_palette'),
    wTourUtils.changeOption('topMenuColor', 'button[data-color="black-50"]', 'background color', 'bottom', true),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is in black-50",
        trigger: 'iframe header#top.bg-black-50',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption('TopMenuVisibility', 'we-select:has([data-visibility]) we-toggler'),
    wTourUtils.changeOption('TopMenuVisibility', 'we-button[data-visibility="hidden"]'),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is hidden",
        trigger: 'iframe #wrapwrap:has(header#top.d-none.o_snippet_invisible)',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on 'header' in the invisible elements list",
        trigger: '.o_we_invisible_el_panel .o_we_invisible_entry',
    },
    wTourUtils.clickOnSnippet({id: 'o_footer', name: 'Footer'}),
    wTourUtils.changeOption('HideFooter', 'we-button[data-name="hide_footer_page_opt"] we-checkbox'),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the footer is hidden and the header is visible",
        trigger: 'iframe #wrapwrap:has(.o_footer.d-none.o_snippet_invisible)',
        extra_trigger: 'iframe #wrapwrap header#top:not(.d-none)',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/website_snippets_menu_tabs.js  *
*  Lines: 39                                                            *
************************************************************************/
odoo.define('@website/../tests/tours/website_snippets_menu_tabs', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("website_snippets_menu_tabs", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.goToTheme(),
    {
        content: "Click on the empty 'DRAG BUILDING BLOCKS HERE' area.",
        extra_trigger: 'we-customizeblock-option.snippet-option-ThemeColors',
        trigger: 'iframe main > .oe_structure.oe_empty',
        run: 'click',
    },
    wTourUtils.goToTheme(),
    {
        content: "Verify that the customize panel is not empty.",
        trigger: '.o_we_customize_panel > we-customizeblock-options',
        run: () => null, // it's a check
    },
    {
        content: "Click on the style tab.",
        trigger: '#snippets_menu .o_we_customize_snippet_btn',
    },
    wTourUtils.goToTheme(),
    {
        content: "Verify that the customize panel is not empty.",
        trigger: '.o_we_customize_panel > we-customizeblock-options',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/website_style_edition.js  *
*  Lines: 51                                                       *
*******************************************************************/
odoo.define("website.tour.website_style_edition", function (require) {
"use strict";

const wTourUtils = require("website.tour_utils");

const TARGET_FONT_SIZE = 30;

const checkFontSize = function (actions) {
    const style = actions.tip_widget.el.ownerDocument.defaultView.getComputedStyle(this.$anchor[0]);
    if (style.fontSize !== `${TARGET_FONT_SIZE}px`) {
        console.error(`Expected the font-size to be equal to ${TARGET_FONT_SIZE}px but found ${style.fontSize} instead`);
    }
};

wTourUtils.registerWebsitePreviewTour("website_style_edition", {
    test: true,
    url: '/',
    edition: true,
}, [{
    content: "Go to theme options",
    trigger: '.o_we_customize_theme_btn',
}, {
    content: "Change font size",
    trigger: '[data-variable="font-size-base"] input',
    run: `text_blur ${TARGET_FONT_SIZE}`,
}, {
    content: "Check the font size was properly adapted",
    trigger: 'iframe #wrapwrap',
    // Waiting the CSS to be reloaded: the code adds a new assets bundle with
    // a #t=... at the end then removes the old one.
    extra_trigger: 'iframe html:not(:has(link[href$="web.assets_frontend.min.css"]))',
    run: checkFontSize,
},
...wTourUtils.clickOnSave(),
{
    content: "Check the font size is still ok outside of edit mode",
    trigger: 'iframe body:not(.editor_enable) #wrapwrap',
    run: checkFontSize,
},
...wTourUtils.clickOnEditAndWaitEditMode(),
wTourUtils.goToTheme(),
{
    content: "Click on the Background Image selection",
    trigger: '[data-customize-body-bg-type="\'image\'"]:not(.active)',
    extra_trigger: '[data-customize-body-bg-type="NONE"].active',
}, {
    content: "The media dialog should open",
    trigger: '.o_select_media_dialog',
    run: () => {}, // It's a check.
}]);
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/website_text_edition.js  *
*  Lines: 72                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/website_text_edition', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

const WEBSITE_MAIN_COLOR = '#ABCDEF';

wTourUtils.registerWebsitePreviewTour('website_text_edition', {
    test: true,
    url: '/',
    edition: true,
}, [
    {
        content: "Go to theme options",
        trigger: '.o_we_customize_theme_btn',
    },
    {
        content: "Open colorpicker to change website main color",
        trigger: 'we-select[data-color="o-color-1"] .o_we_color_preview',
    },
    {
        content: "Input the value for the new website main color (also make sure it is independent from the backend)",
        trigger: '.o_hex_input',
        run: `text_blur ${WEBSITE_MAIN_COLOR}`,
    },
    {
        content: "Go to the blocks tab",
        trigger: '.o_we_add_snippet_btn',
    },
    wTourUtils.dragNDrop({id: 's_text_block', name: 'Text'}),
    {
        content: "Click on the text block first paragraph (to auto select)",
        trigger: 'iframe .s_text_block p',
    },
    {
        content: "Open the foreground colorpicker",
        trigger: '#oe-text-color',
    },
    {
        content: "Go to the 'solid' tab",
        trigger: '.o_we_colorpicker_switch_pane_btn[data-target="custom-colors"]',
    },
    {
        content: "Input the website main color explicitly",
        trigger: '.o_hex_input',
        run: `text_blur ${WEBSITE_MAIN_COLOR}`,
    },
    {
        content: "Check that paragraph now uses the main color *class*",
        trigger: 'iframe .s_text_block p',
        run: function (actions) {
            const fontEl = this.$anchor[0].querySelector('font');
            if (!fontEl) {
                console.error("A background color should have been applied");
                return;
            }
            if (fontEl.style.backgroundColor) {
                console.error("The paragraph should not have an inline style background color");
                return;
            }
            if (!fontEl.classList.contains('text-o-color-1')) {
                console.error("The paragraph should have the right background color class");
                return;
            }
        },
    }
]);

return __exports;
});
;

/**************************************************************
*  Filepath: /website/static/tests/tours/widget_lifecycle.js  *
*  Lines: 75                                                  *
**************************************************************/
odoo.define('@website/../tests/tours/widget_lifecycle', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

// Note: cannot import @website/../tests/tour_utils/widget_lifecycle_dep_widget
// here because that module requires web.public.widget which is not available
// in the backend, where this tour definition is loaded. Easier to duplicate
// that key for now rather than create a whole file to handle this localStorage
// key only.
const localStorageKey = 'widgetAndWysiwygLifecycle';

wTourUtils.registerWebsitePreviewTour("widget_lifecycle", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_countdown",
        name: "Countdown",
    }),
    {
        content: "Wait for the widget to be started and empty the widgetAndWysiwygLifecycle list",
        trigger: "iframe .s_countdown.public_widget_started",
        run: () => {
            // Start recording the calls to the "start" and "destroy" method of
            // the widget and the wysiwyg.
            window.localStorage.setItem(localStorageKey, '[]');
        },
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Wait for the widget to be started",
        trigger: "iframe .s_countdown.public_widget_started",
        run: () => {}, // It's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Wait for the widget to be started and check the order of the lifecycle method call of the widget and the wysiwyg",
        trigger: "iframe .s_countdown.public_widget_started",
        run: () => {
            const result = JSON.parse(window.localStorage.widgetAndWysiwygLifecycle);
            const expected = ["widgetStop", "wysiwygStop", "wysiwygStop", "widgetStart",
                "widgetStop", "wysiwygStart", "wysiwygStarted", "widgetStart",
            ];
            const alternative = ["widgetStop", "wysiwygStop", "widgetStart", "wysiwygStop",
                "widgetStop", "wysiwygStart", "wysiwygStarted", "widgetStart",
            ];
            const resultIsEqualTo = (arr) => {
                return arr.length === result.length
                    && arr.every((item, i) => item === result[i]);
            };
            if (!(resultIsEqualTo(expected) || resultIsEqualTo(alternative))) {
                // The "destroy" method of the wysiwyg is called two times when
                // leaving the edit mode: the first one comes explicitly from
                // the "leaveEditMode" of the "wysiwyg_adapter". The second
                // comes from the OWL mechanism as the wysiwyg is not present in
                // the DOM when the page is reloaded. Because it is not
                // guaranteed that this last call happens before the start of
                // the widget at the page reload, two sequences are acceptable
                // as a result.
                console.error(`
                    Expected: ${expected.toString()}
                    Or:       ${alternative.toString()}
                    Result:   ${result.toString()}
                `);
            }
        },
    },
]);

return __exports;
});
;

/**********************************************************************************************
*  Filepath: /website/static/src/client_actions/website_preview/website_preview_test_mode.js  *
*  Lines: 18                                                                                  *
**********************************************************************************************/
odoo.define('@website/client_actions/website_preview/website_preview_test_mode', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const { patch } = require('web.utils');
const { WebsitePreview } = require('@website/client_actions/website_preview/website_preview');

patch(WebsitePreview.prototype, 'website_preview_test_mode', {
    /**
     * @override
     */
    get testMode() {
        return true;
    }
});

return __exports;
});
;

/*****************************************************************
*  Filepath: /project/static/tests/tours/personal_stage_tour.js  *
*  Lines: 69                                                     *
*****************************************************************/
odoo.define('@project/../tests/tours/personal_stage_tour', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const tour = require('web_tour.tour');

tour.register('personal_stage_tour', {
    test: true,
    url: '/web',
},
[tour.stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    content: "Open Pig Project",
    trigger: '.o_kanban_record:contains("Pig")',
}, {
    // Default is grouped by stage, user should not be able to create/edit a column
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_quick_create)",
    run: function () {},
}, {
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_edit)",
    run: function () {},
}, {
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_delete)",
    run: function () {},
}, {
    content: "Go to my tasks", // My tasks is grouped by personal stage by default
    trigger: 'a[data-menu-xmlid="project.menu_project_management"]',
}, {
    content: "Check that we can create a new stage",
    trigger: '.o_column_quick_create .o_quick_create_folded'
}, {
    content: "Create a new personal stage",
    trigger: 'input.form-control.o_input',
    run: 'text Never',
}, {
    content: "Confirm create",
    trigger: '.o_kanban_add',
}, {
    content: "Check that column exists",
    trigger: '.o_kanban_header:contains("Never")',
    run: function () {},
}, {
    content: 'Open column edit dropdown',
    trigger: '.o_kanban_header:eq(0)',
    run: function () {
        document.querySelector('.o_kanban_config.dropdown .dropdown-toggle').dispatchEvent(new Event('click'));
    },
}, {
    content: "Try editing inbox",
    trigger: ".dropdown-item.o_column_edit",
}, {
    content: "Change title",
    trigger: 'div.o_field_char[name="name"] input',
    run: 'text  (Todo)',
}, {
    content: "Save changes",
    trigger: '.btn-primary:contains("Save")',
}, {
    content: "Check that column was updated",
    trigger: '.o_kanban_header:contains("Todo")',
}]);

return __exports;
});
;

/*************************************************************************
*  Filepath: /project/static/tests/tours/project_burndown_chart_tour.js  *
*  Lines: 85                                                             *
*************************************************************************/
odoo.define('@project/../tests/tours/project_burndown_chart_tour', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const tour = require('web_tour.tour');

tour.register('burndown_chart_tour', {
    test: true,
    url: '/web',
},
[tour.stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    content: 'Open "Burndown Chart Test" project menu',
    trigger: '.o_kanban_record:contains("Burndown Chart Test") .o_kanban_manage_toggle_button',
}, {
    content: `Open "Burndown Chart Test" project's "Burndown Chart" view`,
    trigger: '.o_kanban_record:contains("Burndown Chart Test") .o_kanban_manage_reporting div[role="menuitem"] a:contains("Burndown Chart")',
}, {
    content: 'The sort buttons are not rendered',
    trigger: '.o_cp_bottom_left:not(:has(.btn-group[role=toolbar][aria-label="Sort graph"]))',
    extra_trigger: '.o_graph_renderer',
}, {
    content: 'Remove the project search "Burndown Chart Test"',
    trigger: '.o_searchview_facet:contains("Burndown Chart Test") .o_facet_remove',
}, {
    content: 'Search Burndown Chart',
    trigger: 'input.o_searchview_input',
    run: `text Burndown`,
}, {
    content: 'Validate search',
    trigger: '.o_searchview_autocomplete .o_menu_item:contains("Project")',
}, {
    content: 'Remove the group by "Date: Month > Stage"',
    trigger: '.o_searchview_facet:contains("Date: Month") .o_facet_remove',
}, {
    content: 'A "The Burndown Chart must be grouped by Date and Stage" notification is shown when trying to remove the group by "Date: Month > Stage"',
    trigger: '.o_notification_manager .o_notification:contains("The Burndown Chart must be grouped by Date and Stage") button.o_notification_close',
}, {
    content: 'Open the group by menu',
    trigger: '.o_group_by_menu button',
}, {
    content: 'The Stage group menu item is invisible',
    trigger: '.o_group_by_menu:not(:has(.o_menu_item:contains("Stage")))',
}, {
    content: 'Open the Date group by sub menu',
    trigger: '.o_group_by_menu button.o_menu_item:contains("Date")',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('mouseenter'));
    },
}, {
    content: 'Click on the selected Date sub menu',
    trigger: '.o_group_by_menu button.o_menu_item:contains("Date") + * .dropdown-item.selected',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('click'));
    },
}, {
    content: 'A "The Burndown Chart must be grouped by Date" notification is shown when trying to remove the group by "Date: Month > Stage"',
    trigger: '.o_notification_manager .o_notification:contains("The Burndown Chart must be grouped by Date") button.o_notification_close',
}, {
    content: 'Open the filter menu',
    trigger: '.o_filter_menu button',
}, {
    content: 'Open the Date filter sub menu',
    trigger: '.o_filter_menu button.o_menu_item:contains("Date")',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('mouseenter'));
    },
}, {
    content: 'Click on the first Date filter sub menu',
    trigger: '.o_filter_menu .o_menu_item:contains("Date") + * .dropdown-item:first-child',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('click'));
    },
}, {
    content: 'Close the Date filter menu',
    trigger: '.o_graph_renderer',
}, {
    content: 'The comparison menu is not rendered',
    trigger: '.o_search_options:not(:has(.o_comparison_menu))',
}]);

return __exports;
});
;

/******************************************************************
*  Filepath: /project/static/tests/tours/project_sharing_tour.js  *
*  Lines: 121                                                     *
******************************************************************/
odoo.define('@project/../tests/tours/project_sharing_tour', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

const projectSharingSteps = [...tour.stepUtils.goToAppSteps("project.menu_main_pm", 'Go to the Project App.'), {
    trigger: '.oe_kanban_global_click :contains("Project Sharing") button.o_dropdown_kanban',
    content: 'Open the project dropdown.'
}, {
    trigger: '.o_kanban_record:contains("Project Sharing") .dropdown-menu a:contains("Share")',
    content: 'Start editing the project.',
}, {
    trigger: 'div.o_field_radio[name="access_mode"] div.o_radio_item > input[data-value="edit"]',
    content: 'Select "Edit" as Access mode in the "Share Project" wizard.',
}, {
    trigger: '.o_field_many2many_tags_email[name=partner_ids]',
    content: 'Select the user portal as collaborator to the "Project Sharing" project.',
    run: function (actions) {
        actions.text('Georges', this.$anchor.find('input'));
    },
}, {
    trigger: '.ui-autocomplete a.dropdown-item:contains("Georges")',
    in_modal: false,
}, {
    trigger: 'footer > button[name="action_send_mail"]',
    content: 'Confirm the project sharing with this portal user.',
}, {
    trigger: '.o_web_client',
    content: 'Go to project portal view to select the "Project Sharing" project',
    run: function () {
        window.location.href = window.location.origin + '/my/projects';
    },
}, {
    id: 'project_sharing_feature',
    trigger: 'table > tbody > tr a:has(span:contains(Project Sharing))',
    content: 'Select "Project Sharing" project to go to project sharing feature for this project.',
}, {
    trigger: '.o_project_sharing',
    content: 'Wait the project sharing feature be loaded',
    run: function () {},
}, {
    trigger: 'button.o-kanban-button-new',
    content: 'Click "Create" button',
    run: 'click',
}, {
    trigger: '.o_kanban_quick_create .o_field_widget[name="name"] input',
    content: 'Create Task',
    run: 'text Test Create Task',
}, {
    trigger: '.o_kanban_quick_create .o_kanban_edit',
    content: 'Go to the form view of this new task',
}, {
    trigger: 'div[name="stage_id"] div.o_statusbar_status button[aria-checked="false"]:contains(Done)',
    content: 'Change the stage of the task.',
}, {
    trigger: '.o_portal_chatter_composer_input .o_portal_chatter_composer_body textarea',
    content: 'Write a message in the chatter of the task',
    run: 'text I create a new task for testing purpose.',
}, {
    trigger: '.o_portal_chatter_composer_input .o_portal_chatter_composer_body button[name="send_message"]',
    content: 'Send the message',
}, {
    trigger: 'ol.breadcrumb > li.o_back_button > a:contains(Project Sharing)',
    content: 'Go back to the kanban view',
}, {
    trigger: '.o_filter_menu > button',
    content: 'click on filter menu in the search view',
}, {
    trigger: '.o_filter_menu > .dropdown-menu > .dropdown-item:first-child',
    content: 'click on the first item in the filter menu',
}, {
    trigger: '.o_group_by_menu > button',
    content: 'click on group by menu in the search view',
}, {
    trigger: '.o_group_by_menu > .dropdown-menu > .dropdown-item:first-child',
    content: 'click on the first item in the group by menu',
}, {
    trigger: '.o_favorite_menu > button',
    content: 'click on the favorite menu in the search view',
}, {
    trigger: '.o_favorite_menu .o_add_favorite > button',
    content: 'click to "save current search" button in favorite menu',
}, {
    trigger: '.o_filter_menu > button',
    content: 'click on filter menu in the search view',
}, {
    trigger: '.o_filter_menu > .dropdown-menu > .dropdown-item:first-child',
    content: 'click on the first item in the filter menu',
}, {
    trigger: '.o_group_by_menu > button',
    content: 'click on group by menu in the search view',
}, {
    trigger: '.o_group_by_menu > .dropdown-menu > .dropdown-item:first-child',
    content: 'click on the first item in the group by menu',
}, {
    trigger: '.o_favorite_menu > button',
    content: 'click on the favorite menu in the search view',
}, {
    trigger: '.o_favorite_menu .o_add_favorite > button',
    content: 'click to "save current search" button in favorite menu',
}, {
    trigger: 'button.o_switch_view.o_list',
    content: 'Go to the list view',
}];

tour.register('project_sharing_tour', {
    test: true,
    url: '/web',
}, projectSharingSteps);

// The begining of the project sharing feature
const projectSharingStepIndex = projectSharingSteps.findIndex(s => s.id && s.id === 'project_sharing_feature');
tour.register('portal_project_sharing_tour', {
    test: true,
    url: '/my/projects',
}, projectSharingSteps.slice(projectSharingStepIndex, projectSharingSteps.length));

return __exports;
});
;

/****************************************************************************
*  Filepath: /project/static/tests/tours/project_tags_filter_tour_tests.js  *
*  Lines: 62                                                                *
****************************************************************************/
odoo.define('@project/../tests/tours/project_tags_filter_tour_tests', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

function changeFilter(filterName) {
    return [
        {
            trigger: '.o_favorite_menu button:has(i.fa-star)',
            content: 'click on the favorite menu',
        },
        {
            trigger: `.o_favorite_menu .dropdown-item span:contains("${filterName}")`,
        },
        {
            trigger: '.o_group_by_menu button:has(i.oi-group)',
            content: 'click on the groupby menu',
            run: function (actions) {
                this.$anchor[0].dispatchEvent(new Event('mouseenter'));
            },
        },
        {
            trigger: '.o_group_by_menu span:contains("Stage")',
            content: 'click on the stage gb',
        },
    ];
}

tour.register('project_tags_filter_tour',
    {
        test: true,
        url: '/web',
    },
    [
    tour.stepUtils.showAppsMenuItem(),
    {
        trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
    }, ...changeFilter("Corkscrew tail tag filter"),
    {
        trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("pig"))) .o_kanban_record:has(span:contains("Pigs"))',
        extra_trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("goat"))):not(:has(.o_kanban_record))',
        content: 'check that the corkscrew tail filter has taken effect',
        run: () => {},
    }, ...changeFilter("horned tag filter"),
    {
        trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("goat"))) .o_kanban_record:has(span:contains("Goats"))',
        extra_trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("pig"))):not(:has(.o_kanban_record))',
        content: 'check that the horned filter has taken effect',
        run: () => {},
    }, ...changeFilter("4 Legged tag filter"),
    {
        trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("goat"))) .o_kanban_record:has(span:contains("Goats"))',
        extra_trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("pig"))) .o_kanban_record:has(span:contains("Pigs"))',
        content: 'check that the 4 legged filter has taken effect',
        run: () => {},
    },
]);

return __exports;
});
;

/***********************************************************************
*  Filepath: /project/static/tests/tours/project_update_tour_tests.js  *
*  Lines: 186                                                          *
***********************************************************************/
odoo.define('@project/../tests/tours/project_update_tour_tests', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

function openProjectUpdateAndReturnToTasks(view, viewClass) {
    const legacyViewClass = viewClass.replace("o_", "o_legacy_");
    return [{
            trigger: '.o_project_updates_breadcrumb',
            content: 'Open Project Update from view : ' + view,
            extra_trigger: `.${viewClass}, .${legacyViewClass}`,
        }, {
            trigger: ".o-kanban-button-new",
            content: "Create a new update from project task view : " + view,
            extra_trigger: '.o_pupdate_kanban',
        }, {
            trigger: "button.o_form_button_cancel",
            content: "Discard project update from project task view : " + view,
        }, {
            trigger: ".o_switch_view.o_list",
            content: "Go to list of project update from view " + view,
        }, {
            trigger: '.o_back_button',
            content: 'Go back to the task view : ' + view,
            // extra_trigger: '.o_list_view, .o_legacy_list_view', // FIXME: [XBO] uncomment it when the sample data will be displayed after discarding the creation of a project update record.
        },
    ];
}

tour.register('project_update_tour', {
    test: true,
    url: '/web',
},
[tour.stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_project_kanban',
    width: 200,
}, {
    trigger: '.o_project_name input',
    run: 'text New Project'
}, {
    trigger: '.o_open_tasks',
    run: function (actions) {
        actions.auto('.modal:visible .btn.btn-primary');
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
    run: function (actions) {
        actions.text("New", this.$anchor.find("input"));
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
    auto: true,
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
    extra_trigger: '.o_kanban_group',
    run: function (actions) {
        actions.text("Done", this.$anchor.find("input"));
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
    auto: true,
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_kanban_group:eq(0)'
}, {
    trigger: '.o_kanban_quick_create div.o_field_char[name=name] input',
    extra_trigger: '.o_kanban_project_tasks',
    run: 'text New task'
}, {
    trigger: '.o_kanban_quick_create .o_kanban_add',
    extra_trigger: '.o_kanban_project_tasks'
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_kanban_group:eq(0)'
}, {
    trigger: '.o_kanban_quick_create div.o_field_char[name=name] input',
    extra_trigger: '.o_kanban_project_tasks',
    run: 'text Second task'
}, {
    trigger: '.o_kanban_quick_create .o_kanban_add',
    extra_trigger: '.o_kanban_project_tasks'
}, {
    trigger: '.o_kanban_group:nth-child(2) .o_kanban_header',
    run: function () {
        document.querySelector('.o_kanban_group:nth-child(2) .o_kanban_config.dropdown .dropdown-toggle').dispatchEvent(new Event('click'));
    }
}, {
    trigger: ".dropdown-item.o_column_edit",
}, {
    trigger: ".o_field_widget[name=fold] input",
}, {
    trigger: ".modal-footer button",
}, {
    trigger: ".o_kanban_record .oe_kanban_content",
    extra_trigger: '.o_kanban_project_tasks',
    run: "drag_and_drop .o_kanban_group:eq(1) ",
}, {
    trigger: ".o_project_updates_breadcrumb",
    content: 'Open Updates'
}, {
    trigger: ".o_add_milestone a",
    content: "Add a first milestone"
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text New milestone'
}, {
    trigger: "div[name=deadline] .datetimepicker-input",
    run: 'text 12/12/2099'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o_add_milestone a",
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text Second milestone'
}, {
    trigger: "div[name=deadline] .datetimepicker-input",
    run: 'text 12/12/2022'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o_rightpanel_milestone:eq(1) .o_milestone_detail",
}, {
    trigger: "div[name=deadline] .datetimepicker-input",
    run: 'text 12/12/2100'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o-kanban-button-new",
    content: "Create a new update"
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text New update'
}, {
    trigger: ".o_form_button_save"
}, {
    trigger: ".o_field_widget[name='description'] h1:contains('Activities')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] h3:contains('Milestones')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li:contains('(12/12/2099 => 12/12/2100)')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li:contains('(due 12/12/2022)')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li:contains('(due 12/12/2100)')",
    run: function () {},
}, {
    trigger: '.o_back_button',
    content: 'Go back to the kanban view the project',
}, {
    trigger: '.o_switch_view.o_list',
    content: 'Open List View of Project Updates',
}, {
    trigger: '.o_back_button',
    content: 'Go back to the kanban view the project',
    extra_trigger: '.o_list_view, .o_legacy_list_view',
}, {
    trigger: '.o_switch_view.o_graph',
    content: 'Open Graph View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Graph", "o_graph_view"), {
    trigger: '.o_switch_view.o_list',
    content: 'Open List View of Tasks',
    extra_trigger: '.o_graph_view',
}, ...openProjectUpdateAndReturnToTasks("List", "o_list_view"), {
    trigger: '.o_switch_view.o_pivot',
    content: 'Open Pivot View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Pivot", "o_pivot_view"), {
    trigger: '.o_switch_view.o_calendar',
    content: 'Open Calendar View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Calendar", "o_calendar_view"), {
    trigger: '.o_switch_view.o_activity',
    content: 'Open Activity View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Activity", "o_activity_view"),
]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /contacts/static/tests/tours/debug_menu_set_defaults.js  *
*  Lines: 74                                                          *
**********************************************************************/
odoo.define('debug_menu_set_defaults.tour', function (require) {
    "use strict";

    var tour = require('web_tour.tour');

    tour.register('debug_menu_set_defaults', {
        test: true,
        url: '/web?debug=1',
    },
        [
            ...tour.stepUtils.goToAppSteps('contacts.menu_contacts', "Open the contacts menu"),
            {
                content: "Create a new contact",
                trigger: '.o-kanban-button-new',
            },
            {
                content: "Check that Company is checked by default, and not Individual",
                trigger: '.o_field_widget[name="company_type"] input[data-value="company"]:checked',
                run: function () {},
            },
            {
                content: "Select the individual radio button",
                trigger: '.o_field_widget[name="company_type"] input[data-value="person"]',
            },
            {
                content: "Open the debug menu",
                trigger: '.o_debug_manager button',
            },
            {
                content: "Click the Set Defaults menu",
                trigger: '.o_debug_manager .dropdown-item:contains(Set Defaults)',
            },
            {
                content: "Choose Company Type = Individual",
                trigger: '#formview_default_fields',
                run: function () {
                    const element_field = document.querySelector('select#formview_default_fields');
                    element_field.value = 'company_type';
                    element_field.dispatchEvent(new Event("change"));
                },
            },
            {
                content: "Check that there are conditions",
                trigger: '#formview_default_conditions',
            },
            {
                content: "Save the new default",
                trigger: 'footer button:contains(Save default)',
            },
            {
                content: "Discard the contact creation",
                trigger: 'button.o_form_button_cancel',
            },
            {
                trigger: '.o-kanban-button-new',
            },
            {
                content: "Check that Individual is checked instead of Company",
                trigger: '.o_field_widget[name="company_type"] input[data-value="person"]:checked',
                run: function () {},
            },
            {
                content: "Discard the contact creation",
                trigger: 'button.o_form_button_cancel',
            },
            {
                content: "Wait for discard",
                trigger: '.o_control_panel .o-kanban-button-new',
                run() {},
            },
        ]
    );

});
;

/*********************************************************
*  Filepath: /hr/static/tests/tours/hr_employee_flow.js  *
*  Lines: 35                                             *
*********************************************************/
odoo.define('@hr/../tests/tours/hr_employee_flow', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

tour.register('hr_employee_tour', {
    test: true,
    url: '/web',
}, [
    tour.stepUtils.showAppsMenuItem(),
    {
        content: "Open Employees app",
        trigger: ".o_app[data-menu-xmlid='hr.menu_hr_root']",
        run: 'click',
    },
    {
        content: "Open an Employee Profile",
        trigger: ".o_kanban_record_title:contains('Johnny H.')",
        run: 'click',
    },
    {
        content: "Open user account menu",
        trigger: ".o_user_menu .oe_topbar_name",
        run: 'click',
    }, {
        content: "Open My Profile",
        trigger: "[data-menu=settings]",
        run: 'click',
    },
]);

return __exports;
});
;

/*********************************************************************
*  Filepath: /hr/static/tests/tours/user_modify_own_profile_tour.js  *
*  Lines: 25                                                         *
*********************************************************************/
odoo.define('@hr/../tests/tours/user_modify_own_profile_tour', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

/**
 * As 'hr' changes the flow a bit and displays the user preferences form in a full view instead of
 * a modal, we adapt the steps of the original tour accordingly.
 */
tour.tours['mail/static/tests/tours/user_modify_own_profile_tour.js'].steps = [{
    content: 'Open user account menu',
    trigger: '.o_user_menu button',
}, {
    content: "Open preferences / profile screen",
    trigger: '[data-menu=settings]',
}, {
    content: "Update the email address",
    trigger: 'div[name="email"] input',
    run: 'text updatedemail@example.com',
}, ...tour.stepUtils.saveForm()];

return __exports;
});
;

/************************************************************
*  Filepath: /calendar/static/tests/tours/calendar_tour.js  *
*  Lines: 161                                               *
************************************************************/
odoo.define('@calendar/../tests/tours/calendar_tour', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const tour = require('web_tour.tour');

const todayDate = function() {
    let now = new Date();
    let year = now.getFullYear();
    let month = String(now.getMonth() + 1).padStart(2, '0');
    let day = String(now.getDate()).padStart(2, '0');

    return `${month}/${day}/${year} 10:00:00`;
};

tour.register('calendar_appointments_hour_tour', {
    url: '/web',
    test: true,
}, [
    tour.stepUtils.showAppsMenuItem(),
    {
        trigger: '.o_app[data-menu-xmlid="calendar.mail_menu_calendar"]',
        content: 'Open Calendar',
        run: 'click',
    },
    {
        trigger: '.o-calendar-button-new',
        content: 'Create a new event',
        run: 'click',
    },
    {
        trigger: '#name',
        content: 'Give a name to the new event',
        run: 'text TEST EVENT',
    },
    {
        trigger: '#start',
        content: 'Give a date to the new event',
        run: `text ${todayDate()}`,
    },
    {
        trigger: '.fa-cloud-upload',
        content: 'Save the new event',
        run: 'click',
    },
    {
        trigger: '.dropdown-item:contains("Calendar")',
        content: 'Go back to Calendar view',
        run: 'click',
    },
    {
        trigger: '.dropdown-toggle:contains("Week")',
        content: 'Click to change calendar view',
        run: 'click',
    },
    {
        trigger: '.dropdown-item:contains("Month")',
        content: 'Change the calendar view to Month',
        run: 'click',
    },
    {
        trigger: '.fc-day-header:contains("Monday")',
        content: 'Change the calendar view to week',
    },
    {
        trigger: '.fc-time:contains("10:00")',
        content: 'Check the time is properly displayed',
    },
    {
        trigger: '.o_event_title:contains("TEST EVENT")',
        content: 'Check the event title',
    },
]);

tour.register('test_calendar_delete_tour', {
    test: true,
},
[
    {
        content: 'Select filter (everybody)',
        trigger: 'div[data-value="all"] input',
    },
    {
        content: 'Click on the event (focus + waiting)',
        trigger: 'a .fc-content:contains("Test Event")',
        async run() {
            $('a .fc-content:contains("Test Event")').click();
            await new Promise((r) => setTimeout(r, 1000));
            $('a .fc-content:contains("Test Event")').click();
        }
    },
    {
        content: 'Delete the event',
        trigger: '.o_cw_popover_delete',
    },
    {
        content: 'Validate the deletion',
        trigger:'button:contains("Ok")',
        async run() {
            $('button:contains("Ok")').click();
            await new Promise((r) => setTimeout(r, 1000));
        }
    },
]);

tour.register('test_calendar_decline_tour', {
    test: true,
},
[
    {
        content: 'Click on the event (focus + waiting)',
        trigger: 'a .fc-content:contains("Test Event")',
        async run() {
            $('a .fc-content:contains("Test Event")').click();
            await new Promise((r) => setTimeout(r, 1000));
            $('a .fc-content:contains("Test Event")').click();
        }
    },
    {
        content: 'Delete the event',
        trigger: '.o_cw_popover_delete',
    },
    {
        content: 'Wait declined status',
        trigger: '.o_attendee_status_declined',
    },
]);

tour.register('test_calendar_decline_with_everybody_filter_tour', {
    test: true,
},
[
    {
        content: 'Select filter (everybody)',
        trigger: 'div[data-value="all"] input',
    },
    {
        content: 'Click on the event (focus + waiting)',
        trigger: 'a .fc-content:contains("Test Event")',
        async run() {
            $('a .fc-content:contains("Test Event")').click();
            await new Promise((r) => setTimeout(r, 1000));
            $('a .fc-content:contains("Test Event")').click();
        }
    },
    {
        content: 'Delete the event',
        trigger: '.o_cw_popover_delete',
    },
    {
        content: 'Select filter (everybody)',
        trigger: 'div[data-value="all"] input',
    },
    {
        content: 'Wait declined status',
        trigger: '.o_attendee_status_declined',
    },
]);

return __exports;
});
;

/********************************************************************************
*  Filepath: /hr_holidays/static/tests/tours/time_off_request_calendar_view.js  *
*  Lines: 47                                                                    *
********************************************************************************/
odoo.define('hr_holidays.tour_time_off_request_calendar_view', function (require) {
'use strict';

var tour = require('web_tour.tour');

tour.register('time_off_request_calendar_view', {
    test: true,
    url: '/web',
},
[
    tour.stepUtils.showAppsMenuItem(),
    {
        content: "Open Time Off app",
        trigger: '.o_app[data-menu-xmlid="hr_holidays.menu_hr_holidays_root"]',
    },
    {
        content: "Click on the first Thursday of the year",
        trigger: '.fc-day-top.fc-thu',
        run: () => {
            const el = document.querySelector('.fc-day-top.fc-thu').firstChild;
            el.scrollIntoView();

            const fromPosition = el.getBoundingClientRect();
            fromPosition.x += el.offsetWidth / 2;
            fromPosition.y += el.offsetHeight / 2;

            el.dispatchEvent(new MouseEvent("mousedown", {
                bubbles: true,
                which: 1,
                button: 0,
                clientX: fromPosition.x,
                clientY: fromPosition.y}));
            el.dispatchEvent(new MouseEvent("mouseup", {
                bubbles: true,
                which: 1,
                button: 0,
                clientX: fromPosition.x,
                clientY: fromPosition.y }));
        }
    },
    {
        content: "Save the leave",
        trigger: '.btn:contains("Save")',
        run: 'click',
    }
]);
});
;

/******************************************************************
*  Filepath: /survey/static/tests/tours/certification_failure.js  *
*  Lines: 109                                                     *
******************************************************************/
odoo.define('survey.tour_test_certification_failure', function (require) {
'use strict';

var SurveyFormWidget = require('survey.form');
/**
 * Speed up fade-in fade-out to avoid useless delay in tests.
 */
SurveyFormWidget.include({
    _submitForm: function () {
        this.fadeInOutDelay = 0;
        return this._super.apply(this, arguments);
    }
});

/**
 * This tour will test that, for the demo certification allowing 2 attempts, a user can
 * try and fail twice and will no longer be able to take the certification.
 */

var tour = require('web_tour.tour');

var failSteps = [{ // Page-1
    content: "Clicking on Start Certification",
    trigger: 'button.btn.btn-primary.btn-lg:contains("Start Certification")',
}, { // Question: Do we sell Acoustic Bloc Screens?
    content: "Selecting answer 'No'",
    trigger: 'div.js_question-wrapper:contains("Do we sell Acoustic Bloc Screens") label:contains("No")',
}, { // Question: Select all the existing products
    content: "Ticking answer 'Fanta'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Fanta")'
}, {
    content: "Ticking answer 'Drawer'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Drawer")'
}, {
    content: "Ticking answer 'Conference chair'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Conference chair")'
}, { // Question: Select all the available customizations for our Customizable Desk
    content: "Ticking answer 'Color'",
    trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Color")'
}, {
    content: "Ticking answer 'Height'",
    trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Height")'
}, { // Question: How many versions of the Corner Desk do we have?
    content: "Selecting answer '2'",
    trigger: 'div.js_question-wrapper:contains("How many versions of the Corner Desk do we have") label:contains("2")',
}, { // Question: Do you think we have missing products in our catalog? (not rated)
    content: "Missing products",
    trigger: 'div.js_question-wrapper:contains("Do you think we have missing products in our catalog") textarea',
    run: "text I don't know products enough to be able to answer that",
}, { // Page-2 Question: How much do we sell our Cable Management Box?
    content: "Selecting answer '$80'",
    trigger: 'div.js_question-wrapper:contains("How much do we sell our Cable Management Box") label:contains("$80")',
}, { // Question: Select all the products that sell for $100 or more
    content: "Ticking answer 'Corner Desk Right Sit'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Corner Desk Right Sit")'
}, {
    content: "Ticking answer 'Desk Combination'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Desk Combination")'
}, {
    content: "Ticking answer 'Office Chair Black'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Office Chair Black")'
}, { // Question: What do you think about our prices (not rated)?
    trigger: 'div.js_question-wrapper:contains("What do you think about our prices") label:contains("Correctly priced")',
}, { // Page-3 Question: How many days is our money-back guarantee?
    content: "Inputting answer '60'",
    trigger: 'div.js_question-wrapper:contains("How many days is our money-back guarantee") input',
    run: 'text 60'
}, { // Question: If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it?
    content: "Inputting answer '01/06/2020'",
    trigger: 'div.js_question-wrapper:contains("If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it") input',
    run: 'text 01/06/2020'
}, { // Question: If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire?
    content: "Inputting answer '01/06/2021 00:00:01'",
    trigger: 'div.js_question-wrapper:contains("If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire") input',
    run: 'text 01/06/2021 00:00:01'
}, { // Question: What day to you think is best for us to start having an annual sale (not rated)?
    trigger: 'div.js_question-wrapper:contains("What day to you think is best for us to start having an annual sale (not rated)") input',
}, { // Question: What day and time do you think most customers are most likely to call customer service (not rated)?
    trigger: 'div.js_question-wrapper:contains("What day and time do you think most customers are most likely to call customer service (not rated)") input',
}, { // Question: How many chairs do you think we should aim to sell in a year (not rated)?
    content: "Inputting answer '0'",
    trigger: 'div.js_question-wrapper:contains("How many chairs do you think we should aim to sell in a year (not rated)") input',
    run: 'text 0'
}, {
    content: "Finish Survey",
    trigger: 'button[type="submit"]',
}];

var retrySteps = [{
    trigger: 'a:contains("Retry")'
}];

var lastSteps = [{
    trigger: 'h1:contains("Thank you!")',
    run: function () {
        if ($('a:contains("Retry")').length === 0) {
            $('h1:contains("Thank you!")').addClass('tour_success');
        }
    }
}, {
    trigger: 'h1.tour_success',
}];

tour.register('test_certification_failure', {
    test: true,
    url: '/survey/start/4ead4bc8-b8f2-4760-a682-1fde8daaaaac'
}, [].concat(failSteps, retrySteps, failSteps, lastSteps));

});
;

/******************************************************************
*  Filepath: /survey/static/tests/tours/certification_success.js  *
*  Lines: 100                                                     *
******************************************************************/
odoo.define('survey.tour_test_certification_success', function (require) {
'use strict';

var SurveyFormWidget = require('survey.form');
/**
 * Speed up fade-in fade-out to avoid useless delay in tests.
 */
SurveyFormWidget.include({
    _submitForm: function () {
        this.fadeInOutDelay = 0;
        return this._super.apply(this, arguments);
    }
});

var tour = require('web_tour.tour');

tour.register('test_certification_success', {
    test: true,
    url: '/survey/start/4ead4bc8-b8f2-4760-a682-1fde8daaaaac'
},
[{ // Page-1
        content: "Clicking on Start Certification",
        trigger: 'button.btn.btn-primary.btn-lg:contains("Start Certification")',
    }, { // Question: Do we sell Acoustic Bloc Screens?
        content: "Selecting answer 'Yes'",
        trigger: 'div.js_question-wrapper:contains("Do we sell Acoustic Bloc Screens") label:contains("Yes")',
    }, { // Question: Select all the existing products
        content: "Ticking answer 'Chair floor protection'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Chair floor protection")'
    }, {
        content: "Ticking answer 'Drawer'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Drawer")'
    }, {
        content: "Ticking answer 'Conference chair'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Conference chair")'
    }, { // Question: Select all the available customizations for our Customizable Desk
        content: "Ticking answer 'Color'",
        trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Color")'
    }, {
        content: "Ticking answer 'Legs'",
        trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Legs")'
    }, { // Question: How many versions of the Corner Desk do we have?
        content: "Selecting answer '2'",
        trigger: 'div.js_question-wrapper:contains("How many versions of the Corner Desk do we have") label:contains("2")',
    }, { // Question: Do you think we have missing products in our catalog? (not rated)
        content: "Missing products",
        trigger: 'div.js_question-wrapper:contains("Do you think we have missing products in our catalog") textarea',
        run: "text I think we should make more versions of the customizable desk, it's such an amazing product!",
    }, { // Page-2 Question: How much do we sell our Cable Management Box?
        content: "Selecting answer '$80' (wrong one)",
        trigger: 'div.js_question-wrapper:contains("How much do we sell our Cable Management Box") label:contains("$80")',
    }, { // Question: Select all the products that sell for $100 or more
        content: "Ticking answer 'Corner Desk Right Sit'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Corner Desk Right Sit")'
    }, {
        content: "Ticking answer 'Desk Combination'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Desk Combination")'
    }, {
        content: "Ticking answer 'Large Desk'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Large Desk")'
    }, { // Question: What do you think about our prices (not rated)?
        content: "Selecting answer 'Underpriced'",
        trigger: 'div.js_question-wrapper:contains("What do you think about our prices") label:contains("Underpriced")',
    }, { // Page-3 Question: How many days is our money-back guarantee?
        content: "Inputting answer '30'",
        trigger: 'div.js_question-wrapper:contains("How many days is our money-back guarantee") input',
        run: 'text 30'
    }, { // Question: If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it?
        content: "Inputting answer '01/08/2020'",
        trigger: 'div.js_question-wrapper:contains("If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it") input',
        run: 'text 01/08/2020'
    }, { // Question: If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire?
        content: "Inputting answer '01/07/2021 00:00:01'",
        trigger: 'div.js_question-wrapper:contains("If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire") input',
        run: 'text 01/07/2021 00:00:01'
    }, { // Question: What day to you think is best for us to start having an annual sale (not rated)?
        content: "Inputting answer '01/01/2021'",
        trigger: 'div.js_question-wrapper:contains("What day to you think is best for us to start having an annual sale (not rated)") input',
        run: 'text 01/01/2021'
    }, { // Question: What day and time do you think most customers are most likely to call customer service (not rated)?
        content: "Inputting answer '01/01/2021 13:00:01'",
        trigger: 'div.js_question-wrapper:contains("What day and time do you think most customers are most likely to call customer service (not rated)") input',
        run: 'text 01/01/2021 13:00:01'
    }, { // Question: How many chairs do you think we should aim to sell in a year (not rated)?
        content: "Inputting answer '1000'",
        trigger: 'div.js_question-wrapper:contains("How many chairs do you think we should aim to sell in a year (not rated)") input',
        run: 'text 1000'
    }, {
        content: "Finish Survey",
        trigger: 'button[type="submit"]',
    }, {
        content: "Thank you",
        trigger: 'h1:contains("Thank you!")',
    }, {
        content: "test passed",
        trigger: 'div:contains("Congratulations, you have passed the test!")',
    }
]);

});
;

/***************************************************
*  Filepath: /survey/static/tests/tours/survey.js  *
*  Lines: 70                                       *
***************************************************/
odoo.define('survey.tour_test_survey', function (require) {
'use strict';

var tour = require('web_tour.tour');

tour.register('test_survey', {
    test: true,
    url: '/survey/start/b137640d-14d4-4748-9ef6-344caaaaaae',
}, [
    // Page-1
    {
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Answer Where do you live',
        trigger: 'div.js_question-wrapper:contains("Where do you live") input',
        run: 'text Mordor-les-bains',
    }, {
        content: 'Answer Where do you live',
        trigger: 'div.js_question-wrapper:contains("When is your date of birth") input',
        run: 'text 05/05/1980',
    }, {
        content: 'Answer How frequently do you buy products online',
        trigger: 'div.js_question-wrapper:contains("How frequently do you buy products online") label:contains("Once a month")',
    }, {
        content: 'Answer How many times did you order products on our website',
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website") input',
        run: 'text 12',
    }, {
        content: 'Submit and go to Next Page',
        trigger: 'button[value="next"]',
    },
    // Page-2
    {
        content: 'Answer Which of the following words would you use to describe our products (High Quality)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality")',
    }, {
        content: 'Answer Which of the following words would you use to describe our products (Good value for money)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money")',
    }, {
        content: 'Answer What do your think about our new eCommerce (The new layout and design is fresh and up-to-date)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") td:first',
    }, {
        content: 'Answer What do your think about our new eCommerce (It is easy to find the product that I want)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The tool to compare the products is useful to make a choice)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") td:eq(3)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The checkout process is clear and secure)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (I have added products to my wishlist)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") td:last',
    }, {
        content: 'Answer Do you have any other comments, questions, or concerns',
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: 'text This is great. Really.',
    }, {
        content: 'Click Submit and finish the survey',
        trigger: 'button[value="finish"]',
    },
    // Final page
    {
        content: 'Thank you',
        trigger: 'h1:contains("Thank you!")',
    }
]);

});
;

/*********************************************************************************
*  Filepath: /survey/static/tests/tours/survey_chained_conditional_questions.js  *
*  Lines: 67                                                                     *
*********************************************************************************/
odoo.define('survey.tour_test_survey_chained_conditional_questions', function (require) {
'use strict';

const tour = require('web_tour.tour');

tour.register('test_survey_chained_conditional_questions', {
    test: true,
    url: '/survey/start/3cfadce3-3f7e-41da-920d-10fa0eb19527',
}, [
    {
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Answer Q1 with Answer 2',
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 2")',
    }, {
        content: 'Check that Q4 and Q5 are visible',
        trigger: 'div.js_question-wrapper:contains(Q4)',
        extra_trigger: 'div.js_question-wrapper:contains(Q5)',
        run: () => {
            const selector = 'div.js_question-wrapper.d-none';
            if (document.querySelectorAll(selector).length !== 2) {
                throw new Error('Q2 and Q3 should be hidden.');
            }
        },
    }, {
        content: 'Answer Q1 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 1")',
    }, {
        content: 'Answer Q2 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q2") label:contains("Answer 1")',
        run: function (actions) {
            const selector = 'div.js_question-wrapper.d-none';
            if (document.querySelectorAll(selector).length !== 3) {
                throw new Error('Q3, Q4 and Q5 should be hidden.');
            }
            // Select Answer 1, in order to trigger the display of Q3.
            actions.click(this.$anchor);
        }
    }, {
        content: 'Answer Q3 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q3") label:contains("Answer 1")',
    }, {
        content: 'Answer Q1 with Answer 3',  // This should hide all remaining questions.
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 3")',
    }, {
        content: 'Check that only question 1 is now visible',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        run: () => {
            const selector = 'div.js_question-wrapper.d-none';
            if (document.querySelectorAll(selector).length !== 4) {
                throw new Error('Q2, Q3, Q4 and Q5 should have been hidden.');
            }
        }
    }, {
        content: 'Click Submit and finish the survey',
        trigger: 'button[value="finish"]',
    },
    // Final page
    {
        content: 'Thank you',
        trigger: 'h1:contains("Thank you!")',
    }

]);

});
;

/***********************************************************
*  Filepath: /survey/static/tests/tours/survey_prefill.js  *
*  Lines: 155                                              *
***********************************************************/
odoo.define('survey.tour_test_survey_prefill', function (require) {
'use strict';

var tour = require('web_tour.tour');

tour.register('test_survey_prefill', {
    test: true,
    url: '/survey/start/b137640d-14d4-4748-9ef6-344caaaaaae'
},
[{      // Page-1
        trigger: 'button.btn.btn-primary.btn-lg:contains("Start Survey")',
    }, { // Question: Where do you live ?
        trigger: 'div.js_question-wrapper:contains("Where do you live ?") input',
        run: 'text Grand-Rosiere',
    }, { // Question: When is your date of birth ?
        trigger: 'div.js_question-wrapper:contains("When is your date of birth ?") input',
        run: 'text 05/05/1980',
    }, { // Question: How frequently do you buy products online ?
        trigger: 'div.js_question-wrapper:contains("How frequently do you buy products online ?") label:contains("Once a week")',
    }, { // Question: How many times did you order products on our website ?
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website ?") input',
        run: 'text 42',
    }, {
        content: 'Click on Next Page',
        trigger: 'button[value="next"]',
    },
    // Page-2
    { // Question: Which of the following words would you use to describe our products ?
        content: 'Answer Which of the following words would you use to describe our products (High Quality)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality")',
    }, {
        content: 'Answer Which of the following words would you use to describe our products (Good value for money)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money")',
    }, {
        content: 'Answer What do your think about our new eCommerce (The new layout and design is fresh and up-to-date)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") td:first',
    }, {
        content: 'Answer What do your think about our new eCommerce (It is easy to find the product that I want)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The tool to compare the products is useful to make a choice)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") td:eq(3)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The checkout process is clear and secure)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (I have added products to my wishlist)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") td:last',
    }, {
        content: 'Answer Do you have any other comments, questions, or concerns',
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: 'text Is the prefill working?',
    }, {
        // Go back to previous page
        content: 'Click on the previous page name in the breadcrumb',
        trigger: 'ol.breadcrumb a:first',
    }, {
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website ?") input',
        run: function () {
            var $inputQ3 = $('div.js_question-wrapper:contains("How many times did you order products on our website ?") input');
            if ($inputQ3.val() === '42.0') {
                $('.o_survey_title').addClass('prefilled');
            }
        }
    }, {
        trigger: '.o_survey_title.prefilled',
        run: function () {
            // check that all the answers are prefilled in Page 1
            var $inputQ1 = $('div.js_question-wrapper:contains("Where do you live ?") input');
            if ($inputQ1.val() !== 'Grand-Rosiere') {
                return;
            }

            var $inputQ2 = $('div.js_question-wrapper:contains("When is your date of birth ?") input');
            if ($inputQ2.val() !== '05/05/1980') {
                return;
            }

            var $inputQ3 = $('div.js_question-wrapper:contains("How frequently do you buy products online ?") label:contains("Once a week") input');
            if (!$inputQ3.is(':checked')) {
                return;
            }

            var $inputQ4 = $('div.js_question-wrapper:contains("How many times did you order products on our website ?") input');
            if ($inputQ4.val() !== '42.0') {
                return;
            }

            $('.o_survey_title').addClass('tour_success');
        }
    }, {
        trigger: '.o_survey_title.tour_success'
    }, {
        content: 'Click on Next Page',
        trigger: 'button[value="next"]',
    }, {
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: function () {
            var $inputQ3 = $('div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea');
            if ($inputQ3.val() === "Is the prefill working?") {
                $('.o_survey_title').addClass('prefilled2');
            }
        }
    }, {
        trigger: '.o_survey_title.prefilled2',
        run: function () {
            // check that all the answers are prefilled in Page 2
            var $input1Q1 = $('div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality") input');
            if (!$input1Q1.is(':checked')) {
                return;
            }

            var $input2Q1 = $('div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money") input');
            if (!$input2Q1.is(':checked')) {
                return;
            }

            var $input1Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") input:first');
            if (!$input1Q2.is(':checked')) {
                return;
            }

            var $input2Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") input:eq(2)');
            if (!$input2Q2.is(':checked')) {
                return;
            }

            var $input3Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") input:eq(3)');
            if (!$input3Q2.is(':checked')) {
                return;
            }

            var $input4Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") input:eq(2)');
            if (!$input4Q2.is(':checked')) {
                return;
            }

            var $input5Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") input:last');
            if (!$input5Q2.is(':checked')) {
                return;
            }

            var $inputQ3 = $('div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea');
            if ($inputQ3.val() !== "Is the prefill working?") {
                return;
            }

            $('.o_survey_title').addClass('tour_success_2');
        }
    }, {
        trigger: '.o_survey_title.tour_success_2'
    }
]);

});
;

/***********************************************************************
*  Filepath: /survey/static/tests/tours/survey_session_manage_test.js  *
*  Lines: 37                                                           *
***********************************************************************/
odoo.define('survey.session_manage_test', function (require) {
"use strict";

var SessionManager = require('survey.session_manage');
/**
 * Small override for test/tour purposes.
 */
SessionManager.include({
    /**
     * - Trigger the fetch of answer results immediately at the start.
     * (Instead of wasting 2 seconds waiting after the start).
     * - Set the fade in/out time to 1 ms to avoid unnecessary delays.
     * - Avoid refreshing the results every 2 seconds
     */
    start: function () {
        var self = this;
        return this._super.apply(this, arguments)
            .then(this._refreshResults.bind(this))
            .then(function () {
                self.fadeInOutTime = 1;
                clearInterval(self.resultsRefreshInterval);
            });
    },

    /**
     * Force the timer to "now" to avoid introducing potential test breaking
     * timely variables (rpc/small server delay/...) if the start_question_time flickers.
     */
    _startTimer: function () {
        this.$el.data('timer', moment.utc());
        return this._super.apply(this, arguments);
    }
});

return SessionManager;

});
;

/***********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_create.js  *
*  Lines: 20                                                           *
***********************************************************************/
odoo.define('survey.test_survey_session_create_tour', function (require) {
"use strict";

var tour = require('web_tour.tour');
var surveySessionTools = require('survey.session_tour_tools');

/**
 * Small tour that will simply start the session and wait for attendees.
 */
tour.register('test_survey_session_create_tour', {
    url: "/web",
    test: true,
}, [].concat(surveySessionTools.accessSurveySteps, [{
    trigger: 'button[name="action_start_session"]',
}, {
    trigger: '.o_survey_session_attendees_count:contains("0")',
    run: function () {} // check session is correctly started
}]));

});
;

/***********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_manage.js  *
*  Lines: 462                                                          *
***********************************************************************/
odoo.define('survey.test_survey_session_manage_tour', function (require) {
"use strict";

var tour = require('web_tour.tour');
var surveySessionTools = require('survey.session_tour_tools');

/**
 * Since the chart is rendered using SVG, we can't use jQuery triggers to check if everything
 * is correctly rendered.
 * This helper method returns the chart data (Chartjs framework specific) in the following structure:
 * [{ value, backgroundColor, labelColor }]
 */
var getChartData = function () {
    var chartData = [];
    var rootWidget = odoo.__DEBUG__.services['root.widget'];
    var surveyManagePublicWidget = rootWidget.publicWidgets.find(function (widget) {
        return widget.$el.hasClass('o_survey_session_manage');
    });

    if (!surveyManagePublicWidget) {
        return chartData;
    }

    surveyManagePublicWidget.resultsChart.chart.data.datasets[0].data.forEach(function (value, index) {
        chartData.push({
            value: value,
            backgroundColor: surveyManagePublicWidget.resultsChart._getBackgroundColor({dataIndex: index}),
            labelColor: surveyManagePublicWidget.resultsChart._getLabelColor({dataIndex: index}),
        });
    });

    return chartData;
};

var nextScreen = function () {
    var e = $.Event('keydown');
    e.keyCode = 39; // arrow-right
    $(document).trigger(e);
};

var previousScreen = function () {
    var e = $.Event('keydown');
    e.keyCode = 37; // arrow-left
    $(document).trigger(e);
};

var REGULAR_ANSWER_COLOR = '#212529';
var CORRECT_ANSWER_COLOR = '#2CBB70';
var WRONG_ANSWER_COLOR = '#D9534F';

/**
 * A 'regular' answer is an answer that is nor correct, nor incorrect.
 * The check is based on the specific opacity (0.8) and color of those answers.
 */
var isRegularAnswer = function (answer) {
    return answer.backgroundColor.includes('0.8') &&
        answer.labelColor === REGULAR_ANSWER_COLOR;
};

/**
 * The check is based on the specific opacity (0.8) and color of correct answers.
 */
var isCorrectAnswer = function (answer) {
    return answer.backgroundColor.includes('0.8') &&
        answer.labelColor === CORRECT_ANSWER_COLOR;
};

/**
 * The check is based on the specific opacity (0.2) and color of incorrect answers.
 */
var isIncorrectAnswer = function (answer) {
    return answer.backgroundColor.includes('0.2') &&
        answer.labelColor === WRONG_ANSWER_COLOR;
};

/**
 * Tour that will test the whole survey session from the host point of view.
 *
 * Break down of the main points:
 * - Open the 'session manager' (the session was already created by a previous tour)
 * - Display the nickname question, and move to the next one (as answers are not displayed)
 * - Check answers are correctly displayed for the 3 'simple' question types (text, date, datetime)
 * - Move to the choice question and check that answers are displayed
 *   (The check is rather complex, see 'getChartData' for details)
 * - If everything is correctly displayed, move to the next question
 * - On the scored choice question, check that the screens are correctly chained:
 *   no results displayed -> results displayed -> correct/incorrect answers -> leaderboard
 * - On the scored + timed multiple choice question, check the same than previous question,
 *   except that the results are supposed to be displayed automatically when the question timer runs out
 * - Test the 'back' behavior and check that screens are reversed correctly
 * - Check that our final leaderboard is correct based on attendees answers
 * - Close the survey session
 */
tour.register('test_survey_session_manage_tour', {
    url: "/web",
    test: true,
}, [].concat(surveySessionTools.accessSurveySteps, [{
    trigger: 'button[name="action_open_session_manager"]',
}, {
    trigger: 'h1:contains("Nickname")',
    run: function () {} // check nickname question is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: 'h1:contains("Text Question")',
    run: function () {} // check text question is displayed
}, {
    trigger: '.o_survey_session_progress_small:contains("3 / 3")',
    run: function () {} // check we have 3 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 1 is the best")',
    run: function () {} // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 2 rulez")',
    run: function () {} // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 3 will crush you")',
    run: function () {} // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    run: function () {} // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010")',
    run: function () {} // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011")',
    run: function () {} // check attendee 2 answer is displayed
}, {
    trigger: 'h1',
    run: previousScreen
}, {
    trigger: 'h1:contains("Text Question")',
    run: function () {} // check text question is displayed
}, {
    trigger: '.o_survey_session_progress_small:contains("3 / 3")',
    run: function () {} // check we have 3 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 1 is the best")',
    run: function () {} // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 2 rulez")',
    run: function () {} // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 3 will crush you")',
    run: function () {} // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    run: function () {} // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010")',
    run: function () {} // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011")',
    run: function () {} // check attendee 2 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    run: function () {} // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010 10:00:00")',
    run: function () {} // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011 15:55:55")',
    run: function () {} // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: 'h1:contains("Regular Simple Choice")',
    run: function () {
        var chartData = getChartData();
        if (chartData.length !== 3) {
            console.error('Chart data should contain 3 records!');
            return;
        }

        var firstAnswerData = chartData[0];
        if (firstAnswerData.value !== 2 || !isRegularAnswer(firstAnswerData)) {
            console.error('First answer should be picked by 2 users!');
            return;
        }

        var secondAnswerData = chartData[1];
        if (secondAnswerData.value !== 1 || !isRegularAnswer(secondAnswerData)) {
            console.error('Second answer should be picked by 1 user!');
            return;
        }

        var thirdAnswerData = chartData[2];
        if (thirdAnswerData.value !== 0 || !isRegularAnswer(thirdAnswerData)) {
            console.error('Third answer should be picked by no users!');
            return;
        }

        nextScreen();
    }
}, {
    trigger: 'h1:contains("Scored Simple Choice")',
    run: function () {
        var chartData = getChartData();
        if (chartData.length !== 4) {
            console.error('Chart data should contain 4 records!');
            return;
        }

        for (var i = 0; i < chartData.length; i++) {
            if (chartData[i].value !== 0) {
                console.error(
                    'Chart data should all be 0 because "next screen" that shows ' +
                    'answers values is not triggered yet!');
                return;
            }
        }

        nextScreen();
        chartData = getChartData();

        var firstAnswerData = chartData[0];
        if (firstAnswerData.value !== 1 || !isRegularAnswer(firstAnswerData)) {
            console.error(
                'First answer should be picked by 1 user and its correctness should not be shown yet!'
            );
            return;
        }

        var secondAnswerData = chartData[1];
        if (secondAnswerData.value !== 1 || !isRegularAnswer(secondAnswerData)) {
            console.error(
                'Second answer should be picked by 1 user and its correctness should not be shown yet!'
            );
            return;
        }

        var thirdAnswerData = chartData[2];
        if (thirdAnswerData.value !== 1 || !isRegularAnswer(thirdAnswerData)) {
            console.error(
                'Third answer should be picked by 1 user and its correctness should not be shown yet!'
            );
            return;
        }

        var fourthAnswerData = chartData[3];
        if (fourthAnswerData.value !== 0 || !isRegularAnswer(fourthAnswerData)) {
            console.error(
                'Fourth answer should be picked by no users and its correctness should not be shown yet!'
            );
            return;
        }

        nextScreen();
        chartData = getChartData();

        firstAnswerData = chartData[0];
        if (firstAnswerData.value !== 1 || !isCorrectAnswer(firstAnswerData)) {
            console.error(
                'First answer should be picked by 1 user and it should be correct!'
            );
            return;
        }

        secondAnswerData = chartData[1];
        if (secondAnswerData.value !== 1 || !isIncorrectAnswer(secondAnswerData)) {
            console.error(
                'Second answer should be picked by 1 user and it should be incorrect!'
            );
            return;
        }

        thirdAnswerData = chartData[2];
        if (thirdAnswerData.value !== 1 || !isIncorrectAnswer(thirdAnswerData)) {
            console.error(
                'Third answer should be picked by 1 user and it should be incorrect!'
            );
            return;
        }

        fourthAnswerData = chartData[3];
        if (fourthAnswerData.value !== 0 || !isIncorrectAnswer(fourthAnswerData)) {
            console.error(
                'Fourth answer should be picked by no users and it should be incorrect!'
            );
            return;
        }

        nextScreen();
        nextScreen();
    }
}, {
    trigger: 'h1:contains("Timed Scored Multiple Choice")',
    run: function () {
        var chartData = getChartData();
        if (chartData.length !== 3) {
            console.error('Chart data should contain 4 records!');
            return;
        }

        for (var i = 0; i < chartData.length; i++) {
            if (chartData[i].value !== 0) {
                console.error(
                    'Chart data should all be 0 because "next screen" that shows ' +
                    'answers values is not triggered yet!');
                return;
            }
        }

        // after 1 second, results are displayed automatically because question timer runs out
        // we add 1 extra second because of the way the timer works:
        // it only triggers the time_up event 1 second AFTER the delay is passed
        setTimeout(function () {
            chartData = getChartData();
            var firstAnswerData = chartData[0];
            if (firstAnswerData.value !== 2 || !isRegularAnswer(firstAnswerData)) {
                console.error(
                    'First answer should be picked by 2 users and its correctness should not be shown yet!'
                );
                return;
            }

            var secondAnswerData = chartData[1];
            if (secondAnswerData.value !== 2 || !isRegularAnswer(secondAnswerData)) {
                console.error(
                    'Second answer should be picked by 2 users and its correctness should not be shown yet!'
                );
                return;
            }

            var thirdAnswerData = chartData[2];
            if (thirdAnswerData.value !== 1 || !isRegularAnswer(thirdAnswerData)) {
                console.error(
                    'Third answer should be picked by 1 user and its correctness should not be shown yet!'
                );
                return;
            }

            nextScreen();
            chartData = getChartData();

            firstAnswerData = chartData[0];
            if (firstAnswerData.value !== 2 || !isCorrectAnswer(firstAnswerData)) {
                console.error(
                    'First answer should be picked by 2 users and it should be correct!'
                );
                return;
            }

            secondAnswerData = chartData[1];
            if (secondAnswerData.value !== 2 || !isCorrectAnswer(secondAnswerData)) {
                console.error(
                    'Second answer should be picked by 2 users and it should be correct!'
                );
                return;
            }

            thirdAnswerData = chartData[2];
            if (thirdAnswerData.value !== 1 || !isIncorrectAnswer(thirdAnswerData)) {
                console.error(
                    'Third answer should be picked by 1 user and it should be incorrect!'
                );
                return;
            }

            nextScreen();
        }, 2100);
    }
}, {
    trigger: 'h1:contains("Final Leaderboard")',
    run: function () {} // Final Leaderboard is displayed
}, {
    trigger: 'h1',
    run: function () {
        // previous screen testing
        previousScreen();
        var chartData = getChartData();

        var firstAnswerData = chartData[0];
        if (firstAnswerData.value !== 2 || !isCorrectAnswer(firstAnswerData)) {
            console.error(
                'First answer should be picked by 2 users and it should be correct!'
            );
            return;
        }

        var secondAnswerData = chartData[1];
        if (secondAnswerData.value !== 2 || !isCorrectAnswer(secondAnswerData)) {
            console.error(
                'Second answer should be picked by 2 users and it should be correct!'
            );
            return;
        }

        var thirdAnswerData = chartData[2];
        if (thirdAnswerData.value !== 1 || !isIncorrectAnswer(thirdAnswerData)) {
            console.error(
                'Third answer should be picked by 1 user and it should be incorrect!'
            );
            return;
        }

        previousScreen();
        chartData = getChartData();

        firstAnswerData = chartData[0];
        if (firstAnswerData.value !== 2 || !isRegularAnswer(firstAnswerData)) {
            console.error(
                'First answer should be picked by 2 users and its correctness should not be shown!'
            );
            return;
        }

        secondAnswerData = chartData[1];
        if (secondAnswerData.value !== 2 || !isRegularAnswer(secondAnswerData)) {
            console.error(
                'Second answer should be picked by 2 users and its correctness should not be shown!'
            );
            return;
        }

        thirdAnswerData = chartData[2];
        if (thirdAnswerData.value !== 1 || !isRegularAnswer(thirdAnswerData)) {
            console.error(
                'Third answer should be picked by 1 user and its correctness should not be shown!'
            );
            return;
        }

        previousScreen();
        chartData = getChartData();

        for (var i = 0; i < chartData.length; i++) {
            if (chartData[i].value !== 0) {
                console.error(
                    'Chart data should all be 0 because "next screen" that shows ' +
                    'answers values is not triggered yet!');
                return;
            }
        }

        // Now we go forward to the "Final Leaderboard" again (3 times)
        for (i = 0; i < 3; i++) {
            nextScreen();
        }
    }
}, {
    trigger: 'h1:contains("Final Leaderboard")',
    run: function () {} // Final Leaderboard is displayed
}, {
    trigger: '.o_survey_session_close:has("i.fa-close")'
}, {
    trigger: 'button[name="action_start_session"]',
    run: function () {} // check that we can start another session
}]));

});
;

/**********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_start.js  *
*  Lines: 32                                                          *
**********************************************************************/
odoo.define('survey.test_survey_session_start_tour', function (require) {
"use strict";

var tour = require('web_tour.tour');
var surveySessionTools = require('survey.session_tour_tools');

/**
 * Small tour that will open the session manager and check
 * that the attendees are accounted for, then start the session
 * by going to the first question.
 */
tour.register('test_survey_session_start_tour', {
    url: "/web",
    test: true,
}, [].concat(surveySessionTools.accessSurveySteps, [{
    trigger: 'button[name="action_open_session_manager"]',
}, {
    trigger: '.o_survey_session_attendees_count:contains("3")',
    run: function () {} // check attendees count
}, {
    trigger: 'h1',
    run: function () {
        var e = $.Event('keydown');
        e.keyCode = 39; // arrow-right
        $(document).trigger(e); // start session
    }
}, {
    trigger: 'h1:contains("Nickname")',
    run: function () {} // check first question is displayed
}]));

});
;

/**********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_tools.js  *
*  Lines: 21                                                          *
**********************************************************************/
odoo.define('survey.session_tour_tools', function (require) {
'use strict';

var tour = require('web_tour.tour');

/**
 * Tool that gathers common steps to every 'survey session' tours.
 */
return {
    accessSurveySteps: [tour.stepUtils.showAppsMenuItem(), {
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
        edition: 'community'
    }, {
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
        edition: 'enterprise'
    }, {
        trigger: '.oe_kanban_card:contains("User Session Survey")',
    }]
};

});
;

/***********************************************************************************
*  Filepath: /website_hr_recruitment/static/tests/tours/website_hr_recruitment.js  *
*  Lines: 131                                                                      *
***********************************************************************************/
odoo.define('website_hr_recruitment.tour', function(require) {
    'use strict';

    var tour = require("web_tour.tour");
    const wTourUtils = require("website.tour_utils");

    function applyForAJob(jobName, application) {
        return [{
            content: "Select Job",
            trigger: `.oe_website_jobs h3 span:contains(${jobName})`,
        }, {
            content: "Apply",
            trigger: ".js_hr_recruitment a:contains('Apply')",
        }, {
            content: "Complete name",
            trigger: "input[name=partner_name]",
            run: `text ${application.name}`,
        }, {
            content: "Complete Email",
            trigger: "input[name=email_from]",
            run: `text ${application.email}`,
        }, {
            content: "Complete phone number",
            trigger: "input[name=partner_mobile]",
            run: `text ${application.phone}`,
        }, {
            content: "Complete Subject",
            trigger: "textarea[name=description]",
            run: `text ${application.subject}`,
        }, { // TODO: Upload a file ?
            content: "Send the form",
            trigger: ".s_website_form_send",
        }, {
            content: "Check the form is submitted without errors",
            trigger: ".oe_structure:has(h1:contains('Congratulations'))",
        }];
    }

    tour.register('website_hr_recruitment_tour', {
        test: true,
        url: '/jobs',
    }, [
        ...applyForAJob('Guru', {
            name: 'John Smith',
            email: 'john@smith.com',
            phone: '118.218',
            subject: '### [GURU] HR RECRUITMENT TEST DATA ###',
        }),
        {
            content: "Go back to the jobs page",
            trigger: "body",
            run: () => {
                window.location.href = '/jobs';
            },
        },
        ...applyForAJob('Internship', {
            name: 'Jack Doe',
            email: 'jack@doe.com',
            phone: '118.712',
            subject: '### HR [INTERN] RECRUITMENT TEST DATA ###',
        }),
    ]);

    wTourUtils.registerWebsitePreviewTour('website_hr_recruitment_tour_edit_form', {
        test: true,
        url: '/jobs',
    }, [{
        content: 'Go to the Guru job page',
        trigger: 'iframe a[href*="guru"]',
    }, {
        content: 'Go to the Guru job form',
        trigger: 'iframe a[href*="apply"]',
    }, {
        content: 'Check if the Guru form is present',
        trigger: 'iframe form'
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: 'Add a fake default value for the job_id field',
        trigger: "body",
        run: () => {
            // It must be done in this way because the editor does not allow to
            // put a default value on a field with type="hidden".
            document.querySelector('.o_iframe:not(.o_ignore_in_tour)').contentDocument.querySelector('input[name="job_id"]').value = 'FAKE_JOB_ID_DEFAULT_VAL';
        },
    }, {
        content: 'Edit the form',
        trigger: 'iframe input[type="file"]',
    }, {
        content: 'Add a new field',
        trigger: 'we-button[data-add-field]',
    }, {
        content: 'Save',
        trigger: 'button[data-action="save"]',
    }, {
        content: 'Go back to /jobs page after save',
        trigger: 'iframe body:not(.editor_enable)',
        run: () => {
            window.location.href = wTourUtils.getClientActionUrl('/jobs');
        }
    }, {
        content: 'Go to the Internship job page',
        trigger: 'iframe a[href*="internship"]',
    }, {
        content: 'Go to the Internship job form',
        trigger: 'iframe a[href*="apply"]',
    }, {
        content: 'Check that a job_id has been loaded',
        trigger: 'iframe form',
        run: () => {
            const selector =
                'input[name="job_id"]:not([value=""]):not([value = "FAKE_JOB_ID_DEFAULT_VAL"])';
            if (!document.querySelector('.o_iframe:not(.o_ignore_in_tour)').contentDocument.querySelector(selector)) {
                console.error('The job_id field has a wrong value');
            }
        }
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: 'Verify that the job_id field has kept its default value',
        trigger: "body",
        run: () => {
            if (!document.querySelector('.o_iframe:not(.o_ignore_in_tour)').contentDocument.querySelector('input[name="job_id"][value="FAKE_JOB_ID_DEFAULT_VAL"]')) {
                console.error('The job_id field has lost its default value');
            }
        }
    },
]);

    return {};
});
;

/***************************************************
*  Filepath: /auth_totp/static/tests/totp_flow.js  *
*  Lines: 339                                      *
***************************************************/
odoo.define('auth_totp.tours', function(require) {
"use strict";

const tour = require('web_tour.tour');
const ajax = require('web.ajax');

function openRoot() {
    return [{
        content: "return to client root to avoid race condition",
        trigger: 'body',
        run() {
            $('body').addClass('wait');
            window.location = '/web';
        }
    }, {
        content: "wait for client reload",
        trigger: 'body:not(.wait)',
        run() {}
    }];
}
function openUserProfileAtSecurityTab() {
    return [{
        content: 'Open user account menu',
        trigger: '.o_user_menu .oe_topbar_name',
        run: 'click',
    }, {
        content: "Open preferences / profile screen",
        trigger: '[data-menu=settings]',
        run: 'click',
    }, {
        content: "Switch to security tab",
        trigger: 'a[role=tab]:contains("Account Security")',
        run: 'click',
    }];
}

/**
 * Checks that the TOTP button is in the specified state (true = enabled =
 * can disable, false = disabled = can enable), then closes the profile dialog
 * if it's one (= hr not installed).
 *
 * If no totp state is provided, just checks that the toggle exists.
 */
function closeProfileDialog({content, totp_state}) {
    let trigger;
    switch (totp_state) {
    case true: trigger = 'button[name=action_totp_disable]'; break;
    case false: trigger = 'button[name=action_totp_enable_wizard]'; break;
    case undefined: trigger = 'button.o_auth_2fa_btn'; break;
    default: throw new Error(`Invalid totp state ${totp_state}`)
    }

    return [{
        content,
        trigger,
        run() {
            const $modal = this.$anchor.parents('.o_dialog_container');
            if ($modal.length) {
                $modal.find('button[name=preference_cancel]').click()
            }
        }
    }, {
        trigger: 'body',
        async run() {
            while (document.querySelector('.o_dialog_container .o_dialog')) {
                await Promise.resolve();
            }
            this.$anchor.addClass('dialog-closed');
        },
    }, {
        trigger: 'body.dialog-closed',
        run() {},
    }];
}

tour.register('totp_tour_setup', {
    test: true,
    url: '/web'
}, [...openUserProfileAtSecurityTab(), {
    content: "Open totp wizard",
    trigger: 'button[name=action_totp_enable_wizard]',
}, {
    content: "Check that we have to enter enhanced security mode and input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text demo',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check the wizard has opened",
    trigger: 'li:contains("When requested to do so")',
    run() {}
}, {
    content: "Get secret from collapsed div",
    trigger: 'a:contains("Cannot scan it?")',
    async run(helpers) {
        const $secret = this.$anchor.closest('div').find('[name=secret] span:first-child');
        const $copyBtn = $secret.find('button');
        $copyBtn.remove();
        const token = await ajax.jsonRpc('/totphook', 'call', {
            secret: $secret.text()
        });
        helpers.text(token, '[name=code] input');
        helpers.click('button.btn-primary:contains(Activate)');
        $('body').addClass('got-token')
    }
}, {
    content: 'wait for rpc',
    trigger: 'body.got-token',
    run() {}
},
...openRoot(),
...openUserProfileAtSecurityTab(),
...closeProfileDialog({
    content: "Check that the button has changed",
    totp_state: true,
}),
]);

tour.register('totp_login_enabled', {
    test: true,
    url: '/'
}, [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    async run(helpers) {
        // TODO: if tours are ever async-aware the click should get moved out,
        //       but currently there's no great way to make the tour wait until
        //       we've retrieved and set the token: `:empty()` is aboutthe text
        //       content of the HTML element, not the JS value property. We
        //       could set a class but that's really no better than
        //       procedurally clicking the button after we've set the input.
        const token = await ajax.jsonRpc('/totphook', 'call', {});
        helpers.text(token);
        helpers.click('button:contains("Log in")');
    }
}, {
    content: "check we're logged in",
    trigger: ".o_user_menu .oe_topbar_name",
    run() {}
}]);

tour.register('totp_login_device', {
    test: true,
    url: '/'
}, [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "check remember device box",
    trigger: 'label[for=switch-remember]',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    async run(helpers) {
        const token = await ajax.jsonRpc('/totphook', 'call', {})
        helpers.text(token);
        helpers.click('button:contains("Log in")');
    }
}, {
    content: "check we're logged in",
    trigger: ".o_user_menu .oe_topbar_name",
    run: 'click',
}, {
    content: "click the Log out button",
    trigger: '.dropdown-item[data-menu=logout]',
}, {
    content: "check that we're back on the login page or go to it",
    trigger: 'input#login, a:contains(Log in)'
}, {
    content: "input login again",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password again',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button again",
    trigger: 'button:contains("Log in")',
},  {
    content: "check we're logged in without 2FA",
    trigger: ".o_user_menu .oe_topbar_name",
    run() {}
},
// now go and disable two-factor authentication would be annoying to do in a separate tour
// because we'd need to login & totp again as HttpCase.authenticate can't
// succeed w/ totp enabled
...openUserProfileAtSecurityTab(),
{
    content: "Open totp wizard",
    trigger: 'button[name=action_totp_disable]',
}, {
    content: "Check that we have to enter enhanced security mode and input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text demo',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
},
...openRoot(),
...openUserProfileAtSecurityTab(),
...closeProfileDialog({
    content: "Check that the button has changed",
    totp_state: false
}),
]);

tour.register('totp_login_disabled', {
    test: true,
    url: '/'
}, [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
},
// normally we'd end the tour here as it's all we care about but there are a
// bunch of ongoing queries from the loading of the web client which cause
// issues, so go and open the preferences / profile screen to make sure
// everything settles down
...openUserProfileAtSecurityTab(),
// close the dialog if that makes sense
...closeProfileDialog({})
]);

const columns = {};
tour.register('totp_admin_disables', {
    test: true,
    url: '/web'
}, [tour.stepUtils.showAppsMenuItem(), {
    content: 'Go to settings',
    trigger: '[data-menu-xmlid="base.menu_administration"]'
}, {
    content: 'Wait for page',
    trigger: '.o_menu_brand:contains("Settings")',
    run() {}
}, {
    content: "Open Users menu",
    trigger: '[data-menu-xmlid="base.menu_users"]'
}, {
    content: "Open Users view",
    trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
    run(helpers) {
        // funny story: the users view we're trying to reach, sometimes we're
        // already there, but if we re-click the next step executes before the
        // action has the time to re-load, the one after that doesn't, and our
        // selection get discarded by the action reloading, so here try to
        // see if we're already on the users action through the breadcrumb and
        // just close the menu if so
        const $crumb = $('.breadcrumb');
        if ($crumb.text().indexOf('Users') === -1) {
            // on general settings page, click menu
            helpers.click();
        } else {
            // else close menu
            helpers.click($('[data-menu-xmlid="base.menu_users"]'));
        }
    }
}, {
    content: "Find Demo User",
    trigger: 'td.o_data_cell:contains("demo")',
    run(helpers) {
        const $titles = this.$anchor.closest('table').find('tr:first th');
        for (let i=0; i<$titles.length; ++i) {
            columns[$titles[i].getAttribute('data-name')] = i;
        }
        const $row = this.$anchor.closest('tr');
        const sel = $row.find('.o_list_record_selector input[type=checkbox]');
        helpers.click(sel);
    }
}, {
    content: "Open Actions menu",
    trigger: 'button.dropdown-toggle:contains("Action")'
}, {
    content: "Select totp remover",
    trigger: 'span.dropdown-item:contains(Disable two-factor authentication)'
}, { // enhanced security yo
    content: "Check that we have to enter enhanced security mode & input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text admin',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(demo)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, ...closeProfileDialog({
    content: "check that demo user has been de-totp'd",
    totp_state: false,
}),
])
});
;

/********************************************************
*  Filepath: /auth_totp_mail/static/tests/totp_flow.js  *
*  Lines: 75                                            *
********************************************************/
odoo.define('auth_totp_mail.tours', function(require) {
"use strict";

const tour = require('web_tour.tour');

function openAccountSettingsTab() {
    return [{
        content: 'Go to settings',
        trigger: '[data-menu-xmlid="base.menu_administration"]'
    }, {
        content: 'Wait for page',
        trigger: '.o_menu_brand:contains("Settings")',
        run: () => {}
    }, {
        content: "Open Users menu",
        trigger: '[data-menu-xmlid="base.menu_users"]'
    }, {
        content: "Open Users view",
        trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
        run: function (helpers) {
            // funny story: the users view we're trying to reach, sometimes we're
            // already there, but if we re-click the next step executes before the
            // action has the time to re-load, the one after that doesn't, and our
            // selection get discarded by the action reloading, so here try to
            // see if we're already on the users action through the breadcrumb and
            // just close the menu if so
            const $crumb = $('.breadcrumb');
            if ($crumb.text().indexOf('Users') === -1) {
                // on general settings page, click menu
                helpers.click();
            } else {
                // else close menu
                helpers.click($('[data-menu-xmlid="base.menu_users"]'));
            }
        }
    }];
}

tour.register('totp_admin_self_invite', {
    test: true,
    url: '/web'
}, [tour.stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(admin)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, {
    content: "check that user cannot invite themselves to use 2FA.",
    trigger: "body",
    run: function () {
        const inviteBtn = $('button:contains(Invite to use 2FA)')[0];
        if (!inviteBtn) {
            $('body').addClass('CannotInviteYourself');
        }
    }
}, {
    content: "check that user cannot invite themself.",
    trigger: "body.CannotInviteYourself"
}]);

tour.register('totp_admin_invite', {
    test: true,
    url: '/web'
}, [tour.stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(demo)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, {
    content: "check that demo user can be invited to use 2FA.",
    trigger: "button:contains(Invite to use 2FA)",
}]);

});;

/************************************************************
*  Filepath: /auth_totp_portal/static/tests/totp_portal.js  *
*  Lines: 124                                               *
************************************************************/
odoo.define('auth_totp_portal.tours', function(require) {
"use strict";

const tour = require('web_tour.tour');
const ajax = require('web.ajax');

tour.register('totportal_tour_setup', {
    test: true,
    url: '/my/security'
}, [{
    content: "Open totp wizard",
    trigger: 'button#auth_totp_portal_enable',
}, {
    content: "Check that we have to enter enhanced security mode",
    trigger: 'div:contains("enter your password")',
    run: () => {},
}, {
    content: "Input password",
    trigger: '[name=password]',
    run: 'text portal', // FIXME: better way to do this?
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check the wizard has opened",
    trigger: 'li:contains("scan the barcode below")',
    run: () => {}
}, {
    content: "Get secret from collapsed div",
    trigger: 'a:contains("Cannot scan it?")',
    run: async function(helpers) {
        const secret = this.$anchor.closest('div').find('span[name="secret"]').text();
        const token = await ajax.jsonRpc('/totphook', 'call', {
            secret
        });
        helpers._text(helpers._get_action_values('input[name=code]'), token);
        helpers._click(helpers._get_action_values('button.btn-primary:contains(Activate)'));
    }
}, {
    content: "Check that the button has changed",
    trigger: 'button:contains(Disable two-factor authentication)',
    run: () => {}
}]);

tour.register('totportal_login_enabled', {
    test: true,
    url: '/'
}, [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text portal',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text portal',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    run: async function (helpers) {
        const token = await ajax.jsonRpc('/totphook', 'call', {});
        helpers._text(helpers._get_action_values(), token);
        // FIXME: is there a way to put the button as its own step trigger without
        //        the tour straight blowing through and not waiting for this?
        helpers._click(helpers._get_action_values('button:contains("Log in")'));
    }
}, {
    content: "check we're logged in",
    trigger: "h3:contains(Documents)",
    run: () => {}
}, {
    content: "go back to security",
    trigger: "a:contains(Security)",
},{
    content: "Open totp wizard",
    trigger: 'button#auth_totp_portal_disable',
}, {
    content: "Check that we have to enter enhanced security mode",
    trigger: 'div:contains("enter your password")',
    run: () => {},
}, {
    content: "Input password",
    trigger: '[name=password]',
    run: 'text portal', // FIXME: better way to do this?
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check that the button has changed",
    trigger: 'button:contains(Enable two-factor authentication)',
    run: () => {}
}]);

tour.register('totportal_login_disabled', {
    test: true,
    url: '/'
}, [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text portal',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text portal',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "check we're logged in",
    trigger: "h3:contains(Documents)",
    run: () => {}
}]);
});
;

/*****************************************************************
*  Filepath: /website_links/static/tests/tours/website_links.js  *
*  Lines: 84                                                     *
*****************************************************************/
odoo.define('website_links.website_links_tour', function (require) {
'use strict';

var tour = require("web_tour.tour");

tour.register('website_links_tour', {
    test: true,
    url: '/r',
},
    [
        // 1. Create a tracked URL
        {
            content: "check that existing links are shown",
            trigger: '#o_website_links_recent_links .btn_shorten_url_clipboard',
            run: function () {}, // it's a check
        },
        {
            content: "fill the form and submit it",
            trigger: '#o_website_links_link_tracker_form input#url',
            run: function () {
                var url = window.location.host + '/contactus';
                $('#o_website_links_link_tracker_form input#url').val(url);
                const campaignId = Object.entries($('#s2id_campaign-select')[0]).find(([key, value]) => value.select2)[1].select2.opts.data.find(d => d.text === "Sale").id
                $('.o_website_links_utm_forms input#campaign-select').val(campaignId).change();
                const channelId = Object.entries($('#s2id_channel-select')[0]).find(([key, value]) => value.select2)[1].select2.opts.data.find(d => d.text === "Website").id
                $('.o_website_links_utm_forms input#channel-select').val(channelId).change();
                const sourceId = Object.entries($('#s2id_source-select')[0]).find(([key, value]) => value.select2)[1].select2.opts.data.find(d => d.text === "Search engine").id
                $('.o_website_links_utm_forms input#source-select').val(sourceId).change();
                $('#btn_shorten_url').click();
            },
        },
        // 2. Visit it
        {
            content: "check that link was created and visit it",
            extra_trigger: '#o_website_links_recent_links .truncate_text:first():contains("Contact Us")',
            trigger: '#o_website_links_link_tracker_form #generated_tracked_link:contains("/r/")',
            run: function () {
                window.location.href = $('#generated_tracked_link').text();
            },
        },
        {
            content: "check that we landed on correct page with correct query strings",
            trigger: '.s_title h1:containsExact("Contact us")',
            run: function () {
                var expectedUrl = "/contactus?utm_campaign=Sale&utm_source=Search+engine&utm_medium=Website";
                if (window.location.pathname + window.location.search !== expectedUrl) {
                    console.error("The link was not correctly created. " + window.location.search);
                }
                window.location.href = '/r';
            },
        },
        // 3. Check that counter got incremented and charts are correctly displayed
        {
            content: "filter recently used links",
            trigger: '#filter-recently-used-links',
        },
        {
            content: "visit link stats page",
            trigger: '#o_website_links_recent_links a:containsExact("Stats"):first',
        },
        {
            content: "check click number and ensure graphs are initialized",
            extra_trigger: '.website_links_click_chart .title:contains("1 clicks")',
            trigger: 'canvas',
            run: function () {}, // it's a check
        },
        {
            content: "click on Last Month tab",
            trigger: '.o_website_links_chart .graph-tabs a:contains("Last Month")',
        },
        {
            content: "ensure tab is correctly resized",
            trigger: '#last_month_charts #last_month_clicks_chart',
            run: function () {
                var width = $('#last_month_charts #last_month_clicks_chart').width();
                if (width < 50) {
                    console.error("The graphs are probably not resized on tab change.");
                }
            },
        },
    ]
);

});
;

/***************************************************************************
*  Filepath: /website_mass_mailing/static/tests/tours/newsletter_block.js  *
*  Lines: 71                                                               *
***************************************************************************/
odoo.define('@website_mass_mailing/../tests/tours/newsletter_block', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('newsletter_block_edition', {
    test: true,
    url: '/',
    edition: true,
}, [
    // Put a Newsletter block.
    wTourUtils.dragNDrop({
        id: 's_newsletter_block',
        name: 'Newsletter Block',
    }),
    {
        content: 'Wait for the list id to be set.',
        trigger: 'iframe .s_newsletter_block[data-list-id]:not([data-list-id="0"]) .s_newsletter_subscribe_form',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnSave(),
    // Subscribe to the newsletter.
    {
        content: 'Wait for the email to be loaded in the newsletter input',
        trigger: 'iframe .s_newsletter_block .js_subscribe_btn',
        extra_trigger: 'iframe .s_newsletter_block input:propValue(admin@yourcompany.example.com)',
    },
    // Change the link style.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: 'Click on the Subscribe button',
        trigger: 'iframe .s_newsletter_block .js_subscribe_btn',
    },
    {
        content: 'Toggle the option to display the Thanks button',
        trigger: 'we-button[data-toggle-thanks-button] we-checkbox',
    },
    {
        content: 'Click on the Thanks button',
        trigger: 'iframe .s_newsletter_block .js_subscribed_btn',
    },
    {
        content: 'Click on the link style button',
        trigger: '[data-bs-original-title="Link Style"]',
    },
    {
        content: 'Click on the primary style button',
        trigger: '[data-value="primary"]',
    },
    {
        content: 'Change the shape of the button',
        trigger: '[data-bs-original-title="Link Shape"]',
    },
    {
        content: 'Click on the flat shape button',
        trigger: '[data-value="flat"]',
    },
    ...wTourUtils.clickOnSave(),
    // Check if the button style is correct (make sure that the 'btn-success'
    // class which is not suggested as a valid style in the editor panel did not
    // prevent to edit the button).
    {
        content: 'Check that the link style is correct',
        trigger: 'iframe .s_newsletter_block .js_subscribed_btn.btn.btn-primary.flat:not(.btn-success)',
    },
]);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website_mass_mailing/static/tests/tours/newsletter_popup.js  *
*  Lines: 81                                                               *
***************************************************************************/
odoo.define("website_mass_mailing.tour.newsletter_popup_edition", function (require) {
"use strict";

const wTourUtils = require('website.tour_utils');
const newsletterPopupUseTour = require('website_mass_mailing.tour.newsletter_popup_use');

wTourUtils.registerWebsitePreviewTour("newsletter_popup_edition", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_newsletter_subscribe_popup',
        name: 'Newsletter Popup',
    }),
    {
        content: "Check the modal is opened for edition",
        trigger: 'iframe .o_newsletter_popup .modal:visible',
        in_modal: false,
        run: () => null,
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Check the modal has been saved, closed",
        trigger: 'iframe body:has(.o_newsletter_popup)',
        extra_trigger: 'iframe body:not(.editor_enable)',
        run: newsletterPopupUseTour.ensurePopupNotVisible,
    }
]);
});

odoo.define("website_mass_mailing.tour.newsletter_popup_use", function (require) {
"use strict";

const tour = require('web_tour.tour');

function ensurePopupNotVisible() {
    const $modal = this.$anchor.find('.o_newsletter_popup .modal');
    if ($modal.length !== 1) {
        // Avoid the tour to succeed if the modal can't be found while
        // it should. Indeed, if the selector ever becomes wrong and the
        // expected element is actually not found anymore, the test
        // won't be testing anything anymore as the visible check will
        // always be truthy on empty jQuery element.
        console.error("Modal couldn't be found in the DOM. The tour is not working as expected.");
    }
    if ($modal.is(':visible')) {
        console.error('Modal should not be opened.');
    }
}

tour.register('newsletter_popup_use', {
    test: true,
    url: '/',
}, [
    {
        content: "Check the modal is not yet opened and force it opened",
        trigger: 'body:has(.o_newsletter_popup)',
        run: ensurePopupNotVisible,
    },
    {
        content: "Check the modal is now opened and enter text in the subscribe input",
        trigger: '.o_newsletter_popup .modal input',
        in_modal: false,
        run: 'text hello@world.com',
    },
    {
        content: "Subscribe",
        trigger: '.modal-dialog .btn-primary',
    },
    {
        content: "Check the modal is now closed",
        trigger: 'body:has(.o_newsletter_popup)',
        run: ensurePopupNotVisible,
    }
]);

return {
    ensurePopupNotVisible: ensurePopupNotVisible,
};
});


//# sourceMappingURL=/web/assets/400-465c8f4/1/web.assets_tests.js.map